{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction \u00e0 Python en Sciences de la nature","text":"<p>Le langage Python</p> <p></p> <p>Le langage Python est utilis\u00e9 depuis pr\u00e8s de 30 ans principalement dans le traitement des donn\u00e9es. La version utilis\u00e9e pour cette formation est Python 3.12.</p> <p>Visiter le cite de Python Software Foundation.</p>"},{"location":"#structure-de-la-formation","title":"Structure de la formation","text":"<p>La formation se veut un r\u00e9sum\u00e9 des principaux \u00e9l\u00e9ments de la comp\u00e9tence 0F01 : D\u00e9velopper des programmes informatiques en vue d\u2019automatiser la r\u00e9solution de probl\u00e8mes dans un contexte scientifique. du programme 200.B1 Sciences de la nature. Elle pr\u00e9sente aussi certaines applications scientifique de la programmation en Python.  Elle se divise en trois modules sur un total de 8 heures. </p> <p>Module 1 - Installation et d\u00e9marrage avec Python </p> <p>Ce module pr\u00e9sente le contexte de la programmation et quelques g\u00e9n\u00e9ralit\u00e9s sur les ordinateurs et le monde de la programmation. Le module couvre aussi l'installation des outils n\u00e9cessaires pour utiliser le langage Python ainsi que les instructions de base du langage. \u00c0 la fin de ce module, les personnes participantes peuvent \u00e9crire des programmes simples pour effectuer des op\u00e9rations arithm\u00e9tiques.</p> <p> 2 heures</p> <p>Module 2 - Programmer avec Python </p> <p>Le second module approfondit l'utilisation du langage Python pour r\u00e9soudre des probl\u00e8mes en utilisant l'informatique. Le module aborde les boucles, les collections de donn\u00e9es et les fonctions. Il y est aussi trait\u00e9 des techniques de base de conception de programme, de d\u00e9boggage et de documentation. \u00c0 la fin de ce module, les personnes participantes peuvent \u00e9crire des programmes r\u00e9soudre des probl\u00e8mes en sciences et en math\u00e9matique.</p> <p> 4 heures</p> <p>Module 3 - Biblioth\u00e8ques logicielles de Python </p> <p>Le dernier module pr\u00e9sente sommairement cinq biblioth\u00e8ques de Python qui viennent augmenter les possibilit\u00e9s d'utilisation de la programmation scientifique et simplier son usage. Les cinq biblioth\u00e8ques couvertes dans ce module sont :</p> <ul> <li>Pandas : manipulation de jeu de donn\u00e9es</li> <li>Mathplotlib : tra\u00e7age de graphiques</li> <li>NumPy : d\u00e9nombrement et statistiques descriptives</li> <li>SciPy : tests d'hypoth\u00e8se</li> <li>SymPy : calcul symbolique d'\u00e9quations diff\u00e9rentiels et de syt\u00e8mes lin\u00e9aires </li> </ul> <p>\u00c0 la fin de ce module, les personnes participantes pourront \u00e9crire des programmes qui utilisent ces biblioth\u00e8ques et disposeront d'outils pour rechercher et installer d'autres biblioth\u00e8ques qui pourraient r\u00e9pondre \u00e0 d'autres contexte d'utilisation de la programmation scientifique.</p> <p> 2 heures</p>"},{"location":"#utilisation-et-partage","title":"Utilisation et partage","text":"<p>  Alexandre Ouellet, 2024</p> <p>Sauf mention contraire, tout le contenu de ce site est disponible sous licence Creative Commons Attribution - Pas d\u2019Utilisation Commerciale - Partage dans les M\u00eames Conditions 4.0 International. </p> <p>Chaque \u00e9l\u00e9ment emprunt\u00e9 est assujetti \u00e0 sa propre licence.</p>"},{"location":"references/","title":"R\u00e9f\u00e9rences","text":""},{"location":"references/#module-1","title":"Module 1","text":"<p>Marsyas. (2005). NAMA Machine d'Anticyth\u00e8re, Page consult\u00e9e le 14 mars 2024.</p> <p>Hello world. (2022, d\u00e9cembre 29). Wikip\u00e9dia, l'encyclop\u00e9die libre. Page consult\u00e9e le 16 mars 2024.</p> <p>Author (Role of Author). (Year image was created). Title of work [Type of work], Retrieved Month Day, Year, from: URL (address of website)</p>"},{"location":"module1/fonctionnement-ordi/","title":"Comment un ordinateur fonctionne-t-il ?","text":"<p> Objectifs de la section</p> <p>Expliquer sommairement le fonctionnement d\u2019un ordinateur Identifier certaines limites des ordinateurs</p> <p> Temps requis</p> <p>10 minutes</p>"},{"location":"module1/fonctionnement-ordi/#caracteristiques-des-ordinateurs","title":"Caract\u00e9ristiques des ordinateurs","text":"<p>Le premier \u00ab ordinateur \u00bb de l'histoire est la machine d'Anticyth\u00e8re (autour du III<sup>e</sup> ou du II<sup>e</sup> si\u00e8cle av. J-C) qui servait dans le calcul des \u00e9clipses. Il s'agit d'un ordinateur analogique, car il y a des donn\u00e9es (entr\u00e9e) fournies dans une machine qui ensuite exprime le r\u00e9sultat (sortie). </p> <p>La machine elle-m\u00eame effectue un calcul avec les entr\u00e9es fournies, sous le principe de la bo\u00eete noire, principe selon lequel on peut utiliser un appareil sans conna\u00eetre son fonctionnement interne. </p> Fragment de la machine d'Anticyth\u00e8re (Marsyas, 2005) <p>Cette annectode permet d'extraire les caract\u00e9ristiques qu'il est n\u00e9cessaire de constater dans un objet pour \u00eatre un ordinateur :</p> <ul> <li>Accepte des donn\u00e9es (entr\u00e9e)</li> <li>Fournit une r\u00e9ponse (sortie)</li> <li>Effectue un calcul (traitement)</li> <li>Conserve de l'information (stockage)</li> <li>Op\u00e8re automatiquement (bo\u00eete noire)</li> </ul> <p>Le m\u00e9tier d'une programmeuse ou d'un programmeur est d'utiliser les quatre premi\u00e8res caract\u00e9ristiques dans le but de concevoir une m\u00e9thode de traitement syst\u00e9matique (appel\u00e9 algorithme) des informations pour obtenir le r\u00e9sultat. Le d\u00e9veloppement d'un syst\u00e8me est donc r\u00e9alis\u00e9 en bo\u00eete blanche et n\u00e9cessite de comprendre le fonctionnement de la machine (ou du moins de certaines parties comme nous le verrons plus tard).</p>"},{"location":"module1/fonctionnement-ordi/#les-principales-composantes","title":"Les principales composantes","text":"<p>Les ordinateurs modernes sont compos\u00e9s des pi\u00e8ces suivantes :</p> <code>Carte m\u00e8re</code> La carte m\u00e8re est la pi\u00e8ce centrale de l'ordinateur. Elle relie l'information entre les diff\u00e9rentes pi\u00e8ces. C'est aussi elle qui contient le BIOS, le logiciel responsable du d\u00e9marrage de l'ordinateur. <code>Processeur</code> Le processeur effectue des comparaisons entre deux signaux \u00e9lectriques (pareil ou diff\u00e9rent) et d'inverser un signal \u00e9lectrique. Ces deux op\u00e9rations logiques peuvent \u00eatre combin\u00e9es pour obtenir l'ensemble des op\u00e9rations arithm\u00e9tiques et logiques. <code>M\u00e9moire RAM</code> La m\u00e9moire RAM est la m\u00e9moire de travail de l'ordinateur dans laquelle sont enregistr\u00e9es les donn\u00e9es sur lesquels l'ordinateur travaille. On peut voir le chargement d'un fichier dans la m\u00e9moire RAM comme laisser trainer une feuille sur son bureau. C'est plus rapide d'y avoir acc\u00e8s, mais le bordel peut s'installer rapidement. <code>M\u00e9moire secondaire (disque SSD, disque dur)</code> La m\u00e9moire secondaire est plus structur\u00e9e que la m\u00e9moire RAM, mais cette structure vient au co\u00fbt de la performance dans l'acc\u00e8s des informations. On peut voir la m\u00e9moire secondaire comme le classeur dans lequel on place toutes nos feuilles, bien organis\u00e9es par dossier et tri\u00e9es en ordre alphab\u00e9tique. Se lever pour aller consulter une feuille ou y ranger une feuille est long, mais tout est bien ordonn\u00e9. <code>Carte graphique</code> La carte graphique est un processeur sp\u00e9cialis\u00e9 dans les calculs de triangles et de certains algorithmes li\u00e9s au calcul de projections d'\u00e9l\u00e9ments tridimensionnels sur un support bidimensionnel. <code>Moniteur</code> C'est le vrai bon terme pour d\u00e9signer l'\u00e9cran. <code>P\u00e9riph\u00e9riques d'entr\u00e9e</code> Toutes les composantes qui g\u00e9n\u00e8rent un signal qui peut \u00eatre interpr\u00e9t\u00e9 par l'ordinateur (clavier, souris, manette, \u00e9cran tactile)."},{"location":"module1/fonctionnement-ordi/#le-processeur-celui-qui-soccupe-de-tout","title":"Le processeur : celui qui s'occupe de tout","text":"<p>Dans un ordinateur, tout est une comparaison ou une addition de nombres entiers. Le processeur effectue ces op\u00e9rations au niveau physique avec les signaux \u00e9lectriques (0V ou 5V). Le processeur fonctionne sur de cycles. \u00c0 chaque cycle, le processeur re\u00e7oit une information \u00e0 traiter, la traite et \u00e9met le signal \u00e9lectrique qui correspond \u00e0 la r\u00e9ponse du calcul. Les cycles sont r\u00e9gul\u00e9s par la vibration d'un cristal autour de la fr\u00e9quence 3 GHz qui permet d'effectuer, dans un cas optimal, 3 000 000 000 de calculs par secondes. </p> <p>En v\u00e9rit\u00e9, il y a toujours du temps d'attente du processeur (les autres pi\u00e8ces ne fonctionnent pas aussi rapidement), ce qui nous am\u00e8ne loin du cas optimal la plupart du temps.</p>"},{"location":"module1/fonctionnement-ordi/#x86-ou-64-bits","title":"x86 ou 64 bits ?","text":"<p>Une caract\u00e9ristique d\u00e9terminante des processeurs est la fa\u00e7on dont ils repr\u00e9sentent les nombres entiers. Tous les nombres sont repr\u00e9sent\u00e9s en donn\u00e9e binaire. On appelle bit.  chaque position d'une donn\u00e9e binaire. Les \u00ab\u00a0vieux\u00a0\u00bb syst\u00e8mes repr\u00e9sentent les entiers en utilisant 32 bits, tandis que les syst\u00e8mes modernes utilisent plut\u00f4t une repr\u00e9sentation \u00e0 64 bits. Cette repr\u00e9sentation est appel\u00e9e l'architecture du processeur. Un syst\u00e8me 64 bits permet de traiter un plus grand volume de donn\u00e9es ou des donn\u00e9es plus volumineuses lors d'un cycle du processeur qu'un processeur 32 bits ne le permet. On r\u00e9f\u00e8re souvent aux processeurs avec une architecture 32 bits comme x86.</p> <p>D'o\u00f9 vient le nom x86</p> <p>Ce nom fait r\u00e9f\u00e9rence au processeur 8086, premier processeur lanc\u00e9 en 1978 par Intel. L'architecture du 8086 est encod\u00e9e sur... 16 bits ! Le nom x86 est rest\u00e9 pour d\u00e9signer plusieurs produits d'Intel dont le num\u00e9ro se termine par 86. Comme les processeurs Intel sur une architecture 32 bits ont occup\u00e9 une large part du march\u00e9 pendant pr\u00e8s de 20 ans, le nom s'est inscrit dans les moeurs de l'informatique pour d\u00e9signer les processeurs qui op\u00e8rent sur 32 bits.</p> <p>Un processeur 64 bits peut tout \u00e0 fait ex\u00e9cuter un programme cod\u00e9 pour un processeur 32 bits; la moiti\u00e9 des bits sont simplement inutilis\u00e9s. Cela entra\u00eene une sous-utilisation du processeur et ne permet pas d'en tirer pleinement profit. Le cas inverse est cependant impossible. Un processeur op\u00e9rant sur 32 bits ne peut pas ex\u00e9cuter un programme con\u00e7u pour un processeur 64 bits, car il devrait \u00e9liminer la moiti\u00e9 des donn\u00e9es, ce qui cause \u00e9videmment des probl\u00e8mes majeurs.</p> <p>Installer des logiciels</p> <p>Plusieurs sites de t\u00e9l\u00e9chargement offrent le choix d'installer la version 32 bits (x86) ou 64 bits d'un logiciel. Il faut faire attention lors du t\u00e9l\u00e9chargement pour s\u00e9lectionner la bonne version.</p> <p>Pour savoir quelle version du processeur est install\u00e9e dans l'ordinateur, on peut acc\u00e9der aux informations du syst\u00e8me en tapant Syst\u00e8me dans la barre de recherche sur Windows 10 ou Windows 11.</p> Fen\u00eatre d'information du syst\u00e8me sur Windows 11"},{"location":"module1/fonctionnement-ordi/#concepts-cles-de-la-section","title":"Concepts cl\u00e9s de la section","text":"<code>Bo\u00eete blanche et bo\u00eete noire</code> Principe de conception selon lequel on conna\u00eet la fa\u00e7on dont les donn\u00e9es sont trait\u00e9es (bo\u00eete blanche) ou non (bo\u00eete noire). <code>Composantes de l'ordinateur</code> Plusieurs composantes sp\u00e9cialis\u00e9es interviennent dans l'ex\u00e9cution d'un programme. Les op\u00e9rations de transport des donn\u00e9es entre les composantes et les op\u00e9rations de synchronisation sont complexes et peuvent occasionner des ralentissements dans l'ex\u00e9cution. <code>Architectures</code> Certains programmes sont con\u00e7us pour s'ex\u00e9cuter sur certains types de processeurs. Il faut \u00eatre attentif lors de l'installation du logiciel pour s\u00e9lectionner la bonne version."},{"location":"module1/langage_programmation/","title":"Le r\u00f4le et la structure des langages de programmation","text":"<p> Objectifs de la section</p> <p>Reconna\u00eetre les principales abstractions et couches logicielles Expliquer l'utilisation et de l'interpr\u00e9tation des langages de programmation</p> <p> Temps requis</p> <p>10 minutes</p>"},{"location":"module1/langage_programmation/#les-langages-de-programmation","title":"Les langages de programmation","text":"<p>Bien que les machines fonctionnent \u00e0 l'aide de signaux \u00e9lectriques repr\u00e9sent\u00e9s par les structures binaires (0 pour l'absence de courant \u00e9lectrique et 1 pour un courant \u00e9lectrique), il est rarissime qu'il faille interagir \u00e0 ce niveau pour r\u00e9aliser une t\u00e2che. Bien souvent, on utilise un langage de programmation qui permet d'exprimer des concepts \u00e0 l'aide d'un langage lisible et interpr\u00e9table par les \u00eatres humains. Les \u00ab\u00a0textes\u00a0\u00bb \u00e9crits avec ce langage sont appel\u00e9s code source et le r\u00e9sultat de leur transformation en code utilisable par la machine est appel\u00e9 programme ou logiciel. </p> Exemple de programme simple avec Python<pre><code>def main():\n    try:\n        nombre = int(input(\"Saisissez un nombre entier, puis appuyez sur \\\"Entr\u00e9e\\\": \"))\n\n        if nombre &gt; 0:\n            print(\"Le nombre entr\u00e9 est positif.\")\n        elif nombre &lt; 0:\n            print(\"Le nombre entr\u00e9 est n\u00e9gatif.\")\n        else:\n            print(\"Le nombre entr\u00e9 est 0.\")\n\n    except ValueError:\n        print(\"Vous n'avez pas entr\u00e9 un nombre entier.\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>On trouve plusieurs dizaines de langages de programmation standard, certains plus g\u00e9n\u00e9raux et d'autres sp\u00e9cialis\u00e9s pour remplir une fonction ou manipuler un type d'information particulier. Tous les langages ont en commun qu'ils d\u00e9finissent une syntaxe (r\u00e8gles d'\u00e9criture des \u00ab\u00a0phrases\u00a0\u00bb la langue), une s\u00e9mantique (sens donn\u00e9 aux termes et aux structures) et un lexique (\u00ab\u00a0mots\u00a0\u00bb qui existent dans la langue). Le choix d'un langage plut\u00f4t qu'un autre repose souvent sur le lexique natif du langage ou des outils d\u00e9velopp\u00e9s avec le langage qui vient \u00e9tendre le lexique natif du langage.  Les langages offrent, pour la plupart, des fa\u00e7ons de lire des donn\u00e9es, de transmettre des donn\u00e9es, de traiter des donn\u00e9es et de stocker des donn\u00e9es. Ces quatre fonctionnalit\u00e9s correspondent aux quatre caract\u00e9ristiques des ordinateurs.</p> <p>L'une des plus grandes difficult\u00e9s dans l'apprentissage d'un langage de programmation est l'apprentissage de la s\u00e9mantique, qui repose elle-m\u00eame sur deux concepts : l'abstraction et les paradigmes.</p>"},{"location":"module1/langage_programmation/#labstraction-et-les-paradigmes-dans-le-langage-de-linformatique","title":"L'abstraction et les paradigmes dans le langage de l'informatique","text":"<p>Les termes abstraction et paradigme sont souvent utilis\u00e9s pour expliquer la fa\u00e7on dont les langages de programmation nous am\u00e8nent \u00e0 r\u00e9fl\u00e9chir. D'autres utilisent ces termes pour expliquer comment il faut r\u00e9fl\u00e9chir pour exprimer une id\u00e9e dans un langage de programmation. Bien qu'il s'agisse un peu du probl\u00e8me de l'oeuf et de la poule, ces deux concepts sont essentiels \u00e0 la bonne compr\u00e9hension des langages de programmation.</p> <p>Abstraction</p> <p>Une abstraction est une repr\u00e9sentation d'un concept tangible ou non avec une construction logicielle. Par exemple, un fichier est une abstraction d'une feuille de papier. Le fichier ne partage aucune caract\u00e9ristique commune avec la feuille de papier autre que les deux servent \u00e0 rassembler des informations \u00e0 un m\u00eame endroit. Pourtant, le fichier exerce exactement la m\u00eame fonction dans un ordinateur qu'une feuille de papier.</p> <p>Nous verrons quand nous utiliserons un langage de programmation que chaque repr\u00e9sentation d'un objet ou d'un concept du monde r\u00e9el n\u00e9cessitera l'utilisation d'une abstraction donn\u00e9e par le langage.</p> <p>Paradigme</p> <p>Pris dans un dictionnaire, le terme paradigme a une d\u00e9finition qui s'approche souvent de \u00ab mod\u00e8le de pens\u00e9e \u00bb ou encore \u00ab conception th\u00e9orique d'un domaine \u00bb. Les paradigmes en informatique orientent la fa\u00e7on dont on exprime nos concepts. On exprime que l'on travaille dans un paradigme particulier pour identifier les abstractions principales que l'on utilise. Par exemple, le langage Python emploie plusieurs paradigmes, dont le paradigme imp\u00e9ratif (on donne des directives pour changer l'\u00e9tat du programme) et le paradigme structur\u00e9 (constructions pour assurer le contr\u00f4le du programme). Donc, pour travailler avec Python, il faut exprimer ces id\u00e9es \u00e0 l'aide des abstractions fournies par le langage pour assurer le contr\u00f4le des donn\u00e9es et les changements d'\u00e9tat du programme.</p> <p>Cette d\u00e9finition peut sembler floue \u00e0 ce stade, mais deviendra beaucoup plus concr\u00e8te en travaillant quelques probl\u00e8mes.</p>"},{"location":"module1/langage_programmation/#les-principales-couches-logicielles","title":"Les principales couches logicielles","text":"<p>Comme mentionn\u00e9 pr\u00e9c\u00e9demment, peu de personnes codent des programmes qui interagissent directement avec des composantes mat\u00e9rielles. On s'appuie plut\u00f4t sur des programmes existants pour faciliter l'\u00e9criture des programmes. La figure ci-dessous illustre 4 des couches pertinentes dans le d\u00e9veloppement d'un programme Python.</p> <pre><code>graph TD\n    A[Programme Python] --&gt; E[Interpr\u00e9teur Python] --&gt; B[Syst\u00e8me d'exploitation] --&gt; D[Couche mat\u00e9rielle]</code></pre> Les diff\u00e9rentes couches logicielles <p>La couche la plus \u00e9lev\u00e9e, Programme Python, correspond au programme \u00e9crit et que l'on souhaite utiliser. On dit alors que Python est un langage de haut niveau. Le code source de ce fichier est transmis \u00e0 l'interpr\u00e9teur Python qui transforme le code code source lisible par les humains en une s\u00e9rie d'instructions destin\u00e9es au syst\u00e8me d'exploitation (couche suivante). L'interpr\u00e9teur est le programme \u00ab\u00a0python 3.12.exe\u00a0\u00bb que nous installerons lors de la prochaine section. Sans ce programme, les codes \u00e9crits en Python ne peuvent \u00eatre trait\u00e9s par la machine. </p> <p>Le syst\u00e8me d'exploitation est le logiciel responsable de l'organisation et de la gestion des ressources d'un ordinateur. Ils sont principalement issus de l'une des trois grandes familles : Windows, Mac ou Linux. Chacun des syst\u00e8mes d'exploitation d\u00e9finit un jeu d'instructions diff\u00e9rent (mais qui fait sensiblement la m\u00eame chose). Sans notre interpr\u00e9teur il faudrait \u00e9crire un programme diff\u00e9rent pour chaque syst\u00e8me d'exploitation. Il peut quand m\u00eame exister des diff\u00e9rences l\u00e9g\u00e8res et rares entre un programme d\u00e9velopp\u00e9 pour deux syst\u00e8mes d'exploitation diff\u00e9rents (principalement entre Windows et les autres), mais elles se g\u00e8rent facilement et elles entra\u00eenent rarement des probl\u00e8mes bloquants.</p> Syst\u00e8me d'exploitation <p>En anglais, le terme Operating System est employ\u00e9 pour d\u00e9signer le syst\u00e8me d'exploitation. M\u00eame en fran\u00e7ais nous avons tendance \u00e0 faire r\u00e9f\u00e9rence au syst\u00e8me d'exploitation en utilisant l'acronyme OS.  </p> <p>Finalement, le syst\u00e8me d'exploitation transmet les instructions aux composantes mat\u00e9rielles qui les ex\u00e9cutent. Dans les faits, il peut y avoir plusieurs couches interm\u00e9diaires entre le syst\u00e8me d'exploitation et les composantes mat\u00e9rielles. Chaque couche utilise un jeu d'instructions de plus en plus \u00e9l\u00e9mentaire. Ce n'est toutefois pas n\u00e9cessaire de s'y int\u00e9resser pour comprendre le fonctionnement d'un langage de haut niveau comme Python.</p>"},{"location":"module1/langage_programmation/#concepts-cles-de-la-section","title":"Concepts cl\u00e9s de la section","text":"<code>Langage de programmation</code> Langage compr\u00e9hensible par des humains qui sert \u00e0 exprimer la structure d'un programme ex\u00e9cutable par un ordinateur.  <code>Abstraction</code> Repr\u00e9sentation d'un concept tangible ou tir\u00e9 du monde r\u00e9el par une construction logicielle. <code>Syst\u00e8me d'exploitation</code> Programme qui g\u00e8re l'acc\u00e8s aux ressources de la machine. <code>Interpr\u00e9tation d'un code source</code> Op\u00e9ration dans laquelle un code source est transform\u00e9 en instructions qui peuvent \u00eatre trait\u00e9es par la machine (en particulier son syst\u00e8me d'exploitation)."},{"location":"module1/syntaxe_base/","title":"La syntaxe de base de Python","text":"<p> Objectifs de la section</p> <p>D\u00e9clarer de la fonction main et le point d\u2019entr\u00e9e du programme Ex\u00e9cuter les op\u00e9ration de lecture et d'\u00e9criture en console Manipuler les variables repr\u00e9sentant des nombres entiers D\u00e9clarer et concat\u00e9ner des cha\u00eenes de caract\u00e8re</p> <p> Temps requis</p> <p>30 minutes</p>"},{"location":"module1/syntaxe_base/#le-squelette-dun-programme-python","title":"Le squelette d'un programme Python","text":"<p>Dans l'\u00e9criture d'un programme en Python, il y a deux grandes familles d'instruction :</p> <ol> <li>Les instructions de d\u00e9claration ( all\u00f4 j'existe !) qui servent \u00e0 d\u00e9finir un \u00e9l\u00e9ment; et</li> <li>Les instructions imp\u00e9ratives qui r\u00e9alise des op\u00e9rations.</li> </ol> <p>Prenons la structure du programme tr\u00e8s simple suivant.</p> Structure minimale d'un programme Python<pre><code>def main():\n    # On d\u00e9finit ici quelque chose \u00e0 faire\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>La premi\u00e8re ligne <code>def main():</code> indique que l'on d\u00e9finit une fonction appel\u00e9e <code>main</code>. Le symbole deux points (\u00a0:\u00a0) en python indroduit un bloc de code. Tout ce qui suit le deux-points et qui est plus indent\u00e9 est dans le bloc de code. Donc ici la fonction main contient tout ce qui suit est qui est indent\u00e9 d'un niveau ou plus.</p> <p>La quatri\u00e8me ligne <code>if __name__ == \"__main__\":</code> repr\u00e9sente le point d'entr\u00e9e du programme. C'est une ligne de code sp\u00e9ciale qui permet \u00e0 l'interpr\u00e9teur de Python de savoir o\u00f9 commencer \u00e0 lire le code. La cinqui\u00e8me ligne <code>main()</code> est un instruction imp\u00e9rative d'ex\u00e9cuter le code d\u00e9finit dans la structure <code>main</code>.</p> <p>Commentaire</p> <p>Toutes les lignes de code qui commencent par <code>#</code> sont des commentaires. Un commentaire n'est pas interpr\u00e9t\u00e9 par Python (en fait il est simplement ignor\u00e9), mais permet \u00e0 nous, \u00eatres humains, d'ajouter des compl\u00e9ments d'information dans le code qui s'av\u00e8rent souvent fort utile pour en comprendre le sens.</p> <p>Un niveau d'indentation en Python correspond \u00e0 4 espaces. La plupart des IDE vont remplacer une tabulation Tab par 4 espaces. Il est aussi possible de conserver le caract\u00e8re tabulation (m\u00eame si ce n'est pas recommand\u00e9), il faut simplement que la fa\u00e7on d'indenter soit uniforme dans un fichier.</p>"},{"location":"module1/syntaxe_base/#ecrire-dans-la-console","title":"\u00c9crire dans la console","text":"<p>La fonction <code>print</code> permet d'afficher une cha\u00eene de caract\u00e8re dans la console. On d\u00e9limite le contenu d'une cha\u00eene de caract\u00e8re avec des guillemets anglais (\u00a0\"\u00a0). Le premier programme en information est le programme appel\u00e9 Hello, World !  qui affiche simplement cette salutation.</p> Programme Hello, World!<pre><code>def main():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Mettre un guillemet dans une cha\u00eene de caract\u00e8re</p> <p>Comme le caract\u00e8re guillemet (\u00a0\"\u00a0) repr\u00e9sente la limite de la cha\u00eene, il faut ajouter une barre oblique inverse (backslash) devant pour indiquer que le guillemet ne signifie pas la fin de la cha\u00eene. C'est ce que l'on appelle \u00ab\u00a0\u00e9chapper\u00a0\u00bb le caract\u00e8re.</p> <p>Cha\u00eene valide : <code>\"Comme le dit si bien le grand Homer Simpson : \\\"Where is the 'any' key ?\\\"\"</code></p> <p>Cha\u00eene erron\u00e9e : <code>\"Comme le dit si bien le grand Homer Simpson : \"Where is the 'any' key ?\"\"</code></p> Guillemets simples ou doubles <p>Python supporte de fa\u00e7on interchageable les guillemets anglais simples (caract\u00e8re de l'appostrophe) ou doubles pour les cha\u00eenes de caract\u00e8re. Il est souvent plus simple d'utiliser les guillemets doubles, car sinon il faut \u00e9chapper tous les apostrophes.</p> <p>Cha\u00eene valide : <code>'Comme le dit si bien le grand Homer Simpson : \"Where is the \\'any\\' key ?\"'</code></p> <p>Dans plusieurs autres langages de programmation, les guillemets simples ou doubles ont une signification diff\u00e9rente et les guillemets doubles servent \u00e0 traiter les cha\u00eenes de caract\u00e8res. Utiliser cette convention peut aussi faciliter le passage \u00e0 d'autres langages de programmation.  </p>"},{"location":"module1/syntaxe_base/#executer-un-programme","title":"Ex\u00e9cuter un programme","text":""},{"location":"module1/syntaxe_base/#declarer-une-variable-de-type-entier-et-effectuer-des-operations-arithmetiques","title":"D\u00e9clarer une variable de type entier et effectuer des op\u00e9rations arithm\u00e9tiques","text":"<p>Pour d\u00e9clarer une </p>"},{"location":"module1/syntaxe_base/#lire-une-information-de-la-console","title":"Lire une information de la console","text":""},{"location":"module1/syntaxe_base/#un-premier-programme","title":"Un premier programme","text":""},{"location":"module1/syntaxe_base/#concepts-cles-de-la-section","title":"Concepts cl\u00e9s de la section","text":"<p><code>point d'entr\u00e9e</code></p> <p><code>d\u00e9claration</code></p> <p><code>indentation</code></p>"}]}