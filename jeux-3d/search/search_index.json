{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jeux 3D","text":"<p>Le cours de Jeux 3D qui s'inscrit dans la cinqui\u00e8me session de la Techniques en informatique vise \u00e0 initier les personnes \u00e9tudiantes aux \u00e9l\u00e9ments suivants :</p> <ul> <li>L'utilisation d'un moteur de jeu vid\u00e9o pour produire des simultations et des jeux;</li> <li>Structurer des projets faisant interargir de nombreux assets;</li> <li>D\u00e9velopper des syst\u00e8mes en temps r\u00e9els gr\u00e2ce \u00e0 une librairie.</li> </ul> <p>Parmi les contenus vus dans le cours, on retrouve :</p> <ul> <li>La structure et les repr\u00e9sentations de mod\u00e8les 3D;</li> <li>La programmation \u00e9v\u00e9nementielle;</li> <li>La manipulation des coroutines;</li> <li>L'ajout d'objets dans l'interface de la simulation ou du jeu;</li> <li>La documentation ad\u00e9quate de projets de simultation ou de jeu.</li> </ul>"},{"location":"#droits-et-distribution","title":"Droits et distribution","text":"<p>Tout le mat\u00e9riel de ce site (sauf mention contraire) est sous licence Creative Commons 4.0 avec obligation d'attribution, interdiction de r\u00e9utilisation \u00e0 des fins commerciales et partage dans les m\u00eames conditions.</p> <p>   Alexandre Ouellet | 2024</p>"},{"location":"camera/","title":"Les types de cam\u00e9ras","text":"<p> Contenus de la page</p> <p>1-3 Types de cam\u00e9ra</p> <p> Temps requis</p> <p>10 minutes</p> <p>Les cam\u00e9ras d\u00e9terminent comme la personne joueuse voit le monde. Le type de cam\u00e9ra en dit long sur le point de vue \u00e0 adopter, les contr\u00f4les disponibles et l'ambiance du jeu. Une cam\u00e9ra avec un large champ permet de voir beaucoup d'\u00e9l\u00e9ments et donc oriente l'attention vers le monde et sa composition. Une cam\u00e9ra restreinte au contraire concentre l'action dans l'imm\u00e9diat du personnage et peut contribuer \u00e0 cr\u00e9er un univers incertain avec de grandes zones d'ombres. De m\u00eame, une cam\u00e9ra libre offre un grand degr\u00e9 d'exploration sans risque alors qu'une cam\u00e9ra qui suit le personnage force le d\u00e9placement et la prise de risque pour explorer.</p>"},{"location":"camera/#les-projections","title":"Les projections","text":"<p>On appelle projection le calcul fait pour afficher une sc\u00e8ne en 3D sur un support en 2D (moniteur). Ce calcul entra\u00eene une perte d'information (\u00e9limination d'une dimension). On triche en donnant l'aspect de profondeur au joueur, mais cela complexifie le calcul d'\u00e9l\u00e9ment d'entr\u00e9e (comme le fait de cliquer sur un \u00e9l\u00e9ment dans le monde).</p> <p></p> <p>La projection en perspective est semblable \u00e0 celle que nos yeux voient. Les objets semblent plus petits au fur et \u00e0 mesure que l'on s'\u00e9loigne du point d'observation. L'utilisation de ce type de projection conf\u00e8re un aspect r\u00e9aliste au jeu. Elle est tr\u00e8s utilis\u00e9e pour les jeux \u00e0 la premi\u00e8re personne.</p> <p>La projection isom\u00e9trique n'a pas d'effet sur la profondeur, toutes les dimensions restent constantes. L'utilisation de ce type de cam\u00e9ra permet d'afficher des zones sans perte d'information (comme on regarderait une carte). L'utilisation de ce type de projection d\u00e9tache la personne joueuse du jeu et permet d'observer de grandes surfaces. Elle est tr\u00e8s utilis\u00e9e pour les jeux de gestion et de strat\u00e9gie.</p>"},{"location":"camera/#positionnement-de-la-camera","title":"Positionnement de la cam\u00e9ra","text":"<p>La cam\u00e9ra peut prendre plusieurs positions relatives au personnage du jeu :</p> <p>En premi\u00e8re personne, la cam\u00e9ra donne l'impression de regarder par les yeux du personnage. C'est l'un des \u00e9l\u00e9ments immersifs les plus importants si l'on veut que la personne joueuse s'identifie au personnage.</p> <p>En troisi\u00e8me personne, la cam\u00e9ra suit le personnage, mais permet aussi d'observer l'environnement avoisinant. Cela aide \u00e0 la recherche de trajet ou d'objets du jeu. On la retrouve souvent dans les RPG, MMORPG et jeux de plateforme.</p> <p>La cam\u00e9ra libre ou cam\u00e9ra dieu n'est pas li\u00e9 \u00e0 un personnage et permet de voir l'univers du jeu du point de vue souhait\u00e9 par la personne joueuse. Elle peut s'accompagner de quelques restrictions (zones visibles et zones masqu\u00e9es), mais des contr\u00f4les existent, ind\u00e9pendamment des personnages ou des objets du jeu, pour d\u00e9placer la cam\u00e9ra.</p>"},{"location":"camera/#exercice","title":"Exercice","text":"<p>Identifiez les types de cam\u00e9ras des images suivantes</p> <p></p> R\u00e9ponse <p>Perspective en premi\u00e8re personne </p> <p></p> R\u00e9ponse <p>Isom\u00e9trique en cam\u00e9ra libre </p> <p></p> R\u00e9ponse <p>Perspective en troisi\u00e8me personne </p> <p></p> R\u00e9ponse <p>Perspective en troisi\u00e8me personne </p> <p></p> R\u00e9ponse <p>Isom\u00e9trique en cam\u00e9ra libre </p> <p></p> R\u00e9ponse <p>Perspective en premi\u00e8re personne </p>"},{"location":"classification/","title":"Classifications des jeux","text":"<p> Contenus de la page</p> <p>1-5 Types de jeu et leurs caract\u00e9ristiques</p> <p> Temps requis</p> <p>10 minutes</p> <p>On peut classifier les jeux selon plusieurs crit\u00e8res, dont la plateforme d'ex\u00e9cution, les contr\u00f4les utilis\u00e9s et le genre du jeu. Toutefois, la classification des jeux par genre est tr\u00e8s subjective, car elle d\u00e9pend principalement de la perception de la personne qui effectue la classification. Ce qui est important dans l'identification d'un genre est de faire ressortir une des caract\u00e9ristiques principales ancr\u00e9es dans une m\u00e9canique de jeu ou dans le contexte du jeu.</p>"},{"location":"classification/#classification-par-les-plateformes","title":"Classification par les plateformes","text":"<p>On peut diviser les jeux selon les plateformes sur lesquelles elles s'ex\u00e9cutent. De plus en plus, les fronti\u00e8res tendent \u00e0 tomber comme les jeux deviennent port\u00e9s sur des plateformes multiples.</p> Plateformes utilis\u00e9s en 2019"},{"location":"classification/#classification-par-les-controles","title":"Classification par les contr\u00f4les","text":"<p>Pour les contr\u00f4les, on retrouve principalement 5 types de contr\u00f4les. Certains jeux peuvent supporter plus d'un type de contr\u00f4le.</p> <ul> <li>Clavier et souris</li> <li>Manette (incluant les joysticks)</li> <li>Cam\u00e9ra (reconnaissance de mouvement)</li> <li>\u00c9cran tactile</li> <li>Contr\u00f4le personnalis\u00e9 (simulateur, arcade)</li> </ul>"},{"location":"classification/#classification-par-le-genre","title":"Classification par le genre","text":"<ul> <li> <p>FPS Jeu de tir subjectif </p> <p>First person shooter </p> <ul> <li>Joueur tr\u00e8s actif</li> <li>M\u00e9caniques de jeu orient\u00e9es autour des actions du personnage contr\u00f4l\u00e9</li> <li>Demande souvent une grande dext\u00e9rit\u00e9  </li> <li>Joueur seul ou multijoueur</li> <li>Souvent combin\u00e9 avec les genres : RPG, hack'n Slash ou aventure</li> </ul> <p>Franchises connues : Doom, Quake, Call of Duty, Battlefield, Counter-Strike, Minescraft, Portal, Skyrim, Subnautica</p> </li> <li> <p>RPG Jeu de r\u00f4le  </p> <p>Role playing game </p> <ul> <li>Univers immersifs, jeu men\u00e9 par l'histoire ou l'environnement</li> <li>M\u00e9caniques et options vari\u00e9es pour permettre au personnage \u00ab de se d\u00e9finir \u00bb lui-m\u00eame</li> <li>Joueur seul ou petit groupe de joueur</li> </ul> <p>Franchises connues :  The Elder Scrolls, The Witcher, Dark Souls, Fallout, Borderland, Baldur's Gate, Minecraft</p> </li> <li> <p>MMORPG Jeu de r\u00f4le en ligne massivement multijoueur </p> <p>Massively Multiplayer Online Role-Playing Game </p> <ul> <li>Semblable au RPG en termes de m\u00e9caniques de jeu</li> <li>Ajoute souvent un \u00e9l\u00e9ment collaboratif essentiel (ou grandement facilitant)</li> <li>Comme il est massivement multijoueur, les joueurs ne deviennent pas des h\u00e9ros incontest\u00e9s dans l'univers du jeu</li> <li>Int\u00e8gre souvent des m\u00e9caniques d'affrontements entre les joueurs, surtout \u00e0 haut niveau</li> </ul> <p>Franchises connues: - World of Warcraft, Eve Online, RuneScape, Star Wars The Old Republic</p> </li> <li> <p>RTS Jeu de strat\u00e9gie en temps r\u00e9el </p> <p>Real time strategy </p> <ul> <li>M\u00e9caniques ax\u00e9es sur les fa\u00e7ons d'utiliser les unit\u00e9s, l'environnement ou les objets du jeu</li> <li>Orient\u00e9 en joueur contre IA ou joueur contre joueur</li> <li>Int\u00e8gre une composante d'habilet\u00e9 importante en raison du temps r\u00e9el</li> <li>Plusieurs s'appuient sur le principe du 4X (Explore, Expand, Exploit, Exterminate)</li> </ul> <p>Franchises connues  : Age Of Empire, Empire Earth, Sins of a Solar Empire, Starcraft, Total War, They are billions, Anno 2205, Surviving Mars</p> </li> <li> <p>TBS Jeu de strat\u00e9gie en tour par tour </p> <p>Turn base strategy </p> <ul> <li>M\u00e9caniques ax\u00e9es sur les fa\u00e7ons d'utiliser les unit\u00e9s, l'environnement ou les objets du jeu</li> <li>Orient\u00e9 en joueur contre IA ou joueur contre joueur</li> <li>Int\u00e8gre \u00e9norm\u00e9ment de contenu en raison de la \u00ab\u00a0lenteur\u00a0\u00bb du jeu</li> <li>Plusieurs s'appuient sur le principe du 4X (Explore, Expand, Exploit, Exterminate)</li> </ul> <p>Franchises connues : Civilization, Imperialism, Total War </p> </li> <li> <p>Jeu de survie </p> <p>Survival game </p> <ul> <li>Jeu o\u00f9 le personnage doit collecter des ressources pour continuer \u00e0 jouer</li> <li>Le jeu propose un objectif clair ou il faut simplement rester en vie le plus longtemps possible</li> <li>Domin\u00e9 par les m\u00e9caniques de type joueur contre environnement</li> <li>\u00c0 difficult\u00e9 \u00e9lev\u00e9e, il faut g\u00e9n\u00e9ralement faire tout le jeu sans mourir</li> </ul> <p>Franchises connues : Minecraft, The Forest, Subnautica, Don't Starve, Project Zomboid</p> </li> <li> <p>CMS Gestion </p> <p>Construction and management simulation </p> <ul> <li>But de faire cro\u00eetre au maximum une entit\u00e9</li> <li>La croissance et le d\u00e9veloppement co\u00fbtent des ressources</li> <li>Il peut ne pas y avoir d'ennemi autre que le risque de banqueroute</li> <li>Parties possiblement tr\u00e8s longues, voire sans fin</li> </ul> <p>Franchises connues : Sims, SimCity, Anno, RollerCoaster Tycoon, Rimworld, Dwarf Forteress</p> </li> <li> <p>Simulation </p> <p>Simulation </p> <ul> <li>M\u00e9caniques qui visent \u00e0 reproduire le plus fid\u00e8lement possible une situation r\u00e9elle</li> <li>Peut avoir des applications industrielles</li> <li>Engouement avec la notion de clones num\u00e9riques et applications industrielles hors de l'industrie classique du jeu</li> </ul> <p>Franchises connues : Flight Simulator, Train Simulator, Lawn Mowing Simulator, Farming Simulator</p> </li> <li> <p>Puzzle </p> <p>Puzzle </p> <ul> <li>B\u00e2tit autour d'\u00e9nigmes \u00e0 r\u00e9soudre</li> <li>Parfois m\u00e9lang\u00e9 \u00e0 d'autres genres pour diversifier les m\u00e9caniques ou utilis\u00e9 comme genre secondaire pour enrichir un univers</li> <li>Repose sur l'habilet\u00e9 de r\u00e9flexion et d'observation de la personne qui joue plut\u00f4t que du personnage</li> </ul> <p>Franchises connues : Portal, Witcher 3, Turing Test, Legend of Zelda, Superliminal</p> </li> <li> <p>Sportif </p> <p>Sports </p> <ul> <li>M\u00e9caniques inspir\u00e9es d'un sport r\u00e9el avec un degr\u00e9 de r\u00e9alisme variable</li> <li>N\u00e9cessite souvent une grande habilet\u00e9 manuelle</li> </ul> <p>Franchises connues : \u00c9checs, Fifa, Need For Speed, NHL, Wii sport, Mario Kart </p> </li> <li> <p>Aventure </p> <p>Adventure </p> <ul> <li>M\u00e9caniques orient\u00e9es vers l'exploration et la r\u00e9alisation de courtes t\u00e2ches</li> <li>Options du personnage souvent limit\u00e9es afin de suivre un sc\u00e9nario impos\u00e9</li> <li>Souvent oppos\u00e9 au RPG par l'imposition d'une trame narrative</li> </ul> <p>Franchises connues : Legend of Zelda, Super Mario, Halo, Donkey Kong, Castlevania</p> </li> <li> <p>Jeu incr\u00e9mental </p> <p>Idle game </p> <ul> <li>M\u00e9caniques orient\u00e9es autour d'une croissance exponentielle</li> <li>Jeu tr\u00e8s populaire dans les plateformes mobiles</li> <li>Souvent, le temps hors jeu permet aussi de collecter des ressources pour avancer</li> </ul> <p>Franchises connues : Hustle Castle, Perfect Tower, Universal paperclips </p> </li> <li> <p>Tours de d\u00e9fense </p> <p>Tower defense</p> <ul> <li>Un objectif doit \u00eatre d\u00e9fendu de fa\u00e7on indirecte avec des \u00ab\u00a0tours\u00a0\u00bb qui retardent ou d\u00e9truisent les ennemis</li> <li>Jeu plut\u00f4t passif o\u00f9 la personne joueuse oriente seulement la disposition d'objets sur la carte</li> </ul> <p>Franchises connues : Kingdom rush, Plant vs Zombie, They Are Billions</p> </li> <li> <p>Arcade </p> <p>Arcade </p> <ul> <li>Jeu caract\u00e9ris\u00e9 par des parties courtes</li> <li>M\u00e9caniques et contr\u00f4les limit\u00e9s </li> <li>N\u00e9cessite une grande habilet\u00e9 manuelle</li> </ul> <p>Franchises connues : Donkey Kong (1981), Galaga, Invaders, Pac-Man, Tetris</p> </li> </ul>"},{"location":"classification/#references","title":"R\u00e9f\u00e9rences","text":"<p>Clarke, R. I., Lee, J. H., &amp; Clark, N. (2017). Why video game genres fail: A classificatory analysis. Games and Culture, 12(5), 445-465.</p> <p>List of video game genres. (2024, 19 juillet). Dans Wikipedia https://en.wikipedia.org/w/index.php?title=List_of_video_game_genres&amp;oldid=1235402589</p>"},{"location":"jeu-simulation/","title":"Que sont les simulations et les jeux","text":"<p> Contenus de la page</p> <p>1-5 Types de jeu et leurs caract\u00e9ristiques</p> <p> Temps requis</p> <p>20 minutes</p>"},{"location":"jeu-simulation/#les-simulations","title":"Les simulations","text":"<p>Selon Antitode , le terme simuler est \u00ab Imiter (un fonctionnement), reproduire de fa\u00e7on artificielle \u00bb. Donc le but d'une simulation informatique est de reproduire le fonctionnement d'un syst\u00e8me r\u00e9el \u00e0 l'aide d'un syst\u00e8me informatique. Les programmes qui accomplissent des simulations se distinguent des autres programmes en respectant les guides suivants :</p> <code>Ex\u00e9cution en temps r\u00e9el</code> <p>La simulation doit s'ex\u00e9cuter sur un intervalle de temps semblable \u00e0 celui r\u00e9el. La plupart des simulations prendront au plus un temps similaire \u00e0 l'ex\u00e9cution du ph\u00e9nom\u00e8ne r\u00e9el. On retrouve des exceptions \u00e0 cette r\u00e8gle notamment dans la simulation visant \u00e0 repr\u00e9senter des ph\u00e9nom\u00e8nes avec un grand degr\u00e9 de pr\u00e9cision. </p> <code>Abstraction (repr\u00e9sentation) des concepts</code> <p>La simulation traite num\u00e9riquement des concepts r\u00e9els (qui sont g\u00e9n\u00e9ralement quantifi\u00e9s). Cette abstraction permet de respecter ou d'imiter des r\u00e8gles et des ph\u00e9nom\u00e8nes r\u00e9els avec un degr\u00e9 de pr\u00e9cision variable. Dans tous les cas, les concepts du monde r\u00e9el qui ont un impact sur la simulation doivent \u00eatre repr\u00e9sent\u00e9s dans cette forme.  </p> <code>D\u00e9finition restreinte des entr\u00e9es</code> <p>Rares sont les syst\u00e8mes r\u00e9els qui op\u00e8rent en bo\u00eete noire (un syst\u00e8me constant n'est pas tr\u00e8s pertinent \u00e0 simuler...). Les entr\u00e9es des syst\u00e8mes doivent donc aussi \u00eatre repr\u00e9sent\u00e9es, mais souvent de fa\u00e7on restreinte. C'est-\u00e0-dire que seul un sous-ensemble de toutes les op\u00e9rations possibles peut \u00eatre effectu\u00e9 dans la simulation. Les actions sont repr\u00e9sent\u00e9es sont souvent choisies en fonction de leur pertinence et de la difficult\u00e9 d'impl\u00e9mentation.</p> <code>D\u00e9finition des sorties \u00e0 partir d'un ensemble de r\u00e8gles</code> <p>Les syst\u00e8mes r\u00e9els r\u00e9agissent aux entr\u00e9es et aux interactions entre les composantes pour produire un r\u00e9sultat (une sortie). Par exemple, en termes d'interactions sociales, on peut difficilement pr\u00e9voir le r\u00e9sultat exact d'une conversation (les r\u00e8gles qui les r\u00e9gissent sont trop complexes), mais il est facile d'avoir une discussion sans choquer l'autre personne. La simulation ne peut prendre en compte l'ensemble des r\u00e8gles et se restreint encore une fois \u00e0 des r\u00e8gles g\u00e9n\u00e9ralement quantifi\u00e9es.   </p> <p>Simulation de voiture</p> <p>Voici l'application des caract\u00e9ristiques de la simulation au contexte de la conduite d'une voiture.</p> <ul> <li>Temps d'ex\u00e9cution : la simulation doit s'ex\u00e9cuter en temps r\u00e9el (ratio de temps 1:1)</li> <li>Concepts repr\u00e9sent\u00e9s : d\u00e9placement de la voiture, routes, obstacles sur le chemin, accident, environnement</li> <li>Entr\u00e9es possibles : d\u00e9placement du v\u00e9hicule (gauche, droite, avant, arri\u00e8re), temps de la journ\u00e9e, condition de route, m\u00e9t\u00e9o...</li> <li>R\u00e8gles : r\u00e8gles de la circulation (certaines seulement), r\u00e9action des autres usagers de la route, physique (glace, aquaplanage, d\u00e9rapage)...</li> </ul> <p>Simulation de file d'attente d'\u00e9picerie</p> <p>Identifiez les caract\u00e9ristiques d'une simulation de file d'attente \u00e0 l'\u00e9picerie \u00e0 l'aide des questions suivantes.</p> <ul> <li>Quel est le temps d'ex\u00e9cution ?</li> <li>Quels sont les principaux concepts \u00e0 repr\u00e9senter ? Qu'est-ce qu'on utilise pour abstraire ces concepts ?</li> <li>Quelles sont les entr\u00e9es possibles \u00e0 la simulation ?</li> <li>Quelles sont les principales r\u00e8gles de la simulation ? Quelles pourraient \u00eatre les sorties de la simulation ?</li> </ul>"},{"location":"jeu-simulation/#les-jeux","title":"Les jeux","text":"<p>M\u00e9canique de jeu</p> <p>M\u00e9canique de jeu (game mechanic) : Ensemble de r\u00e8gles qui d\u00e9finissent la mani\u00e8re de jouer \u00e0 un jeu vid\u00e9o, d'interagir avec l'environnement, lors d'une partie, et qui sont destin\u00e9es \u00e0 produire une exp\u00e9rience de jeu agr\u00e9able (GDT, 2010).</p> <p>Le terme gameplay est un peu diff\u00e9rent des m\u00e9caniques de jeu. Traduit par \u00ab\u00a0jouabilit\u00e9\u00a0\u00bb, il r\u00e9f\u00e8re aux r\u00e8gles et m\u00e9caniques avec lesquelles la personne joueuse interagit avec le jeu. On peut voir la jouabilit\u00e9 comme des r\u00e8gles externes et les m\u00e9caniques par des r\u00e8gles internes. Toutefois, la distinction entre les deux n'est pas toujours facile \u00e0 faire.</p>"},{"location":"jeu-simulation/#les-jeux-comme-une-simulation","title":"Les jeux comme une simulation","text":"<p>On peut voir les jeux comme une simulation sans la contrainte que les r\u00e8gles (m\u00e9caniques) sont calqu\u00e9es du monde r\u00e9el. Dans ce cas, on r\u00e9interpr\u00e8te simplement les m\u00eames caract\u00e9ristiques qu'\u00e9nonc\u00e9es pr\u00e9c\u00e9demment.</p> <p>Identification des m\u00e9caniques de jeu et d'\u00e9l\u00e9ments de jouabilit\u00e9</p> <ul> <li>Nommez un jeu dont le temps d'ex\u00e9cution est r\u00e9el, un dont le temps est compress\u00e9.</li> <li>Nommez deux abstractions de concepts fr\u00e9quemment utilis\u00e9s dans les jeux.</li> <li>Nommez deux entr\u00e9es fr\u00e9quemment utilis\u00e9es dans les jeux.</li> <li>Nommez deux r\u00e8gles que tout le monde connait dans un jeu qui ont peu de sens dans le monde r\u00e9el.</li> </ul> <p>Toutefois, c'est rarement la qualit\u00e9 de la simulation qui nous incite \u00e0 jouer \u00e0 jeu. D'o\u00f9 la motivation peut-elle bien provenir alors ?</p>"},{"location":"jeu-simulation/#les-jeux-comme-un-probleme","title":"Les jeux comme un probl\u00e8me","text":"<p>Le cerveau humain est une machine \u00e0 r\u00e9soudre des probl\u00e8mes et aime particuli\u00e8rement les r\u00e9soudre. On peut d\u00e9finir un jeu comme un probl\u00e8me \u00e0 r\u00e9soudre auquel l'on ajoute un contexte.</p> <p>Quote</p> <p>Let's picture a mass murder game wherein there is a gas chamber shaped like a well. You the player are dropping innocent victims down into the gas chamber, and they come in all shapes and sizes. There are old ones and young ones, fat ones and tall ones. As they fall to the bottom, they grab onto each other and try to from human pyramids to get to the top of the well. Should they manage to get out, the game is over and you lose. But if you pack them in tightly enough, the ones on the bottom succumb to the gas and die (Koster, 2013).</p> <p>Imaginons un jeu d'extermination dans lequel il y a une chambre \u00e0 gaz de la forme d'un puit. Vous, la personne joueuse, lancez d'innocentes victimes dans la chambre gaz; victimes qui prennent diverses formes et tailles. Il y en a des vieilles et des jeunes, des grosses et des grandes. Dans leur chute, elles s'accrochent les unes aux autres et tentent de former une pyramide humaine pour atteindre le dessus du puit. Si elles parviennent \u00e0 s'\u00e9chapper, la partie est termin\u00e9e et vous avez perdu. Cependant, si vous les compactez assez serr\u00e9, celles dans le bas succombent au gaz et meurent (Koster, 2013. Traduit de l'anglais).</p> <p>La description de ce jeu semble assez horrible de par son contexte gore et morbide. Cependant les m\u00eames m\u00e9caniques, exploit\u00e9es dans un contexte diff\u00e9rent avec de simples formes g\u00e9om\u00e9triques (polyominos de degr\u00e9s 4), offrent le c\u00e9l\u00e8bre jeu de Tetris.</p>"},{"location":"jeu-simulation/#comment-bien-definir-un-probleme-dans-un-jeu-et-les-pieges","title":"Comment bien d\u00e9finir un probl\u00e8me dans un jeu et les pi\u00e8ges","text":""},{"location":"jeu-simulation/#trouver-une-structure-dans-le-flou","title":"Trouver une structure dans le flou","text":"<p>La premi\u00e8re condition \u00e0 l'obtention d'un probl\u00e8me int\u00e9ressant est que la solution au probl\u00e8me ne soit pas \u00e9vidente. Pour permettre \u00e0 la personne joueuse de trouver la solution, on pr\u00e9sente plusieurs instances du probl\u00e8me et tranquillement elle remarque les similitudes et d\u00e9duit la solution.</p> <p>Par exemple, apprendre dans un jeu la s\u00e9quence de combat d'un ennemi est le rep\u00e9rage d'une structure dans le flou.</p>"},{"location":"jeu-simulation/#difficulte-du-probleme","title":"Difficult\u00e9 du probl\u00e8me","text":"<p>La difficult\u00e9 d'un probl\u00e8me est tr\u00e8s subjective et notre sensibilit\u00e9 \u00e0 cette difficult\u00e9 l'est tout autant. Pour rendre un jeu agr\u00e9able, il faut donc moduler cette difficult\u00e9 selon l'avancement du joueur. G\u00e9n\u00e9ralement, les niveaux de difficult\u00e9 dans un jeu font appel simplement au changement de valeurs, mais elles pourraient aussi s'appliquer sur des m\u00e9caniques de jeu ou la vitesse d'introduction de celles-ci.</p> <p>Par exemple, les quatre premiers ennemis pourraient avoir une s\u00e9quence de combat compos\u00e9 de deux mouvements et le cinqui\u00e8me ennemi introduit un troisi\u00e8me mouvement et ainsi de suite.</p>"},{"location":"jeu-simulation/#accoutumance-au-probleme","title":"Accoutumance au probl\u00e8me","text":"<p>\u00c0 force de r\u00e9soudre le m\u00eame probl\u00e8me, on y devient habitu\u00e9 et alors deux choses se produisent :</p> <ul> <li>Le probl\u00e8me devient plus simple \u00e0 r\u00e9soudre (on s'attend aux mouvements de l'ennemi)</li> <li>On peut appliquer la solution \u00e0 des contextes diff\u00e9rents (en rep\u00e9rant un nouvel ennemi, on cherchera d'abord \u00e0 apprendre sa s\u00e9quence)</li> </ul>"},{"location":"jeu-simulation/#tout-devient-un-clou","title":"Tout devient un clou","text":"<p>\u00c0 force de combats, on chercherait toujours \u00e0 apprendre les s\u00e9quences. Le sentiment de puissance v\u00e9cu les deux ou trois premi\u00e8res fois que l'on domine un combat car on sait \u00e0 quoi s'attendre peut \u00eatre int\u00e9ressant, mais rapidement le cerveau manque de stimulation : le probl\u00e8me est trop simple. </p> <p>C'est \u00e0 ce moment que l'on d\u00e9stabilise la personne joueuse en introduisant quelque chose qui change la fa\u00e7on d'aborder le probl\u00e8me. Par exemple au lieu que chaque ennemi ait une s\u00e9quence propre, les s\u00e9quences de deux ennemis peuvent interagir ou si le combat devient trop long (on prend le temps d'\u00e9tudier la s\u00e9quence avant d'agir) l'ennemi appelle des renforts.</p> <p>Le changement de m\u00e9canique est tr\u00e8s d\u00e9stabilisant, car la personne joueuse est habitu\u00e9e de r\u00e9gler les probl\u00e8mes d'une fa\u00e7on particuli\u00e8re (tout est un clou), alors il faut en user avec parcimonie.</p>"},{"location":"jeu-simulation/#references","title":"R\u00e9f\u00e9rences","text":"<p>KOSTER, Raph. A Theory of Fun for Game Design. O'Reilly , 2e \u00e9dition, 2013, 279p.</p> <p>M\u00e9canique de jeu. (2010). Dans Grand dictionnaire terminologique. Office qu\u00e9b\u00e9cois de la langue fran\u00e7aise. https://vitrinelinguistique.oqlf.gouv.qc.ca/fiche-gdt/fiche/26502525/mecanique-de-jeu</p>"},{"location":"ressources/","title":"Ressources gratuites","text":"<p>Consultez la fiche de chaque ressource pour en conna\u00eetre les droits d\u2019utilisation et le co\u00fbt. Certains sites proposent \u00e0 la fois des ressources gratuites et payantes.</p>"},{"location":"ressources/#assets-3d","title":"Assets 3D","text":"<ul> <li>Unity Asset Store </li> <li>Itch.io</li> </ul>"},{"location":"ressources/#icones","title":"Icones","text":"<ul> <li>The Noun Projet </li> </ul>"},{"location":"ressources/#polices","title":"Polices","text":"<ul> <li>1001 Free fonts</li> <li>Dafont</li> </ul>"},{"location":"ressources/#sons","title":"Sons","text":"<ul> <li>Free music archive</li> </ul>"},{"location":"maths/bezier/","title":"Courbes de B\u00e9zier","text":"<p> Contenus de la page</p> <p>1-5 Types de jeu et leurs caract\u00e9ristiques  Ce contenu est de l'enrichissement et ne figure pas au contenu du cours.</p> <p> Temps requis</p> <p>10 minutes</p>"},{"location":"maths/deplacements/","title":"D\u00e9placement dans l'espace","text":"<p> Contenus de la page</p> <p>1-1 D\u00e9placement des objets de la simulation dans l'espace tridimensionnel</p> <p> Temps requis</p> <p>15 minutes</p> <p>Voici un probl\u00e8me de d\u00e9placement classique de jeux vid\u00e9os : </p> <p>Timmy se trouve \u00e0 la position \\(\\mathbf{t} = (2, 0, 4)\\) et souhaite se rendre jusqu'\u00e0 son fr\u00e8re, Larry, qui se trouve \u00e0 la position \\(\\mathbf{\\ell} = (9, 2, 6)\\). Timmy poss\u00e8de d'obscurs pouvoirs lui permettant de voler et de traverser tous les objets qui pourraient se trouver sur son passage (autrement dit, il se d\u00e9place en ligne droite) et il parcourt 3 m\u00e8tres par seconde. Supposons que le jeu s'ex\u00e9cute \u00e0 60 fps. Trouver la position de Timmy apr\u00e8s 45 frames, puis \u00e9crivez l'algorithme en C# du d\u00e9placement de Timmy.</p>"},{"location":"maths/deplacements/#la-resolution-mathematique","title":"La r\u00e9solution math\u00e9matique","text":"<p>1) Trouver le vecteur de direction entre Timmy et Larry</p> <p>Pour trouver ce vecteur, on soustrait la position finale \u00e0 la position initiale. $$ \\mathbf{d} = \\mathbf{\\ell} - \\mathbf{t} = (9, 2, 6) - (2, 0, 4) = (7, 2, 2) $$</p> <p>2) Trouver la vitesse de d\u00e9placement par frame de Timmy</p> <p>Il suffit de diviser sa vitesse de d\u00e9placement par le nombre de fps. $$ \\text{vitesse par frame} = 3 / 60 = 0.05 $$</p> <p>3) Trouver la quantit\u00e9 de d\u00e9placement de Timmy par frame</p> <p>On sait que Timmy avance de 0.05 m\u00e8tre par frame, on veut maintenant savoir combien cela repr\u00e9sente sur le vecteur de direction entre sa position et celle de Larry. On doit donc d'abord normer le vecteur de direction trouv\u00e9 \u00e0 l'\u00e9tape (1), puis r\u00e9duire sa longueur \u00e0 0.05 (voir propri\u00e9t\u00e9 des normes) $$ \\mathbf{d'} = \\frac{\\mathbf{d}}{|\\mathbf{d}|} = \\frac{1}{7.55}(7, 2, 2) = (0.9272, 0.2649, 0.2649) $$</p> <p>Le vecteur de d\u00e9placement de Timmy sera not\u00e9 \\(\\mathbf{d_{Timmy}}\\). $$ \\mathbf{d_{Timmy}} = 0.05(0.9272, 0.2649, 0.2649) = (0.0464, 0.0132, 0.0132)$$</p> <p>4) Trouver le d\u00e9placement pour 45 frames et d\u00e9terminer la position</p> <p>On multiplie le d\u00e9placement par frame par 45 pour obtenir le d\u00e9placement pour 45 frames (\\(\\mathbf{d_{Timmy, 45}}\\)) $$ \\mathbf{d_{Timmy, 45}} = 45\\mathbf{d_{Timmy}} = (2.088, 0.596, 0.596) $$</p> <p>On trouve la position en additionnant le d\u00e9placement \u00e0 la position de d\u00e9part. $$ \\mathbf{p_{Timmy, 45}} = \\mathbf{t} + \\mathbf{d_{Timmy, 45}} = (2, 0, 4) + (2.088, 0.596, 0.596) = (4.088, 0.596, 4.596) $$</p> <p>5) R\u00e9ponser et conclusion Apr\u00e8s 45 frames, Timmy est \u00e0 la position (4.088, 0.596, 4.596).</p>"},{"location":"maths/deplacements/#le-code-dans-unity","title":"Le code dans Unity","text":"Calcul du d\u00e9placement de Timmy<pre><code> // Donn\u00e9es du probl\u00e8me\n Vector3 posTimmy = new Vector3(2.0f, 0.0f, 4.0f);\n Vector3 posLarry = new Vector3(9.0f, 2.0f, 6.0f);\n float vitesseTimmy = 3.0f;\n float nombreFrames = 45;\n\n // \u00c9tape 1\n Vector3 direction = posLarry - posTimmy;\n // \u00c9tape 2\n float vitesseTimmyFrame = vitesseTimmy * Time.deltaTime; // Time.deltaTime retourne le temps de rendu de la frame, donc 1/fps \n // \u00c9tape 3\n Vector3 deplacementTimmy = direction.normalized * vitesseTimmyFrame * nombreFrames;\n // \u00c9tape 4\n posTimmy += deplacementTimmyFrame\n</code></pre>"},{"location":"maths/deplacements/#application-dans-un-jeu-unity","title":"Application dans un jeu Unity","text":"<p>Avec les fonctionnalit\u00e9s du moteur de jeu et la boucle de jeu, le code suivant est utilis\u00e9 dans le passage de la boucle.</p> D\u00e9placement lin\u00e9aire entre deux positions<pre><code>// Dans la m\u00e9thode Update ou FixedUpdate\nVector3 direction = (posLarry - posTimmy).normalized;\nposTimmy += direction * vitesseTimmy * Time.deltaTime; \n</code></pre>"},{"location":"maths/rotations/","title":"Rotations et quaternions","text":"<p> Contenus de la page</p> <p>1-1 D\u00e9placement des objets de la simulation dans l'espace tridimensionnel</p> <p> Temps requis</p> <p>15 minutes</p> <p>La rotation s'op\u00e8re toujours autour d'un axe. La rotation entra\u00eene un changement de perspective dans le plan perpendiculaire \u00e0 l'axe de rotation. Une rotation autour de l'axe y, entra\u00eene un changement de perspective dans le plan XZ. Du point de vue du joueur, cela signifierait qu'un personnage tourne sur lui-m\u00eame par exemple. Les rotations positives sont dans le sens horaire dans Unity, contrairement \u00e0 la r\u00e9f\u00e9rence admise en math\u00e9matique o\u00f9 les rotations positives sont en sens antihoraires.</p> <p>Comme vous avez s\u00fbrement vu en math\u00e9matiques, on peut repr\u00e9senter une rotation dans l'espace par une matrice de rotation de coordonn\u00e9es homog\u00e8nes de dimensions 4x4. Il existe aussi un objet math\u00e9matique, le quaternion, qui peut \u00eatre utilis\u00e9 pour repr\u00e9senter des rotations. Le gain de performance observ\u00e9 peut \u00eatre de l'ordre de 1800 %, soit 18 fois plus performant (Gavilan, 2016).</p>"},{"location":"maths/rotations/#les-quaternions","title":"Les quaternions","text":"<p>Un quaternion est un nombre en 4 dimensions (1 r\u00e9el et 3 imaginaires). Il n'est pas important dans le contexte du cours de comprendre la structure des quaternions. Il faut simplement retenir ceci : l'objet quaternion a les composantes w, x, y et z auquel on peut directement acc\u00e9der. Les composantes x, y et z ne repr\u00e9sentent pas des rotations autour des axes correspondants. Il s'agit de donn\u00e9es ayant une autre signification et que vous ne devez jamais modifier directement.</p>"},{"location":"maths/rotations/#le-systeme-eulerien","title":"Le syst\u00e8me Eul\u00e9rien","text":"<p>Le syst\u00e8me des rotations Eul\u00e9rien permet de repr\u00e9senter une rotation selon les trois axes x, y et z. Chaque valeur de rotation peut se situer entre 0 et 360 (les deux valeurs existent, mais les utiliser les deux peut vous poser probl\u00e8me...). La valeur de rotation de l'axe indique une rotation autour d'un axe.</p> <p>Ce sont des valeurs indiqu\u00e9es dans ce syst\u00e8me qui sont affich\u00e9es dans l'\u00e9diteur (les conversions en quaternion se font implicitement par l'\u00e9diteur).</p>"},{"location":"maths/rotations/#manipuler-des-rotations-avec-unity","title":"Manipuler des rotations avec Unity","text":"<p>La m\u00e9thode <code>Rotate</code> de <code>transform</code> permet de faire une rotation d'un objet. Cette m\u00e9thode accepte les valeurs des 3 axes, ainsi que l'espace dans lequel faire la rotation.</p> <p>La m\u00e9thode <code>RotateAround</code> permet de calculer une rotation autour d'un point autre (exemple : plan\u00e8tes autour du soleil), selon un axe de rotation et un nombre de degr\u00e9s selon lequel pivoter.</p> M\u00e9thodes de rotation<pre><code> // Rotation autour de l'axe des y de 90 en sens anti-horaire\n transform.Rotate(0f, -90f, 0f, Space.World);\n\n // Rotation autour de l'axe x de 15 degr\u00e9s de plus que le parent en sens horaire\n transform.Rotate(15f, 0f, 0f, Space.Local);\n\n // Rotation de 90 degr\u00e9s en sens horaire sur l'axe des y par rapport au point (5, -5, 4)\n transform.RotateAround(new Vector3(5, -5, 4), Vector3.up, 90f);\n</code></pre>"},{"location":"maths/rotations/#regarder-directement-un-point","title":"Regarder directement un point","text":""},{"location":"maths/rotations/#la-methode-lookat","title":"La m\u00e9thode LookAt","text":"<p>La m\u00e9thode <code>LookAt</code> de <code>transform</code> modifie la rotation d'un objet pour que son vecteur <code>forward</code> pointe vers le point indiqu\u00e9. O</p> M\u00e9thode LookAt<pre><code> // Regarde le point d'origine \n transform.LookAt(Vector3.zero)\n</code></pre>"},{"location":"maths/rotations/#modifier-le-vecteur-forward","title":"Modifier le vecteur <code>forward</code>","text":"<p>On peut changer la valeur du vecteur <code>forward</code> pour orienter l'objet dans une direction. Si l'on souhaite par exemple regarder le point objectif, on utiliserait le code suivant :</p> Modifier le vecteur forward<pre><code>transform.forward = objectif - transform.position;\n</code></pre> <p>Modifier la valeur de <code>forward</code></p> <p>Selon le moment o\u00f9 la modification est prise en compte, la valeur a d\u00e9j\u00e0 pu \u00eatre utilis\u00e9e, ce n'est donc pas une m\u00e9thode sugg\u00e9r\u00e9e.</p>"},{"location":"maths/rotations/#conversions-degres-radians","title":"Conversions degr\u00e9s / radians","text":"<p>Pour convertir un angle de degr\u00e9s vers un angle en radian (et vice-versa), deux constantes de <code>Mathf</code> sont utiles. La constante <code>Deg2Rad</code> convertit de degr\u00e9s vers radians et <code>Rad2Deg</code> effectue la conversion inverse. On doit multiplier les angles par ces constantes pour op\u00e9rer les conversions. </p> <p>Notons que bien que les angles sont exprim\u00e9s en degr\u00e9s dans Unity, les fonctions trigonom\u00e9triques utilisent les valeurs en radians (et les fonctions trigonom\u00e9triques inverses retournent leur r\u00e9ponse en radians).</p>"},{"location":"maths/rotations/#references","title":"R\u00e9f\u00e9rences","text":"<p>GAVILAN, David. Performance of quaternions in the GPU, https://tech.metail.com/performance-quaternions-gpu/, publi\u00e9 le 13 septembre 2016 [consult\u00e9 le 19 ao\u00fbt 2022].</p>"},{"location":"maths/vecteurs_3d/","title":"Rappels sur les vecteurs 3D","text":"<p> Contenus de la page</p> <p>1-1 D\u00e9placement des objets de la simulation dans l'espace tridimensionnel</p> <p> Temps requis</p> <p>15 minutes</p>"},{"location":"maths/vecteurs_3d/#referentiels","title":"R\u00e9f\u00e9rentiels","text":"<p>On appelle r\u00e9f\u00e9rentiel un syst\u00e8me d'axe positionn\u00e9 dans l'espace. Dans Unity, il est possible de d\u00e9placer, faire pivoter ou mettre \u00e0 l'\u00e9chelle des objets selon deux r\u00e9f\u00e9rentiels. Le premier est le r\u00e9f\u00e9rentiel global. Les objets situ\u00e9s \u00e0 la racine de la sc\u00e8ne utilisent toujours ce r\u00e9f\u00e9rentiel. Le point (0, 0, 0) est appel\u00e9 l'origine du monde.</p> <p>Les objets qui sont enfants d'autres objets (dans la vue hi\u00e9rarchique) utilisent toujours le r\u00e9f\u00e9rentiel relatif \u00e0 leur parent, appel\u00e9 r\u00e9f\u00e9rentiel local. Le point (0, 0, 0) du r\u00e9f\u00e9rentiel local est l'origine du parent. Les translations, rotations et mises \u00e0 l'\u00e9chelle indiqu\u00e9es dans l'\u00e9diteur sont mesur\u00e9es dans ce r\u00e9f\u00e9rentiel.</p> <p>Le fait de rendre un objet enfant d'un autre ne modifiera pas ses caract\u00e9ristiques. L'objet enfant prendra les bonnes valeurs de transformation locale pour demeur\u00e9 inchang\u00e9 d'un point de vue global. </p> <p>Les translations et rotations peuvent \u00eatre faites dans le r\u00e9f\u00e9rentiel global ou local tandis que les mises \u00e0 l'\u00e9chelle sont toujours locales. Il faut donc porter attention \u00e0 la m\u00e9thode utilis\u00e9e. </p> <p>Question</p> <p>Si un objet parent est aux coordonn\u00e9es globales (2, 4, -2) et poss\u00e8de un enfant en coordonn\u00e9es locales (5, -7, 4), quelles sont les coordonn\u00e9es globales de l'objet enfant et qu'est-ce que ces coordonn\u00e9es signifient ?</p> Solution \\[ \\text{coordonnees globales} = \\text{coordonnees globales parent} + \\text{coordonnees locales enfants}\\\\ = (2, 4, -2) + (5, -7, 4)\\\\ = (7, -3, 2) \\] <p>Ces coordonn\u00e9es signifient qu'un observateur externe verra l'objet \u00e0 la position (7, -3, 2).</p>"},{"location":"maths/vecteurs_3d/#definition-des-vecteurs","title":"D\u00e9finition des vecteurs","text":"<p>Les vecteurs sont une collection ordonn\u00e9e de nombres servant \u00e0 repr\u00e9senter une situation multidimensionnelle. On les retrouve dans les plusieurs champs des math\u00e9matiques, des statistiques \u00e0 l'alg\u00e8bre en passant par la th\u00e9orie des graphes. Les vecteurs peuvent aussi avoir une signification g\u00e9om\u00e9trique en repr\u00e9sentant une direction ou une position. Dans Unity les vecteurs sont repr\u00e9sent\u00e9s par des structures, <code>Vector2</code>, <code>Vector3</code> et <code>Vector4</code> pour les vecteurs r\u00e9els (les valeurs de chaque dimension sont repr\u00e9sent\u00e9es par des <code>float</code>) ainsi que <code>Vector2Int</code> et <code>Vector3Int</code> pour les vecteurs entiers (les valeurs de chaque dimension sont repr\u00e9sent\u00e9es par des <code>int</code>).</p> <p>Le syst\u00e8me bidimensionnel de Unity utilise uniquement les composantes x et y o\u00f9 l'axe x positif est un d\u00e9placement vers la droite et l'axe y positif un d\u00e9placement vers le haut. Le syst\u00e8me tridimensionnel ajoute la composante z et l'axe z positif est un d\u00e9placement vers l'avant (s'\u00e9loigne de l'utilisateur). Le syst\u00e8me est orient\u00e9 de fa\u00e7on n\u00e9gative (r\u00e8gle de la main gauche).</p> La figure de gauche illustre le syst\u00e8me de Unity, celle de droite celui de Blender. Le syst\u00e8me de Blender correspond \u00e0 celui g\u00e9n\u00e9ralement admis en math\u00e9matique  <p>Convention des math\u00e9matiques</p> <p>Par convention, le gras sera utilis\u00e9 pour d\u00e9noter les vecteurs et la fonte r\u00e9guli\u00e8re pour les nombres. </p>"},{"location":"maths/vecteurs_3d/#operations-sur-les-vecteurs","title":"Op\u00e9rations sur les vecteurs","text":"<p>Soient deux vecteurs \\(\\mathbf{u} = (x_u, y_u, z_u) \\text{, } \\mathbf{v} = (x_v, y_v, z_v),\\) et \\(a\\) un nombre r\u00e9el, alors on peut d\u00e9finir les op\u00e9rations suivantes :</p>"},{"location":"maths/vecteurs_3d/#addition-de-vecteurs","title":"Addition de vecteurs","text":"<p>L'addition de vecteur permet de d\u00e9terminer le vecteur r\u00e9sultant de l'action de plusieurs vecteurs, par exemple, le d\u00e9placement total d'un objet apr\u00e8s une s\u00e9rie de d\u00e9placement. </p> <p>On peut aussi appliquer un vecteur de d\u00e9placement \u00e0 un vecteur de position pour obtenir la position apr\u00e8s le d\u00e9placement.</p> \\[ \\mathbf{u} + \\mathbf{v} = (x_u + x_v, y_u + y_v, z_u + z_v)\\] <p>Dans Unity, on additionne deux vecteurs de la fa\u00e7on suivante :</p> Addition de vecteurs<pre><code> Vector3 u = new Vector3(2.0f, 1.5f, 3.0f);\n Vector3 v = new Vector3(-1.0f, 0.5f, 0.75f);\n Vector3 resultat = u + v;    // (1.0f, 2.0f, 3.75f)\n</code></pre>"},{"location":"maths/vecteurs_3d/#norme-dun-vecteur","title":"Norme d'un vecteur","text":"<p>La norme d'un vecteur repr\u00e9sente sa longueur. Si le vecteur repr\u00e9sente une position, sa norme est aussi sa distance \u00e0 l'origine du plan (point de coordonn\u00e9es (0, 0, 0)). La norme est calcul\u00e9e de la fa\u00e7on suivante :</p> \\[\\|\\mathbf{u}\\| = \\sqrt{x_u^2 + y_u^2 + z_u^2}\\] <p>Dans Unity, on peut acc\u00e9der soit \u00e0 la norme (magnitude en anglais), soit au carr\u00e9 de la norme. </p> Calcul de la norme<pre><code> Vector3 u = new Vector3(2.0f, 6.0f, 3.0f);\n float normeU = u.magnitude;           // 7\n float normeCarreeU = u.sqrMagnitude;      // 49\n</code></pre> <p>Mais pourquoi la norme au carr\u00e9 ?</p> <p>Calculer une racine carr\u00e9e est tr\u00e8s long \u00e0 l'ordinateur, car un algorithme it\u00e9ratif (qui contient une boucle) est utilis\u00e9. Dans un contexte de programmation en temps r\u00e9el, le calcul d'une racine carr\u00e9e a peu d'impact, mais le calcul de 10 000 racines carr\u00e9s par frame peut ralentir l'ex\u00e9cution. Par cons\u00e9quent, si l'on souhaite comparer deux vecteurs pour savoir lequel est le plus long par exemple, on peut utiliser cette petite astuce math\u00e9matique pour sauver du temps de calcul $$ a &gt; b \\Leftrightarrow a^2 &gt; b^2  $$ Autrement dit, si l'on a pas besoin de conna\u00eetre la valeur de la norme, mais juste de trouver la plus grande (resp. plus petite) norme, on peut le faire beaucoup plus rapidement en omettant la racine.</p>"},{"location":"maths/vecteurs_3d/#multiplication-par-un-scalaire","title":"Multiplication par un scalaire","text":"<p>On peut changer la longueur d'un vecteur, sans changer sa direction, en multipliant celui par un scalaire. Cette op\u00e9ration peut \u00eatre utile pour g\u00e9rer la vitesse de d\u00e9placement comme nous le verrons plus tard.</p> <p>$$ a\\mathbf{u} = (au_x, au_y, au_z) $$ Les caract\u00e9ristiques du scalaire utilis\u00e9 d\u00e9terminent la longueur et le sens r\u00e9sultant :</p> <ul> <li>Si |a| &gt; 1, alors le vecteur obtenu est plus long</li> <li>Si |a| = 1, alors le vecteur obtenu est le m\u00eame que l'original</li> <li>Si |a| &lt; 1, alors le vecteur obtenu est plus court</li> <li>Si a &lt; 0, alors le vecteur obtenu suit la m\u00eame droite, mais dans le sens oppos\u00e9</li> </ul> <p>Dans Unity, on peut simplement utiliser l'op\u00e9rateur de multiplication pour effectuer la multiplication par un scalaire :</p> Multiplication par un scalaire<pre><code> Vector3 u = new Vector3(1.0f, 1.5f, -1.25f);\n Vector3 v = 2.0f * u;    // (2.0f, 3.0f, -2.5f);\n</code></pre>"},{"location":"maths/vecteurs_3d/#norme-et-normer-un-vecteur","title":"Norme et normer un vecteur","text":"<p>On peut aussi normer le vecteur, ce qui signifie de trouver le vecteur de m\u00eame sens, mais dont la norme est 1. Nous verrons plus tard un exemple o\u00f9 il est important de travailler avec des vecteurs de norme 1. Pour normer un vecteur, il suffit de diviser celui par sa norme. $$ \\mathbf{u'} = \\frac{1}{|\\mathbf{u}|}\\mathbf{u} $$ Dans Unity on peut normer le vecteur ou calculer le vecteur norm\u00e9 d'un vecteur.</p> Normalisation de vecteurs<pre><code> Vector3 u = new Vector3(3.0f, 6.0f, 6.0f); // La norme est de 9\n Vector3 uNorme = u.normalized;             // (0.33f, 0.66f, 0.66f)\n u.Normalize();                             // Change le contenu de u pour (0.33f, 0.66f, 0.66f)\n</code></pre>"},{"location":"maths/vecteurs_3d/#quelques-propriete-des-normes","title":"Quelques propri\u00e9t\u00e9 des normes","text":"<p>Un vecteur multipli\u00e9 par un scalaire a comme norme la valeur absolue du scalaire multipli\u00e9 par la norme originale du vecteur. </p> \\[ \\|a\\mathbf{u}\\| = |a|\\times \\|u\\| \\] <p>Donc si l'on multiplie un vecteur par la quantit\u00e9 0.5 par exemple, sa norme se trouve r\u00e9duite de moiti\u00e9. Cette propri\u00e9t\u00e9 permet de d\u00e9montrer l'op\u00e9ration de normage.</p> \\[ \\|u'\\| = \\left|\\frac{1}{\\|\\mathbf{u}\\|}\\right|\\times\\|\\mathbf{u}\\| = \\frac{\\|u\\|}{\\|u\\|} = 1 \\]"},{"location":"maths/vecteurs_3d/#multiplication-composantes-par-composantes","title":"Multiplication composantes par composantes","text":""},{"location":"maths/vecteurs_3d/#produit-scalaire","title":"Produit scalaire","text":""},{"location":"maths/vecteurs_3d/#vecteurs-speciaux-dans-unity","title":"Vecteurs sp\u00e9ciaux dans Unity","text":""},{"location":"maths/vecteurs_3d/#les-vecteurs-constants","title":"Les vecteurs constants","text":"<p>Unity d\u00e9finit huit vecteurs de valeurs constantes, le vecteur nul, le vecteur de 1 ainsi qu'un vecteur pour chaque axe du monde et son inverse.</p> Vecteurs constante<pre><code>Vector3.zero    // Retourne (0.0f, 0.0f, 0.0f)\nVector3.one     // Retourne (1.0f, 1.0f, 1.0f)\n\n// Axe x\nVector3.right   // Retourne (1.0f, 0.0f, 0.0f)\nVector3.left   // Retourne (-1.0f, 0.0f, 0.0f)\n\n// Axe y \nVector3.up    // Retourne (0.0f, 1.0f, 0.0f)\nVector3.down    // Retourne (0.0f, -1.0f, 0.0f)\n\n// Axe z\nVector3.forward     // Retourne (0.0f, 0.0f, 1.0f)\nVector3.back        // Retourne (0.0f, 0.0f, -1.0f)\n</code></pre>"},{"location":"maths/vecteurs_3d/#les-references-locales","title":"Les r\u00e9f\u00e9rences locales","text":"<p>Pour les vecteurs de direction (right, up et forward par exemple), il est aussi possible de les appeler sur le <code>transform</code> d'un objet et cela retourne le r\u00e9f\u00e9rentiel local d'un objet. Par exemple  <code>transform.forward</code> retourne le devant de l'objet (orientation locale z-positive). Cette technique est utile pour savoir dans quelle direction un objet \"regarde\".</p>"},{"location":"maths/vecteurs_3d/#references","title":"R\u00e9f\u00e9rences","text":"<p>Image de r\u00e9f\u00e9rentiel : https://i.imgur.com/SHHNGNX.jpg, r\u00e9cup\u00e9r\u00e9 le 10 ao\u00fbt 2022.</p>"},{"location":"programmer/controleur/","title":"Gestion d'actions multiples","text":"<p> Contenus de la page</p> <p>4-3 Acc\u00e9der \u00e0 la boucle de jeu pour les mises \u00e0 jour du contr\u00f4le de la simulation</p> <p> Temps requis</p> <p>15 minutes</p> <p>La gestion d'une r\u00e9action sur plusieurs objets simultan\u00e9ment peut poser une probl\u00e8me lors de la conception du jeu. Prenons l'exemple d'un jeu o\u00f9 un joueur doit fuir un monstre et trouver un objet dans un certain temps donn\u00e9, autrement il perd la partie. Un <code>ControleurJeu</code> est responsable de g\u00e9rer la logique du jeu.</p> Gestion de la partie avec une classe unique<pre><code>///&lt;summary&gt;\n///Objet responsabele de la gestion du jeu. Il v\u00e9rifie si la partie et termin\u00e9e et r\u00e9agit ad\u00e9quatement.\n///&lt;summary&gt;\npublic class ControleurJeu : MonoBehavior \n{\n    [SerializeField, Tooltip(\"Le joueur principal\")]\n    private Joueur joueur;\n\n    [SerializeField, Tooltip(\"L'ennemi qui poursuit le joueur\")]\n    private Ennemi ennemi;\n\n    [SerializeField, Tooltip(\"L'\u00e9l\u00e9ment de UI qui affiche le temps qui reste au joueur.\")]\n    private CompteurTemps compteur;\n\n    // Variable qui compte le temps passer \u00e0 rechercher\n    private float tempsRecherche = 0.0f;\n\n    [SerializeField, Tooltip(\"La fenetre de UI qui affiche les options lorsque la partie est gagn\u00e9e\")]\n    private GameObject fenetreVictoire;\n\n    [SerializeField, Tooltip(\"La fenetre de UI qui affiche les options lorsque la partie est perdue\")]\n    private GameObject fenetreDefaite;\n\n    // Indique si l'objet recherch\u00e9 \u00e0 \u00e9t\u00e9 trouv\u00e9\n    private bool ObjetTrouve {get; set;}\n\n    private void Update() \n    {\n        if(!ObjetTrouve &amp;&amp; tempsRecherche &lt; 60.0f) {\n            tempsRecherche += Time.deltaTime;\n            compteur.AfficherTempsRestant(60.0f - tempsRecherche);\n        }\n        if(ObjetTrouve)\n        {\n            // Bloc d'action lorsque victoire\n            joueur.PeutBouger = false;\n            joueur.gameObject.GetComponent&lt;Animator&gt;().SetTrigger(\"Victoire\");\n            ennemi.vitesse = 0;\n            ennemi.gameObject.GetComponent&lt;Animator&gt;().SetTrigger(\"D\u00e9faite\");\n            compteur.gameObject.SetActive(false);\n            fenetreVictoire.SetActive(true);\n        }\n        if(tempsRecherche &gt;= 60.0f) {\n            // Bloc d'action lorsque d\u00e9faite\n            joueur.PeutBouger = false;\n            joueur.gameObject.GetComponent&lt;Animator&gt;().SetTrigger(\"D\u00e9faite\");\n            ennemi.vitesse = 0;\n            ennemi.gameObject.GetComponent&lt;Animator&gt;().SetTrigger(\"Victoire\");\n            compteur.gameObject.SetActive(false);\n            fenetreDefaite.SetActive(true);\n        }\n    }\n}\n</code></pre> <p>Ce code comporte plusieurs probl\u00e8mes dans sa conception : </p> <ol> <li>On v\u00e9rifie \u00e0 chaque frame si l'objet est trouv\u00e9 ou non;</li> <li>On test toujours si l'on doit ajouter du temps au temps \u00e9coul\u00e9;</li> <li>Les deux blocs d'actions :</li> <li>Poss\u00e8des des actions communes;</li> <li>Appellent plusieurs fois des m\u00e9thodes sur les m\u00eames objets.</li> </ol> <p>L'id\u00e9e principale va \u00eatre d'encapsuler les op\u00e9rations d'un objet dans ce dernier. \u00c9galement, on va \u00e9viter de r\u00e9p\u00e9ter les lignes de code m\u00eame au sein des classes apr\u00e8s l'encapsulation des \u00e9l\u00e9ments.</p> Gestion de la partie avec l'information encapsul\u00e9e correctement.<pre><code>///&lt;summary&gt;\n///Repr\u00e9sente le personnage principal contr\u00f4ler par le joueur.\n///&lt;/summary&gt;\npublic class Joueur : MonoBehaviour {\n\n    ///&lt;summary&gt;\n    ///Effectue les actions de fin de la partie pour le joueur.\n    ///&lt;param name=\"victoire\"&gt;Indique si le joueur a gagn\u00e9.&lt;/param&gt;\n    ///&lt;/summary&gt;\n    public void ActionFinPartie(bool victoire) \n    {\n        peutBouger = false;\n        joueur.gameObject.GetComponent&lt;Animator&gt;().SetTrigger(victoire ? \"Victoire\" : \"D\u00e9faite\");\n    }\n}\n\n///&lt;summary&gt;\n///G\u00e8re l'ennemi qui pouchasse le joueur\n///&lt;/summary&gt;\npublic class Ennemi : MonoBehaviour {\n\n    ///&lt;summary&gt;\n    ///Effectue les actions de fin de la partie pour l'ennemi.\n    ///&lt;param name=\"victoire\"&gt;Indique si le joueur a gagn\u00e9.&lt;/param&gt;\n    ///&lt;/summary&gt;\n    public void ActionFinPartie(bool victoire) \n    {\n        vitesse = false;\n        joueur.gameObject.GetComponent&lt;Animator&gt;().SetTrigger(victoire ? \"D\u00e9faite\" : \"victoire\");\n    }\n}\n\n///&lt;summary&gt;\n///Contr\u00f4le les \u00e9l\u00e9ments de l'interface utilisateur.\n///&lt;/summary&gt;\npublic class ControleurUI : MonoBehaviour {\n\n    [SerializeField, Tooltip(\"La fenetre de UI qui affiche les options lorsque la partie est gagn\u00e9e\")]\n    private GameObject fenetreVictoire;\n\n    [SerializeField, Tooltip(\"La fenetre de UI qui affiche les options lorsque la partie est perdue\")]\n    private GameObject fenetreDefaite;\n\n    [SerializeField, Tooltip(\"L'\u00e9l\u00e9ment de UI qui affiche le temps qui reste au joueur.\")]\n    private CompteurTemps compteur;\n\n    ///&lt;summary&gt;\n    ///Affiche la fen\u00eatre de la fin de la partie.\n    ///&lt;param name=\"victoire\"&gt;Indique si le joueur a gagn\u00e9.&lt;/param&gt;\n    ///&lt;/summary&gt;\n    public void AfficherFenetreFin(bool victoire)  \n    {\n        GameObject fenetre = victoire ? fenetreVictoire : fenetreDefaite\n        fenetre.SetActive(true);\n        compteur.gameObject.SetActive(false);\n    }\n\n    ///&lt;summary&gt;\n    ///Affiche la valeur du temps restant au joueur avant la fin de la partie.\n    ///&lt;param name=\"victoire\"&gt;La quantit\u00e9 de temps restant.&lt;/param&gt;\n    ///&lt;/summary&gt;\n    public void AfficherTempsRestant(float tempsRestant)\n    {\n        compteur.SetText(tempsRestant);\n    }\n}\n\n///&lt;summary&gt;\n///Objet responsable de la gestion du jeu. Il v\u00e9rifie si la partie et termin\u00e9e et r\u00e9agit ad\u00e9quatement.\n///&lt;summary&gt;\npublic class ControleurJeu : MonoBehavior \n{\n    [SerializeField, Tooltip(\"Le joueur principal\")]\n    private Joueur joueur;\n\n    [SerializeField, Tooltip(\"L'ennemi qui poursuit le joueur\")]\n    private Ennemi ennemi;\n\n    [SerializeField, Tooltip(\"Le controleur du UI.\")]\n    private ControleurUI controleurUI;\n\n    // Variable qui compte le temps qui reste\n    private float tempsRestant;\n\n    [SerializeField, Tooltip(\"Temps disponible pour trouver l'objet\")]\n    private float tempsDisponible;\n\n    // Indique si l'objet recherch\u00e9 \u00e0 \u00e9t\u00e9 trouv\u00e9\n    public bool ObjetTrouve {get; set;}    \n\n    private void Start()\n    {\n        StartCoroutine(nameof(TempsRecherche));   \n        tempsRestant = tempsDisponible;\n    }\n\n    ///&lt;summary&gt;\n    ///R\u00e9alise les op\u00e9rations de fin de partie pour tous les objets contr\u00f4l\u00e9s.\n    ///&lt;param name=\"victoire\"&gt;Indique si le joueur a gagn\u00e9 la partie.\n    ///&lt;/summary&gt;\n    public void ActionFinPartie(bool victoire) {\n        joueur.ActionFinPartie(victoire);\n        ennemi.ActionFinPartie(victoire);\n        controleurUI.AfficherFenetreFin(vicgtoire)\n    }\n\n    ///&lt;summary&gt;\n    ///Coroutine qui g\u00e8re l'\u00e9coulement du temps dans la recherche des objets.\n    ///&lt;/summary&gt;    \n    private IEnumerator TempsRecherche()\n    {\n        while(!ObjetTrouve &amp;&amp; tempsRestant &gt; 0.0f) {\n            tempsRestant -= Time.deltaTime;\n            controleurUI.AfficherTempsRestant(tempsRestant);\n        }\n\n        ActionFinPartie(ObjetTrouve);\n    }\n}\n</code></pre> <p>Parmis les modifications on retrouve les suivantes :</p> <ul> <li>On pense en termes de temps restant parce que c'est que l'on affiche \u00e0 l'utilisateur et on utilise une variable expos\u00e9e pour contr\u00f4ler sa valeur initiale.</li> <li>Les objets <code>Joueur</code> et <code>Ennemi</code> sont responsables de d\u00e9finir les actions de fin de partie qu'ils font. Si l'on les change (exemple destruction, son, effet visuel suppl\u00e9mentaire...), on peut le faire sans changer le <code>Contr\u00f4leurJeu</code>.</li> <li>Les objets de UI sont g\u00e9r\u00e9s dans leur propre contr\u00f4leur (ce ne sont pas des objets de jeu \u00e0 proprement parler).</li> <li>Les actions de fin de partie sont regroup\u00e9es dans une m\u00e9thode et un bool\u00e9en g\u00e8re le type de partie.</li> <li>Une coroutine g\u00e8re le temps de recherche et peut \u00eatre arr\u00eat\u00e9e en fin de partie.</li> <li>On arr\u00eate la coroutine par elle-m\u00eame (la plupart des utilisations de StopCoroutine peuvent \u00eatre \u00e9vit\u00e9es en utilisant un design ad\u00e9quat du code). Si l'objet a \u00e9t\u00e9 trouv\u00e9, alors <code>ObjetTrouve</code> est true et on lance les actions de fin avec le param\u00e8tre <code>victoire</code> \u00e0 true, si le d\u00e9lai a expir\u00e9, alors <code>ObjetTrouve</code> est false, et on lance la fin avec une <code>victoire</code> \u00e0 false. </li> </ul>"},{"location":"programmer/controleur/#le-probleme-du-couplage","title":"Le probl\u00e8me du couplage","text":"<p>Le contr\u00f4leur de jeu voit tous les \u00e9l\u00e9ments, ce qui peut devenir un probl\u00e8me si le jeu g\u00e8re beaucoup d'\u00e9l\u00e9ment. On peut utiliser un \u00e9v\u00e9nement pour g\u00e9rer la situation. Chaque objet est responsable d'\u00e9couter les \u00e9v\u00e9nements <code>onFinPartie</code> et <code>onChangementTempsDisponible</code> s'il doit ex\u00e9cuter des actions \u00e0 ce moment.</p> <pre><code>///&lt;summary&gt;\n///Objet responsable de la gestion du jeu. Il v\u00e9rifie si la partie et termin\u00e9e et r\u00e9agit ad\u00e9quatement.\n///&lt;summary&gt;\npublic class ControleurJeu : MonoBehavior \n{\n    // Indique que la partie est termin\u00e9e\n    public UnityEvent&lt;bool&gt; onFinPartie;                // bool =&gt; victoire\n\n    // Indique que le temps restant a diminu\u00e9\n    public UnityEvent&lt;float&gt; onChangementTempsRestant;   // float =&gt; valeur de temps restant\n\n    // Variable qui compte le temps qui reste\n    private float tempsRestant;\n\n    [SerializeField, Tooltip(\"Temps disponible pour trouver l'objet\")]\n    private float tempsDisponible;    \n\n    // Indique si l'objet recherch\u00e9 \u00e0 \u00e9t\u00e9 trouv\u00e9\n    public bool ObjetTrouve {get; set;}\n\n    private void Start()\n    {\n        StartCoroutine(nameof(TempsRecherche));   \n        tempsRestant = tempsDisponible;\n    }\n\n     ///&lt;summary&gt;\n    ///Coroutine qui g\u00e8re l'\u00e9coulement du temps dans la recherche des objets.\n    ///&lt;/summary&gt;    \n    private IEnumerator TempsRecherche()\n    {\n        while(!ObjetTrouve &amp;&amp; tempsRestant &gt; 0.0f) {\n            tempsRestant -= Time.deltaTime;\n            onChangementTempsRestant?.Invoke(tempsRestant);\n        }\n\n        onFinPartie?.Invoke();\n    }\n}\n</code></pre> <p>Avec les \u00e9v\u00e9nements, le contr\u00f4leur de jeu ne contient plus que la logique du jeu (soit qu'il faut trouver un objet dans un temps imparti). Souvent un contr\u00f4leur long relativement \u00e0 la complexit\u00e9 du jeu est un signe de probl\u00e8mes dans le design du jeu.</p>"},{"location":"programmer/coroutines/","title":"Coroutines","text":"<p> Contenus de la page</p> <p>4-3 Acc\u00e9der \u00e0 la boucle de jeu pour les mises \u00e0 jour du contr\u00f4le de la simulation</p> <p> Temps requis</p> <p>20 minutes</p> <p>Le code d'exemple de cette section est disponible sur GitHub .</p>"},{"location":"programmer/coroutines/#iterateurs-et-yield","title":"It\u00e9rateurs et yield","text":"<p>La notion d'it\u00e9rateur se retrouve dans plusieurs langages de programmation. Les it\u00e9rateurs permettent de contr\u00f4ler la fa\u00e7on de parcourir une collection de donn\u00e9es. En C#, ils sont impl\u00e9ment\u00e9s par l'interface <code>IEnumerator</code> d\u00e9finie dans l'espace de noms <code>System.Collection</code>.</p> Quelques \u00e9l\u00e9ments de l'interface IEnumerator<pre><code>public interface IEnumerator&lt;T&gt; \n{\n    T Current;              // \u00c9l\u00e9ment point\u00e9 par l'it\u00e9rateur (par d\u00e9faut null)\n\n    bool MoveNext();        // D\u00e9place l'\u00e9l\u00e9ment point\u00e9 sur le prochain. Retourne TRUE si c'est possible \n                            // et FALSE s'il n'y a pas d'autres \u00e9l\u00e9ments\n\n    void Reset();           // Repositionne l'it\u00e9rateur au d\u00e9but\n\n    void Dispose();         // Lib\u00e8re les ressources de l'it\u00e9rateur. Directement h\u00e9rit\u00e9 de l'interface \n                            // IDisposable\n}\n</code></pre> <p>Regardez la classe <code>IterateurCompteur</code> pour un exemple d'it\u00e9rateur de nombre de 1 \u00e0 20. On voit que la m\u00e9thode <code>MoveNext</code> est la plus important, car elle contr\u00f4le la logique d'it\u00e9ration de notre it\u00e9rateur.</p> It\u00e9rateur qui incr\u00e9mente un compteur<pre><code>/// &lt;summary&gt;\n/// Avance le pointeur de l'it\u00e9rateur vers le prochain \u00e9l\u00e9ment\n/// &lt;/summary&gt;\n/// &lt;returns&gt;True si un autre \u00e9l\u00e9ment existe ou false si l'it\u00e9rateur est arriv\u00e9 \u00e0 terme.&lt;/returns&gt;\npublic bool MoveNext()\n{\n    if(Current &lt; MAX_VALEUR)\n    {\n        Current++; \n        return true;\n    }\n\n    return false;\n}\n</code></pre> <p>L'utilisation directe de l'interface <code>IEnumerator</code> par son impl\u00e9mentation dans un classe concr\u00e8te (ou une lambda expression) peut devenir lourd et fastidieux. Il y a plusieurs m\u00e9thodes \u00e0 d\u00e9finir et g\u00e9n\u00e9ralement la logique d'it\u00e9ration est propre \u00e0 une situation sp\u00e9cifique, ce qui am\u00e8ne \u00e0 d\u00e9finir une nouvelle classe chaque fois que l'utilisation d'un it\u00e9rateur est n\u00e9cessaire.</p> <p>Le mot-cl\u00e9 <code>yield</code> de C# nous permet de d\u00e9finir implicitement un it\u00e9rateur. Ce mot-cl\u00e9 permet d'indiquer \u00e0 quel moment est-ce que l'it\u00e9rateur doit avancer vers un nouvel \u00e9l\u00e9ment.</p> <p>Prenons l'exemple de la classe <code>AfficheurNombresCarres</code>. Nous pourrions faire un it\u00e9rateur qui avance \u00e0 chaque fois qu'une touche est press\u00e9e. En utilisant <code>yield</code> on se retrouve avec une seule m\u00e9thode qui est statique. Comme la m\u00e9thode est statique, on pourrait, selon le contexte de l'application, d\u00e9placer ce code dans la classe utilisant la valeur des carr\u00e9s.</p> Generation des nombres carr\u00e9s avec un it\u00e9rateur<pre><code>public static IEnumerator&lt;int&gt; GetSequence(ConsoleKey toucheContinuer = ConsoleKey.Tab)\n{\n    int nombre = 1;\n\n    Console.WriteLine($\"Appuyez sur {toucheContinuer} pour afficher des carres. Appuyez sur n'importe\" +\n    $\"quelle autre touche pour arreter.\");\n\n    // Tant que la touche est la touche continuer\n    while(Console.ReadKey().Key.Equals(toucheContinuer))\n    {\n        yield return nombre * nombre;           // \u00c9quivalent de MoveNext\n        nombre++;\n    }\n}\n</code></pre> <p>Et la m\u00e9thode <code>GetSequence</code> est appel\u00e9e de la fa\u00e7on suivante (voir classe <code>Application</code>).</p> Exe\u00e9cution d'un it\u00e9rateur<pre><code> while(sequenceCarres.MoveNext())\n {\n    Console.WriteLine(sequenceCarres.Current + \", \");\n }\n</code></pre> <p>Donc le <code>MoveNext</code> permet d'ex\u00e9cuter la fonction jusqu'\u00e0 la ligne qui contient le <code>yield return</code>. La valeur de <code>Current</code> est alors mise \u00e0 jour et <code>MoveNext</code> retourne <code>true</code>. Si l'ex\u00e9cution de la fonction n'atteint pas la ligne <code>yield</code> avant la fin de la m\u00e9thode(par exemple la condition du <code>while</code> n'est pas v\u00e9rifi\u00e9e), <code>MoveNext</code> retourne <code>false</code>.</p> <p>La classe <code>GenerateurFibonacci</code> montre l'utilisation de plusieurs <code>yield</code> dans une m\u00eame m\u00e9thode.</p> <p>yield ou yield return ?</p> <p>On parle du mot-cl\u00e9 <code>yield</code>, mais en pratique <code>yield</code> n'appara\u00eet jamais sans un <code>return</code>.</p>"},{"location":"programmer/coroutines/#pourquoi-utiliser-des-iterateurs","title":"Pourquoi utiliser des it\u00e9rateurs ?","text":"<p>Les it\u00e9rateurs sont g\u00e9n\u00e9ralement utilis\u00e9s dans trois contextes :</p> <p>1)  Pour parcourir des collections non ordonn\u00e9es comme un tas (HashMap, HashSet, Dictionary... ). 2) Pour \u00e9viter de g\u00e9n\u00e9rer une large collection de donn\u00e9es. Comme on peut g\u00e9n\u00e9rer \u00e0 chaque passage la valeur \u00e0 utiliser, on ne garde jamais en m\u00e9moire plus d'une valeur. 3) Quand on veut contr\u00f4ler le moment o\u00f9 les \u00e9l\u00e9ments sont re\u00e7us. Par exemple, en r\u00e9seautique, on peut attendre une confirmation avant l'envoie du prochain segment de donn\u00e9es. Un it\u00e9rateur permet de parcourir une longue cha\u00eene binaire en plus courtes s\u00e9quences et d'attendre la confirmation de la pr\u00e9c\u00e9dente avant l'envoie de la suivante.</p> <p>Avec Unity, nous sommes vraiment dans le 3e cas d'utilisation o\u00f9 l'on veut une information par frame lorsqu'on utilise les it\u00e9rateurs dans le contexte d'une coroutine.</p>"},{"location":"programmer/coroutines/#coroutine-unity","title":"Coroutine Unity","text":"<p>Dans le contexte d'une coroutine, on veut ex\u00e9cuter une m\u00e9thode sur plusieurs frames. On doit donc y d\u00e9finir un point d'arr\u00eat pour attendre la prochaine frame. On utilise alors un it\u00e9rateur (qui ne parcours non pas une liste de donn\u00e9es classique, mais une liste de frames). On manipule les coroutines de la fa\u00e7on suivante.</p> d\u00e9claration de coroutine<pre><code>// ...\n\nCoroutine maCoroutine = StartCoroutine(MethodeCoroutine());     // D\u00e9marre la coroutine\nStopCoroutine(maCoroutine);                                     // Interrompt la coroutine\n\n// ...\n\n// Coroutine\nprivate IEnumerator MethodeCoroutine() \n{\n    // ...\n    yield return ...\n}\n</code></pre> <p>Dans la coroutine, on peut utiliser 4 types de <code>return</code></p> <ol> <li><code>return null</code> ou <code>return 0</code> : attend la prochaine frame de la coroutine avant de poursuivre l'ex\u00e9cution.</li> <li><code>return new WaitForSeconds(float)</code> : attend pour le nombre de secondes \u00e9coul\u00e9es dans le jeu.</li> <li><code>return new WaitForSecondsRealtime(float)</code> : attend pour un nombre de secondes \u00e9coul\u00e9es dans le monde r\u00e9el.</li> <li><code>return new WaitUntil(lambda)</code> ou <code>return new WaitWhile(lambda)</code> : attend selon une lambda tant qu'elle est fausse (until) ou tant qu'elle est vraie (while)</li> </ol>"},{"location":"programmer/coroutines/#exemples-dattente-par-les-coroutines","title":"Exemples d'attente par les coroutines","text":"Instruction de coroutine dans Unity<pre><code>// Attend une frame\nyield return null;              \n\n// Attend 3 secondes dans le jeu\nyield return new WaitForSeconds(3.0f);\n\n// Attend 5 secondes dans la vraie vie\nyield return new WaitForSecondsRealtime(5.0f);\n\n// Attend tant que la vie du personnage est strictement positive\nyield return new WaitWhile(() =&gt; personnage.Vie &gt; 0);\n\n// Attend que le personnage meurt\nyield return new WaitUntil(() =&gt; personnage.Vie &lt;= 0);\n</code></pre>"},{"location":"programmer/evenements/","title":"Programmation \u00e9v\u00e9nementielle","text":"<p> Contenus de la page</p> <p>3-4 Patron de conception observateur 3-5 Programmation \u00e9v\u00e9nementielle</p> <p> Temps requis</p> <p>30 minutes</p> <p>En programmation s\u00e9quentielle, les m\u00e9thodes et les instructions s'ex\u00e9cutent les unes \u00e0 la suite des autres dans une s\u00e9quence explicite et d\u00e9finie. Mis \u00e0 part quelques cas, dont les indirections dues au polymorphisme ou l'utilisation de la r\u00e9flexivit\u00e9, on peut toujours pr\u00e9dire la prochaine instruction ex\u00e9cut\u00e9e \u00e0 la simple lecture du code source. Voici un exemple de traitement s\u00e9quentiel permettant de r\u00e9agir au clic d'un bouton.</p> Gestion d'un clic d'un bouton sans \u00e9v\u00e9nement<pre><code>// Bouton g\u00e9n\u00e9rique \npublic abstract class Bouton {   \n    public abstract void Cliquer();\n}\n\n// Sp\u00e9cialisation pour incr\u00e9menter le compteur\npublic class BoutonIncrement : Bouton\n{\n    public Compteur Compteur { get; set; }\n\n    public override void Cliquer() {\n        Compteur.Incrementer();\n    }\n}\n\n// Sp\u00e9cialisation pour d\u00e9cr\u00e9menter le compteur\npublic class BoutonDecrementer : Bouton\n{\n    public Compteur Compteur { get; set; }\n\n    public override void Cliquer() {\n        Compteur.Decrementer();\n    }\n}\n\n// G\u00e8re le compteur d'un entier\npublic class Compteur {\n    public int Valeur { get; private set; }\n\n    public Compteur () {\n        Valeur = 0;\n    }\n\n    public void Incrementer() {\n        Valeur ++;\n    }\n\n    public void Decrementer() {\n        Valeur --;\n    }\n}\n</code></pre> <p>Lorsqu'on clique sur le bouton dans l'interface, la m\u00e9thode abstraite <code>Cliquer</code> du type bouton est appel\u00e9e (sur l'instance <code>BoutonIncrementer</code> ou <code>BoutonDecrementer</code> selon le cas).</p> <p>Le principal d\u00e9faut de cette approche est le nombre de classes n\u00e9cessaires. Il serait bien plus simple d'avoir un bouton g\u00e9n\u00e9rique qui permet de g\u00e9rer toutes les actions. L'id\u00e9e est de fournir au bouton une m\u00e9thode a ex\u00e9cuter lorsqu'il est cliqu\u00e9. Par contre, on ne peut pas le faire via une interface, car chaque objet g\u00e9r\u00e9 (comme le <code>Compteur</code>) aurait un seul traitement disponible. On peut alors utiliser une id\u00e9e semblable aux pointeurs de fonctions de C, des foncteurs C++ ou des interfaces fonctionnelles de java (Bref, chaque langage \u00e0 d\u00fb inventer un concept pour adresser ce probl\u00e8me). </p>"},{"location":"programmer/evenements/#types-delegues","title":"Types d\u00e9l\u00e9gu\u00e9s","text":"<p>En C# un type d\u00e9l\u00e9gu\u00e9 est simplement la signature d'une m\u00e9thode que l'on utilise comme type de variable. On peut assigner aux variables du type d\u00e9l\u00e9gu\u00e9 n'importe quelle m\u00e9thode respectant la signature d\u00e9finie par le type d\u00e9l\u00e9gu\u00e9. La syntaxe d'un d\u00e9l\u00e9gu\u00e9 est :</p> D\u00e9claration d'un type d\u00e9l\u00e9gu\u00e9<pre><code>[public | protected | private | internal] delegate TYPE_RETOUR NOM_DELEGUE ([parametre1[, parametres2...]]);\n</code></pre> <p>Par exemple le d\u00e9l\u00e9gu\u00e9 suivant r\u00e9pond \u00e0 la signature de la m\u00e9thode <code>A</code> et <code>B</code>, mais pas \u00e0 celle de la m\u00e9thode <code>C</code>. On peut s'en servir comme type pour stocker de l'information.</p> Exemple de d\u00e9l\u00e9gu\u00e9<pre><code>public class TestDelegue {\n    public delegate int MonDelegue (int a, int b);\n\n    // M\u00e9thode A\n    public int Somme(int a, int b) {\n        ...\n    }\n\n    // M\u00e9thode B\n    private int Produit(int a, int b) {\n        ...\n    }\n\n    // M\u00e9thode C\n    public float Somme(float a, float b) {\n        ...\n    }\n\n    // Variable stockant un type d\u00e9l\u00e9gu\u00e9\n    private MonDelegue referenceMethode;\n}\n</code></pre> <p>Le modificateur de visibilit\u00e9 ici intervient au m\u00eame titre que celui devant une variable, une m\u00e9thode ou une classe. Donc m\u00eame si la m\u00e9thode <code>B</code> est priv\u00e9e et que <code>MonDelegue</code> est public, la m\u00e9thode <code>B</code> r\u00e9pond aux crit\u00e8res de <code>MonDelegue</code>.</p> <p>Dans notre exemple de bouton, on va donc d\u00e9finir un d\u00e9l\u00e9gu\u00e9 dans <code>Bouton</code> pour sp\u00e9cifier que <code>Bouton</code> peut envoyer un message \u00e0 toutes les m\u00e9thodes sans param\u00e8tres. (Notez le <code>Del</code> \u00e0 la fin du nom du type d\u00e9l\u00e9gu\u00e9, c'est une nomenclature standard en C#). L'id\u00e9e est qu'au lieu de cr\u00e9er des sp\u00e9cialisations du comportement du bouton \u00e0 chaque action diff\u00e9rente que celui-ci doit accomplir, le comportement (m\u00e9thode \u00e0 ex\u00e9cuter) sera une donn\u00e9e du bouton.</p> Int\u00e9gration du d\u00e9l\u00e9gu\u00e9 dans le bouton<pre><code>public class Bouton {\n    public delegate void ActionClicDel ();\n}\n</code></pre>"},{"location":"programmer/evenements/#evenements","title":"\u00c9v\u00e9nements","text":"<p>\u00c0 pr\u00e9sent, on doit trouver une mani\u00e8re d'informer <code>Bouton</code> quelle m\u00e9thode doit \u00eatre appel\u00e9 lorsqu'il est cliqu\u00e9. On va utiliser le concept d'\u00e9v\u00e9nements pour ce faire. Un \u00e9v\u00e9nement permet de lancer un traitement \u00e0 un moment pr\u00e9cis en brisant le flux d'ex\u00e9cution. L'avantage \u00e0 utiliser des \u00e9v\u00e9nements est qu'il n'est pas n\u00e9cessaire de savoir quel objet doit recevoir l'information; c'est de la responsabilit\u00e9 des objets qui veulent \u00eatre notifi\u00e9s de s'abonner \u00e0 l'\u00e9v\u00e9nement.</p> <p>Une petite analogie ici : suivre un abonnement c'est un peu comme suivre quelqu'un sur Facebook, c'est \u00e0 vous de vous abonner et non la personne qui va vous forcer \u00e0 recevoir l'information. L'approche pr\u00e9sent\u00e9e au d\u00e9but correspond plus au Publi-sac o\u00f9 vous recevez une tonne d'information que vous n'avez pas demand\u00e9e et qu'ils vont porter chez vous (ils savent qui vous \u00eates \ud83d\ude26).</p> <p>Une \u00e9v\u00e9nement C# correspond \u00e0 un type d\u00e9l\u00e9gu\u00e9 que l'on assigne \u00e0 une \u00ab variable \u00bb sp\u00e9cial qui g\u00e8re les \u00e9v\u00e9nements. La syntaxe d'un \u00e9v\u00e9nement est la suivante.</p> D\u00e9claration d'un \u00e9v\u00e9nement<pre><code>[public | protected | private | internal] event TYPE_DELEGUE NOM_EVENEMENT;\n</code></pre> <p>Encore une fois, les modificateurs de visibilit\u00e9s servent seulement \u00e0 d\u00e9finir la visibilit\u00e9 de l'\u00e9v\u00e9nement par rapport \u00e0 sa classe. Dans bouton, on peut maintenant ajouter un \u00e9v\u00e9nement \u00e0 ex\u00e9cuter lorsque le bouton est cliqu\u00e9. On retrouve souvent le mot \u00ab\u00a0On\u00a0\u00bb pour identifier un \u00e9v\u00e9nement.</p> D\u00e9claration de l'\u00e9v\u00e9nement pour r\u00e9pondre au clic de la souris<pre><code>public class Bouton {\n    public delegate void ActionClicDel ();\n    public event ActionClicDel OnClicBouton;\n}\n</code></pre> <p>Pour ex\u00e9cuter un \u00e9v\u00e9nement, on utilise la m\u00e9thode <code>!#c# Invoke</code> sur l'\u00e9v\u00e9nement. Il faut toutefois s'assurer que celui-ci n'est pas nul (qu'il y a au moins un objet pour le recevoir \u00e0 l'autre bout...). L'op\u00e9rateur de v\u00e9rification de nullit\u00e9 <code>!#c# ?</code> permet de r\u00e9aliser cela simplement.</p> Int\u00e9gration de la m\u00e9thode cliquer<pre><code>// Bouton g\u00e9n\u00e9rique \npublic class Bouton {   \n\n    public delegate void ActionClicDel ();\n    public event ActionClicDel OnClicBouton;\n\n    public void Cliquer() {\n        OnClicBouton?.Invoke();\n    }\n}\n</code></pre> <p>Remarquez ici que <code>!#c# Bouton</code> est maintenant un type concret et qu'il n'y a plus d'utilit\u00e9 \u00e0 maintenir les classes <code>!#c# BoutonIncrement</code> et <code>!#c# BoutonDecrement</code>. Il ne reste plus qu'\u00e0 ajouter <code>!#c# Compteur</code> pour qu'il \u00e9coute le bouton. </p> <p>Notez que l'op\u00e9rateur <code>!#c# +=</code> permet d'ajouter un abonn\u00e9 \u00e0 un \u00e9v\u00e9nement (donc la m\u00e9thode indiqu\u00e9e sera appel\u00e9e) et <code>!#c# -=</code> permet de se d\u00e9sabonner de l'\u00e9v\u00e9nement. </p> <p>D\u00e9sabonnement</p> <p>Il est important de toujours se d\u00e9sabonner quand on abonne \u00e0 une r\u00e9f\u00e9rence d'objet, car cela peut causer des erreur de r\u00e9f\u00e9rence nulle. Un exemple de cette situation est donn\u00e9 plus-bas.</p> <p>On modifie donc le <code>!#c# Bouton</code> pour qu'il re\u00e7oive \u00e0 sa cr\u00e9ation l'action qu'il devra faire et il abonne l'\u00e9v\u00e9nement du clic \u00e0 l'action \u00e0 accomplir.</p> Classe bouton compl\u00e8te<pre><code>// Bouton g\u00e9n\u00e9rique \npublic class Bouton {   \n\n    public delegate void ActionClicDel ();\n    public event ActionClicDel OnClicBouton;\n\n    // R\u00e9f\u00e9rence vers le delegate utilis\u00e9\n    private ActionClicDel actionBouton;\n\n    public Bouton(ActionClicDel actionClic) {\n        actionBouton = actionClic;\n        OnClicBouton += actionClic;\n    }\n\n    public void Cliquer() {\n        OnClicBouton?.Invoke();\n    }\n}\n</code></pre> <p>\u00c0 la cr\u00e9ation des boutons on lui passe la m\u00e9thode \u00e0 appeler.</p> Programme de test des boutons<pre><code>public class Programme {\n    public static void Main(string [] args) {\n        Compteur cpt = new Compteur;\n        Bouton increment = new Bouton(cpt.Incrementer);\n        Bouton decrement = new Bouton(cpt.Decrementer);\n\n        increment.Cliquer();\n        increment.Cliquer();\n        Console.WriteLine(\"Apr\u00e8s 2 incr\u00e9ments le compteur vaut \" + cpt.Valeur);\n\n        decrement.Cliquer();\n        Console.WriteLine(\"Apr\u00e8s 1 d\u00e9cr\u00e9ment le compteur vaut \" + cpt.Valeur);\n\n        Console.ReadKey();       // Pause pour qu'on puisse lire...\n    }\n}\n</code></pre> <p>Pour le d\u00e9sabonnement, cela doit \u00eatre fait \u00e0 la suppression du compteur. Supprimer le bouton n'a pas d'impact sur le compteur. Par contre, avec la v\u00e9rification nulle (?) on ne risque pas d'erreur, seulement un peu de perte de m\u00e9moire. Pour ajouter la suppression, <code>Compteur</code> devra avoir une visibilit\u00e9 sur <code>Bouton</code> ce qui est \u00e0 \u00e9viter ! Donc nous ne ferons pas la suppression (nous verrons un autre exemple plus tard o\u00f9 nous pouvons le g\u00e9rer). </p>"},{"location":"programmer/evenements/#types-delegues-de-system","title":"Types d\u00e9l\u00e9gu\u00e9s de <code>System</code>","text":"<p>L'espace de nom <code>System</code> propose deux types d\u00e9l\u00e9gu\u00e9s g\u00e9n\u00e9riques <code>Action</code> et <code>Func</code>. Les deux acceptent des param\u00e8tres g\u00e9n\u00e9riques. Pour <code>Action</code>, tous les param\u00e8tres g\u00e9n\u00e9riques sont des param\u00e8tres des m\u00e9thodes accept\u00e9s. Pour <code>Func</code>, le premier est un type de retour, tous les autres sont des param\u00e8tres des m\u00e9thodes accept\u00e9s. </p> <pre><code>public delegate void Action();\npublic delegate void Action&lt;T1&gt;(T1 param1);\n...\n\npublic delegate TRes Func&lt;TRes&gt;();\npublic delegate TRes Func&lt;TRes, T1&gt; (T1 param1);\n...\n</code></pre> <p>Les utiliser peut simplifier le d\u00e9veloppement de l'application, car il n'est plus n\u00e9cessaire de d\u00e9finir le d\u00e9l\u00e9gu\u00e9. Par exemple, on peut r\u00e9\u00e9crire notre classe <code>Bouton</code> comme suit, en rempla\u00e7ant notre d\u00e9l\u00e9gu\u00e9 personnalis\u00e9 par <code>Action</code>.</p> Classe bouton avec le d\u00e9l\u00e9gu\u00e9 Action<pre><code>using System;\n\n// Bouton g\u00e9n\u00e9rique \npublic class Bouton {   \n\n    public event Action OnClicBouton;\n\n    // R\u00e9f\u00e9rence vers le delegate utilis\u00e9\n    private Action actionBouton;\n\n    public Bouton(Action actionClic) {\n        actionBouton = actionClic;\n        OnClicBouton += actionClic;\n    }\n\n    public void Cliquer() {\n        OnClicBouton?.Invoke();\n    }\n}\n</code></pre>"},{"location":"programmer/evenements/#unityevent","title":"UnityEvent","text":"<p>Unity d\u00e9finit un d\u00e9l\u00e9gu\u00e9 appel\u00e9 <code>UnityEvent</code> avec des d\u00e9clinaisons qui acceptent jusqu'\u00e0 4 param\u00e8tres (semblable \u00e0 Action). On abonne un objet avec <code>AddListener</code> (plut\u00f4t que +=) et on le d\u00e9sabonne avec <code>RemoveListener</code> (plut\u00f4t que -=). On le d\u00e9clenche aissoavec la m\u00e9thode <code>Invoke</code>. Aucun <code>UnityEvent</code>ne retourne de valeur. De plus, il est possible de les affecter directement dans l'\u00e9diteur.</p> <p>Dans l'utilisation des UnityEvent, on peut lier des objets dont la signature ne correspond pas \u00e0 celle du d\u00e9l\u00e9gu\u00e9 <code>UnityEvent</code> dans les conditions suivantes :</p> <ul> <li>La m\u00e9thode n'accepte aucun param\u00e8tre, ce qui cause les valeurs de l'\u00e9v\u00e9nements \u00e0 \u00eatre ignor\u00e9es.</li> <li>La m\u00e9thode accepte que des param\u00e8tres natifs \u00e0 c#, alors on doit indiquer la valeur pass\u00e9e \u00e0 la m\u00e9thode. Cette valeur sera constante \u00e0 chaque appel de l'\u00e9v\u00e9nement.  </li> </ul>"},{"location":"programmer/evenements/#exemple-complet","title":"Exemple complet","text":"<p>Voici un autre exemple o\u00f9 les \u00e9v\u00e9nements sont utilis\u00e9s. Dans une application de gestion on veut actualiser en temps r\u00e9el le calcul de certaines valeurs \u00e0 partir des valeurs sur une liste (min, max, moyenne...). On utilise alors un syst\u00e8me d'\u00e9v\u00e9nements. Vous trouverez l'exemple dans ce d\u00e9p\u00f4t Git .</p>"},{"location":"programmer/evenements/#forces-et-faiblesses","title":"Forces et faiblesses","text":"<p>La force de la programmation \u00e9v\u00e9nementielle est qu'elle permet une plus grande modularit\u00e9 dans la programmation et r\u00e9duit les d\u00e9pendances dans le code. \u00c9galement, on peut partager une information \u00e0 plusieurs abonn\u00e9s sans effort d'impl\u00e9mentation suppl\u00e9mentaire.</p> <p>La grande faiblesse de la programmation \u00e9v\u00e9nementielle est le d\u00e9bogage, car contrairement \u00e0 la programmation s\u00e9quentielle, la programmation \u00e9v\u00e9nementielle ne permet pas de suivre le flux d'ex\u00e9cution (ordre d'ex\u00e9cution des m\u00e9thodes et instructions) simplement en lisant le code source. Par cons\u00e9quent, suivre le flux d'ex\u00e9cution pour traquer une erreur peut se r\u00e9v\u00e9ler difficile, surtout sans d\u00e9bogueur sp\u00e9cialis\u00e9.</p> <p>On utilise donc la programmation \u00e9v\u00e9nementielle lorsque la gestion des d\u00e9pendances pose un probl\u00e8me. On l'utilise souvent pour remplacer l'anti-pattern Singleton.</p>"},{"location":"programmer/exemple_evenement/","title":"Exemple d'\u00e9v\u00e9nement","text":"<p> Contenus de la page</p> <p>3-4 Patron de conception observateur 3-5 Programmation \u00e9v\u00e9nementielle</p> <p> Temps requis</p> <p>15 minutes</p>"},{"location":"programmer/exemple_evenement/#evenements-pertinents","title":"\u00c9v\u00e9nements pertinents","text":"<p>Conna\u00eetre la m\u00e9canique d'utilisation des \u00e9v\u00e9nements tel que pr\u00e9sent\u00e9 \u00e0 la ![page des \u00e9v\u00e9nements(./evenements.md) est une chose. Savoir quand les utiliser de fa\u00e7on efficace en est une autre. Cette page donne un exemple complet d'utilisation des \u00e9v\u00e9nements pour g\u00e9er une plaque de pression. Prenons la situation de base suivante : lorsque le joueur marche sur la plaque de pression, la plaque s'anime, une porte s'ouvre et une lumi\u00e8re s'allume. </p> <p>Mod\u00e9lisons d'abord ce code sans \u00e9v\u00e9nement :</p> Gestion de la plaque de pression sans \u00e9v\u00e9nement<pre><code>///&lt;summary&gt;\n///G\u00e8re une lumi\u00e8re qui peut s'allumer.\n///&lt;/summary&gt;\n[RequireComponent(typeof(Light))]\npublic class Lumiere : MonoBehaviour \n{\n    [SerializeField, Tooltip(\"Intensite de la lumiere allumee\")]\n    private float intensite;\n\n    public void Allumer()\n    {\n        GetComponent&lt;Light&gt;().intensity = intensite;\n    }\n}\n\n///&lt;summary&gt;\n///G\u00e8re la porte qui peut s'ouvrir.\n///&lt;/summary&gt;\n[RequireComponent(typeof(Animator))]\npublic class Porte : MonoBehaviour \n{  \n    public void Ouvrir() \n    {\n        GetComponent&lt;Animator&gt;().SetTrigger(\"Ouvrir\");\n    }    \n}\n\n///&lt;summary&gt;\n///G\u00e8re la plaque de pression qui d\u00e9clenche les \u00e9v\u00e9nements.\n///&lt;/summary&gt;\n[RequireComponent(typeof(BoxCollider)), RequireComponent(typeof(Animator))]\npublic class PlaquePression : MonoBehaviour\n{\n    [SerializeField, Tooltip(\"Porte \u00e0 ouvrir\")]\n    private Porte porte;\n\n    [SerializeField, Tooltip(\"Lumi\u00e8re \u00e0 allumer\")]\n    private Lumiere lumiere;\n\n    public void OnTriggerEnter(Collider other) \n    {\n        porte.Ouvrir();\n        lumiere.Allumer();\n        GetComponent&lt;Animator&gt;().SetTrigger(\"Appuyee\");\n    }\n}\n</code></pre>  Configuration du script PlaquePression qui fait r\u00e9f\u00e9rence \u00e0 deux GameObject de la sc\u00e8ne <p>On peut observer les \u00e9l\u00e9ments suivants :</p> <ol> <li>Le script <code>PlaquePression</code> d\u00e9clenche uniquement des actions des <code>Portes</code> et des <code>Lumi\u00e8res</code>. </li> <li>L'action sur la porte ou la lumi\u00e8re est toujours la m\u00eame : par exemple, on utilise la m\u00e9thode <code>Ouvrir</code> de <code>Lumi\u00e8re</code>, alors qu'une autre plaque de pression dans le jeu pourrait changer la teinte.</li> <li>Pour faire varier les \u00e9l\u00e9ments impliqu\u00e9s ou l'action, il serait n\u00e9cessaire de faire un nouveau script de plaque pression.</li> </ol> <p>En utilisant les \u00e9v\u00e9nements, nous allons pouvoir r\u00e9\u00e9crire le code pour le rendre modulaire. La r\u00e9\u00e9criture ne n\u00e9cessitera pas de changements dans le code des scripts <code>Porte</code> et <code>Lumi\u00e8re</code>.</p> Gestion de la plaque de pression avec un \u00e9v\u00e9nement<pre><code>///&lt;summary&gt;\n///G\u00e8re la plaque de pression qui d\u00e9clenche les \u00e9v\u00e9nements.\n///&lt;/summary&gt;\n[RequireComponent(typeof(BoxCollider)), RequireComponent(typeof(Animator))]\npublic class PlaquePression : MonoBehaviour\n{\n    // \u00c9v\u00e9nement lorsqu'on appuie sur la plaque\n    public UnityEvent onAppuie;\n\n    public void OnTriggerEnter(Collider other) \n    {\n        onAppuie?.Invoke();\n        GetComponent&lt;Animator&gt;().SetTrigger(\"Appuyee\");\n    }\n}\n</code></pre> <p>Donc maintenant tous les objets qui s'inscriront \u00e0 l'\u00e9v\u00e9nement <code>onAppuie</code> recevront le message de la plaque de pression lorsque celle-ci est activ\u00e9e. On peut faire une ou plusieurs actions et chaque objet est responsable de choisir quelle action il accomplit en r\u00e9action.</p> <p>Il devient donc beaucoup plus simple de r\u00e9utiliser la m\u00eame plaque de pression \u00e0 plusieurs endroits dans le jeu. Si par exemple l'on ajoutait des blocs qui tombent, une roue qui s'active ou un \u00e9l\u00e9ment de UI qui change, on pourrait simplement l'ajouter \u00e0 l'\u00e9v\u00e9nement et s\u00e9lectionner quelle m\u00e9thode s'ex\u00e9cute. L'ajout de tout ces nouveaux objets ne provoque aucun changement dans la classe <code>PlaquePression</code> ce qui indique un couplage faible entre <code>PlaquePression</code> et les objets qui re\u00e7oivent le signal. </p> <p>Remarque : on appelle toujours l'animation de la plaque de fa\u00e7on directe (et non par l'\u00e9v\u00e9nement), car c'est un comportement interne, donc fortement coh\u00e9rent avec le script. Un autre exemple de responsabilit\u00e9 hautement coh\u00e9rent est une plaque de pression qui poss\u00e8de un son \u00e0 jouer.</p>  Configuration du script <code>PlaquePression</code> qui utilise les \u00e9v\u00e9nements, donc on peut mettre le type d'objet que l'on veut."},{"location":"programmer/volume_effets/","title":"Miroir, volume et effets visuels","text":"<p> Contenus de la page</p> <p>4-3 Acc\u00e9der \u00e0 la boucle de jeu pour les mises \u00e0 jour du contr\u00f4le de la simulation</p> <p> Temps requis</p> <p>20 minutes</p> <p>Pour am\u00e9liorer l'aspect visuel d'un jeu, on peut utiliser divers effets comme les miroirs, les effets sur la sc\u00e8ne tel l'intensification des couleurs, les effets de distorsion ou r\u00e9pliquer une cam\u00e9ra antique par exemple. Finalement, on peut aussi red\u00e9finir la fa\u00e7on dont Unity traite l'information visuelle pour un objet.</p> <p>Tous les exemples de ce fascicule sont \u00e9labor\u00e9s \u00e0 partir du Universal Render Pipeline (URP) et non \u00e0 partir du moteur graphique de Unity Core. Votre projet doit donc \u00eatre cr\u00e9\u00e9 avec URP ou vous devez l'ajouter (avec le PackageManager) et convertir correctement les materials d\u00e9j\u00e0 pr\u00e9sents.</p> <p>Convertir les materials</p> <p>On s\u00e9lectionne les materials \u00e0 convertir et on utlise l'action : Edit Rendering Materials Convert Selected Built-in Materials to URP</p>"},{"location":"programmer/volume_effets/#miroir","title":"Miroir","text":"<p>Pour faire un miroir, on doit faire deux manipulations sur le syst\u00e8me. D'abord, il faut ajouter un composant Reflection Probe \u00e0 l'objet qui devra agir comme un miroir. Le composant Reflection Probe permet de d\u00e9finir comment le miroir se comporte. Il faut \u00e9galement modifier le Material de l'objet pour lui donner l'aspect r\u00e9fl\u00e9chissant.</p>"},{"location":"programmer/volume_effets/#reflection-probe","title":"Reflection Probe","text":"<p>Pour le composant Reflection Probe, il faudra modifier les attributs suivants pour que le miroir ait un aspect r\u00e9aliste :</p> <ul> <li> <p>Type : il doit prendre la valeur Realtime pour s'actualiser \u00e0 chaque fois que la boucle de jeu rend un \u00e9cran. La valeur par d\u00e9faut, Baked, permet d'acc\u00e9l\u00e9rer le rendu, mais l'image r\u00e9fl\u00e9chie ne se modifiera pas pendant l'ex\u00e9cution.   En changeant le Type, le champ Refresh Mode devient visible. Pour que le miroir se mettre \u00e0 jour de fa\u00e7on continue pendant l'ex\u00e9cution du jeu, il faut qu'il ait la valeur Every frame.</p> </li> <li> <p>Cubemap Capture Settings :  dans cette section, il faut changer le param\u00e8tre Resolution pour qu'il g\u00e9n\u00e8re un miroir avec la r\u00e9solution que nous souhaitons afficher.</p> </li> </ul> Configuration du component Reflection Probe"},{"location":"programmer/volume_effets/#material","title":"Material","text":"<p>Pour le Material, il faut s\u00e9lectionner le shader de type Universal Render Pipeline/Lit et modifier les valeurs du param\u00e8tre metallic \u00e0 1 et du param\u00e8tre de smothness \u00e0 1. Assurez-vous que le param\u00e8tre Workflow Mode soit r\u00e9gl\u00e9 sur Metallic pour avoir acc\u00e8s \u00e0 tous les param\u00e8tres n\u00e9cessaires.</p> Configuration du material associ\u00e9 au miroir"},{"location":"programmer/volume_effets/#volume-et-effets","title":"Volume et effets","text":"<p>Pour modifier le visuel d'un jeu, on peut appliquer des effets apr\u00e8s le rendu visuel, ce que l'on appelle post processing. Ces effets sont calcul\u00e9s apr\u00e8s l'application des animations et des shaders, mais avant l'affichage \u00e0 l'utilisateur. Ceux-ci ne modifient pas les meshes et n'ont pas d'impact sur l'engin physique. Les effets sont appliqu\u00e9s \u00e0 une zone appel\u00e9 Volume \u00e0 l'aide de surcharge du Volume Profile</p>"},{"location":"programmer/volume_effets/#volume","title":"Volume","text":"<p>Les Volume s'ajoute comme composant d'un Game object. On utilise un Game object vide afin de correctement organiser le projet. Le composant Volume comporte quatre param\u00e8tres \u00e0 ajuster :</p> <ul> <li> <p>Mode : d\u00e9termine si le Volume s'applique \u00e0 l'int\u00e9gralit\u00e9 de la sc\u00e8ne (Global) ou \u00e0 une partie de la sc\u00e8ne (Local). Dans le cas o\u00f9 le Volume s'applique \u00e0 une partie de la sc\u00e8ne, il faut pr\u00e9ciser celle-ci en ajoutant un BoxCollider au Game object. Les limites du BoxCollider fixent les limites du Volume.</p> </li> <li> <p>Weight et Priority : d\u00e9termine la pr\u00e9pond\u00e9rance des effets si un m\u00eame objet se retrouve dans plusieurs Volume. \u00c9videmment, si l'on utilise qu'un seul Volume, il n'est pas n\u00e9cessaire de modifier ces valeurs.</p> </li> <li> <p>Profile : contient un asset de type Volume Profile qui d\u00e9termine les effets appliqu\u00e9s dans le Volume. Le bouton New permet de cr\u00e9er un nouvel asset de ce type.</p> </li> </ul> Configuration du volume pour y int\u00e9grer des effets visuels."},{"location":"programmer/volume_effets/#effets","title":"Effets","text":"<p>Les effets sont d\u00e9terminer par le Volume Profile attach\u00e9 au Volume. On peut modifier le Volume Profile directement dans l'inspecteur du Volume. Pour ajouter un nouvel effet, on ajoute une surcharge avec le bouton Add Override. </p> <p>Chaque effet peut \u00eatre activ\u00e9 ou d\u00e9sactiv\u00e9 \u00e0 l'aide de la case \u00e0 cocher pr\u00e8s du nom. En cliquant sur la bord de titre de l'effet, on peut modifier sa configuration. La liste compl\u00e8te des effets  peut \u00eatre retrouv\u00e9e sur le site d'Unity (version 17 de URP).</p> <p>Voici un aper\u00e7u de quelques effets.</p> Nom de l'effet Changement visuel Bloom Ajoute un halo autour des \u00e9l\u00e9ments lumineux qui augmente l'apparence de luminosit\u00e9. Color Adjustment Modifie le rendu des couleurs (teinte et saturation). Depth of Field Applique un effet qui simule des \u00e9l\u00e9ments hors focus \u00e0 une certaine distance de la cam\u00e9ra. Film Grain Simule du grain de cam\u00e9ra que l'on retrouve sur les vieilles cam\u00e9ra. Lens Distorsion Simule la d\u00e9formation par une lentille de cam\u00e9ra. Motion Blur Simule le flou caus\u00e9 par une cam\u00e9ra r\u00e9elle qui bouge plus vite que le temps d'exposition. Vignette Simule l'att\u00e9nuation noire que l'on peut remarquer sur le bord de vieille cam\u00e9ra. White Balance Change la d\u00e9finition de la couleur blanc, ce qui change la fa\u00e7on dont toutes les couleurs sont affich\u00e9es."}]}