{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Le guide","text":"<p>L\u2019analyse et la conception de lgociels est un processus long, complexe et divis\u00e9 en plusieurs \u00e9tapes afin de pouvoir traiter efficacement la grande quantit\u00e9 d\u2019information pertinente au d\u00e9veloppement d\u2019un syst\u00e8me. Dans chacune des \u00e9tapes, les fonctionnalit\u00e9s et les donn\u00e9es du syst\u00e8mes sont consid\u00e9r\u00e9es sous un nouvel angle. Comme mentionn\u00e9 dans plusieurs manuels de conception de logiciels, l\u2019\u00e9l\u00e9ment le plus important de la conception demeure la description textuelle. Cependant, celle-ci \u00e0 des limites, particuli\u00e8rement au niveau de la synth\u00e8se d\u2019information de d\u00e9pendances (temporelles ou fonctionnelles) et l\u2019utilisation de repr\u00e9sentations graphiques permet de bien repr\u00e9senter ces informations.</p> <p>Le pr\u00e9sente guide se veut une pr\u00e9sentation des normes \u00e0 utiliser pour obtenir un diagramme et non un manuel pr\u00e9sentant les techniques de la conception de logiciels. Quelques exemples d\u2019applications \u00e0 partir de situations r\u00e9elles sont tout de m\u00eame pr\u00e9sent\u00e9s pour aider \u00e0 contextualis\u00e9 l\u2019utilisation des diff\u00e9rentes notations. Des 13 types de diagramme UML, seulement 5 sont pr\u00e9sent\u00e9s dans ce guide, les 5 qui sont les plus appropri\u00e9s dans un cours de conception logiciel de niveau coll\u00e9gial. En plus de ces 5 diagrammes, le diagramme d\u2019entit\u00e9-relation, toujours tr\u00e8s utilis\u00e9 dans le domaine de la mod\u00e9lisation des bases de donn\u00e9es relationnelles, et la notation d'algorithme (diagramme de flux et pseudo-code) sont aussi pr\u00e9sent\u00e9s. Les diagrammes couverts dans ce guide sont :</p> <ul> <li>Diagramme de flux de donn\u00e9es</li> <li>Diagramme de classe</li> <li>Diagramme d\u2019entit\u00e9-relation</li> <li>Diagramme de classes de conception</li> <li>Diagramme d\u2019\u00e9tats-relations</li> <li>Diagramme des cas d\u2019utilisation</li> <li>Diagramme de s\u00e9quence syst\u00e8me</li> </ul>"},{"location":"#pourquoi-ce-guide-au-collegial","title":"Pourquoi ce guide au coll\u00e9gial ?","text":"<p>L\u2019une des difficult\u00e9s dans l\u2019enseignement de l\u2019informatique est la transmission des id\u00e9es derri\u00e8re les nombreuses abstractions utilis\u00e9es. Il nous arrive tr\u00e8s souvent comme enseignant de travailler tr\u00e8s dur afin de vulgariser une id\u00e9e qui est pourtant toute simple. Nous finissons bien souvent \u00e0 gesticuler, reformuler et \u00e9ventuellement esquisser une repr\u00e9sentation graphique. </p> <p> Pour l\u2019\u00e9l\u00e8ve, s\u2019adapter aux diverses repr\u00e9sentations hautement variable (parfois m\u00eame entre les exemples d'une m\u00eame personne) et diverses habitudes de notation repr\u00e9sente un d\u00e9fi.</p> <p> Pour les enseignantes et les enseignants, ce guide se veut une r\u00e9f\u00e9rence rapide plut\u00f4t que d'avoir \u00e0 rechercher dans divers livres ou normes exhaustives qui propose beaucoup plus que ce qui est n\u00e9cessaire lors des apprentissages au coll\u00e9gial.</p>"},{"location":"#droits-et-distribution","title":"Droits et distribution","text":"<p>Tout le mat\u00e9riel de ce site (sauf mention contraire) est sous licence Creative Commons 4.0 avec obligation d'attribution, interdiction de r\u00e9utilisation \u00e0 des fins commerciales et partage dans les m\u00eames conditions.</p> <p>   Alexandre Ouellet | 2024</p>"},{"location":"dcu-banque/","title":"Banque de d\u00e9pannage","text":"<p>Mon diagramme ressemble \u00e0 un spaghetti. Que puis-je faire ?</p> <ul> <li> Enlever les relations inutiles. Un include ou un extend qui permet d\u2019inclure un seul autre cas particulier peut \u00eatre simplifi\u00e9 et int\u00e9gr\u00e9 directement dans la description du CU.</li> <li> Enlever des informations redondantes ou qui n\u2019ont pas un apport significatif \u00e0 la compr\u00e9hension de la structure du syst\u00e8me. Si un grand nombre de CU ont tous une relation de type include qui pointe vers le m\u00eame CU (par exemple, 20 CU demandent d\u2019\u00eatre pr\u00e9alablement authentifi\u00e9s), il n\u2019est pas tr\u00e8s pertinent d\u2019indiquer ces relations sur le diagramme. On peut simplement prendre la section des pr\u00e9conditions ou des postconditions pour indiquer l\u2019information. Dans le cas d\u2019une gestion d\u2019erreur, on peut simplement omettre l\u2019information sur le diagramme et l\u2019indiquer comme sc\u00e9nario d\u2019exception dans la description de chaque CU.</li> <li>R\u00e9organiser les acteurs afin de les rapprocher des cas d\u2019utilisation qui leur sont associ\u00e9s.</li> <li>V\u00e9rifier s\u2019il y a une relation d\u2019h\u00e9ritage entre des acteurs et utiliser cette relation pour repr\u00e9senter moins de liens sur le diagramme.</li> </ul> <p>Je ne sais pas si je dois utiliser include ou extend</p> <ul> <li> Si vous pouvez nommer dans quelles conditions le cas se r\u00e9alise, alors il s\u2019agit probablement d\u2019un include, autrement il s\u2019agit probablement d\u2019un extend.</li> </ul> <p>J\u2019ai termin\u00e9 mon diagramme et j\u2019ai presque pas / aucune relation include ou extend. Est-ce correct ?</p> <ul> <li> Oui, les relations entre CU sont relativement rares et chercher \u00e0 en cr\u00e9er artificiellement am\u00e8ne souvent \u00e0 s\u2019\u00e9loigner du besoin r\u00e9el du client. Le principal effort de la description d\u2019un syst\u00e8me se fait dans la description textuelle des CU et non dans l\u2019\u00e9laboration du diagramme des cas d\u2019utilisation.</li> </ul>"},{"location":"dcu-norme/","title":"Normes du diagramme de classes","text":"<p>\u00c9tape du d\u00e9veloppement</p> <p> Analyse</p> <p>Standard de notation</p> <p>UML 2.5</p> <p>Nom anglais</p> <p>Use case diagram</p>"},{"location":"dcu-norme/#systeme-et-acteurs","title":"Syst\u00e8me et acteurs","text":"<p>Un diagramme des cas d\u2019utilisation (DCU) pr\u00e9sente les entit\u00e9s actrices du syst\u00e8me et les relie aux cas d\u2019utilisation qu\u2019ils peuvent r\u00e9aliser. La base du diagramme est un grand rectangle qui repr\u00e9sente le syst\u00e8me en lui-m\u00eame. Dans le rectangle, les diff\u00e9rents cas d\u2019utilisation sont plac\u00e9s dans des ovales. Selon la norme Uml 2.5, le rectangle peut \u00eatre omis, mais il est quand m\u00eame sugg\u00e9r\u00e9 de le repr\u00e9senter.</p> Repr\u00e9sentation du syst\u00e8me et des CU dans un DCU <p>Les entit\u00e9s actrices humaines sont repr\u00e9sent\u00e9es par des bonshommes allumettes situ\u00e9s de part et d\u2019autre du syst\u00e8me. La position des entit\u00e9 actrices est r\u00e9gie par les r\u00e8gles suivantes :</p> <ul> <li>Les entit\u00e9s actrices primaires sont situ\u00e9s \u00e0 gauche du syst\u00e8me ;</li> <li>Les entit\u00e9s actrices secondaires sont situ\u00e9s \u00e0 droite du syst\u00e8me ;</li> <li>Les parties prenantes ne sont pas repr\u00e9sent\u00e9es, car elles ne r\u00e9alisent pas de cas d\u2019utilisations.</li> </ul> Repr\u00e9sentation des acteurs dans un DCU <p>Lorsqu\u2019une entit\u00e9 actrice peut r\u00e9aliser l\u2019un des cas d\u2019utilisation, un trait plein relie l\u2019entit\u00e9 actrice et le cas d\u2019utilisation. Un m\u00eame cas d\u2019utilisation peut \u00eatre associ\u00e9 \u00e0 plusieurs entit\u00e9s actrices s\u2019il peut \u00eatre r\u00e9alis\u00e9 par plusieurs d\u2019entre elles.</p>"},{"location":"dcu-norme/#heritage-dacteurs","title":"H\u00e9ritage d'acteurs","text":"<p>On retrouve aussi une relation d\u2019h\u00e9ritage d\u2019acteurs qui signifie qu\u2019un acteur (enfant) peut ex\u00e9cuter tous les cas d\u2019utilisation d\u2019un autre acteur (parent). Cette relation est repr\u00e9sent\u00e9e par une fl\u00e8che avec une t\u00eate vide qui partde l\u2019entit\u00e9 enfant vers l\u2019entit\u00e9 parent.</p> Fl\u00e8che d\u2019h\u00e9ritage d\u2019acteur <p>Exemple : mod\u00e9lisation d'un syst\u00e8me de gestion d'une \u00e9cole</p> <p>Dans la mod\u00e9lisation (partielle) d\u2019un syst\u00e8me de gestion d\u2019une \u00e9cole (semblable au syst\u00e8me Omnivox), on retrouve les CU suivants :</p> <ul> <li>Ajouter une nouvelle \u00e9valuation ;</li> <li>Remettre une \u00e9valuation ;</li> <li>Saisir les r\u00e9sultats d\u2019une \u00e9valuation ;</li> <li>Consulter les notes pour un cours ;</li> <li>G\u00e9rer les acc\u00e8s.</li> </ul> <p>On retrouve aussi les acteurs suivants :</p> <ul> <li>Personne \u00e9tudiante ;</li> <li>Personne enseignante ;</li> <li>Responsable de la coordination d\u00e9partementale (qui est une personne enseignante) ;</li> <li>Personne administratrice du syst\u00e8me.</li> </ul> <p> Exemple d\u2019acteurs et de cas d\u2019utilisation </p> <p>Sur le pr\u00e9c\u00e9dent diagramme, on peut observer les \u00e9l\u00e9ments suivants :</p> <ol> <li>Les personnes \u00e9tudiantes, personnes enseignantes et personnes responsables de la coordination d\u00e9partementale sont des acteurs op\u00e9rationnels (primaires). Les personnages qui les repr\u00e9sentent sont \u00e0 gauche de la bo\u00eete qui symbolise le syst\u00e8me.</li> <li>Les personnes administrant le syst\u00e8me sont des acteurs tactiques (secondaires). Ils sont repr\u00e9sent\u00e9s \u00e0 droite de la bo\u00eete qui symbolise le syst\u00e8me.</li> <li>La personne responsable de la coordination d\u00e9partementale h\u00e9rite de l\u2019acteur \u00ab personne enseignante \u00bb, car il s\u2019agit d\u2019une personne enseignante avec des responsabilit\u00e9s suppl\u00e9mentaires.</li> <li>Les personnes \u00e9tudiantes peuvent remettre une \u00e9valuation et consulter les notes pour un cours qu\u2019elles suivent.</li> <li>Les personnes enseignantes peuvent ajouter une nouvelle \u00e9valuation ou saisir les r\u00e9sultats d\u2019une \u00e9valuation.</li> <li>Les personnes responsables de la coordination d\u00e9partementale et les personnes administrant le syst\u00e8me peuvent toutes deux g\u00e9rer les acc\u00e8s. Si l\u2019ex\u00e9cution du cas pr\u00e9voit des droits diff\u00e9rents dans la gestion des r\u00f4les, cette diff\u00e9rence est explicit\u00e9e au niveau des descriptions des cas.</li> </ol>"},{"location":"dcu-norme/#relations-entre-les-cas-dutilisation","title":"Relations entre les cas d'utilisation","text":"<p>Les cas d\u2019utilisations peuvent \u00eatre li\u00e9s entre eux par deux types de relations. Ces relations sont :</p> <ul> <li>Extend : indique que le comportement d\u2019un cas d\u2019utilisation peut \u00eatre \u00e9tendu par un autre cas d\u2019utilisation. L\u2019endroit o\u00f9 l\u2019extension peut se produire est pr\u00e9sent\u00e9 par des points d\u2019extension. Le CU dont le comportement est modifi\u00e9 ne sait pas que son comportement est modifi\u00e9.</li> <li>Include : indique que la r\u00e9alisation d\u2019un cas d\u2019utilisation peut demander la r\u00e9alisation d\u2019un autre CU. La description du CU qui en inclut un autre sp\u00e9cifie les conditions de r\u00e9alisation.</li> </ul> <p>Les cas d\u2019utilisation peuvent d\u00e9finir des points d\u2019extension qui sont des op\u00e9rations (\u00e9tapes) du CU auxquelles il est possible d\u2019ajouter plus de sc\u00e9narios alternatifs que ce qui est pr\u00e9cis\u00e9 dans la description du cas d\u2019utilisation.</p> <p>On peut utiliser la relation include dans deux contextes :</p> <ol> <li>Une op\u00e9ration est commune \u00e0 plusieurs CU : on d\u00e9place cette op\u00e9ration dans un nouveau CU et chacun des CU qui l\u2019utilisent include le nouveau CU.</li> <li>Un CU est tr\u00e8s complexe, alors on le d\u00e9compose en plus petits CU et il include chacune des parties cr\u00e9\u00e9es.</li> </ol> Mise en oeuvre de la relation extend Mise en oeuvre de la relation include (extraction d\u2019un comportement commun) Mise en oeuvre de la relation include (s\u00e9paration d\u2019un CU complexe) <p>Bonnes pratiques</p> <p>L\u2019utilisation des relations, en particulier include, permet de simplifier l\u2019\u00e9criture des descriptions des CU. Cependant, une utilisation trop importante de ces relations sur le DCU risque d\u2019en diminuer la lisibilit\u00e9 et donc l\u2019utilit\u00e9.</p> <p>Il faut donc, lorsqu\u2019on pr\u00e9pare le DCU, se limiter \u00e0 illustrer uniquement les relations qui apportent une information suppl\u00e9mentaire significative. Par exemple, indiquer qu\u2019un CU qui traite des paiements inclus le CU de paiement par carte de cr\u00e9dit est tout \u00e0 fait ad\u00e9quat. Par contre, indiquer pour 80% des CU qu\u2019ils incluent comme op\u00e9ration pr\u00e9alable le CU de v\u00e9rifier l\u2019authentification alourdit grandement la notation sans apporter de nouvelle information significative et est, par cons\u00e9quent, une pratique \u00e0 \u00e9viter.</p> <p>La distinction entre include et extends</p> <p>Pareil : la relation include et la relation extend servent toutes deux \u00e0 repr\u00e9senter la possibilit\u00e9 de r\u00e9aliser un CU dans un autre CU.</p> <p>Diff\u00e9rent : dans la relation include, la description du CU qui en inclut un autre pr\u00e9cise dans quelles conditions le cas inclus se r\u00e9alise. La relation extend le CU inclut se greffe au cas principal par un des points d\u2019extension du CU principal. La description du cas principal ne pr\u00e9cise pas quand le CU inclus se r\u00e9alise.</p> <p>Exemple : relations entre CU dans le syst\u00e8me de gestion d'une \u00e9cole</p> <p> Mise en oeuvre des relations include et extend </p> <p>Dans la mod\u00e9lisation d\u2019un syst\u00e8me de gestion d\u2019\u00e9cole tel que pr\u00e9sent\u00e9 \u00e0 l\u2019exemple 3.1, on peut utiliser la relation include dans la situation suivante :</p> <ol> <li>Envoyer un message lorsqu\u2019un nouveau travail ou une nouvelle note d\u2019\u00e9valuation est disponible. Comme les deux CU r\u00e9alisent la m\u00eame op\u00e9ration, on peut donc la d\u00e9finir dans un CU qui lui est propre.</li> </ol> <p>On peut utiliser la relation extend dans la situation suivante :</p> <ol> <li>Ajouter une ressource \u00e0 une \u00e9valuation. Comme on ne peut pas d\u00e9finir tous les types de documents ou ressources que l\u2019on peut joindre \u00e0 une \u00e9valuation (document word, excel, powerpoint, pdf...), on peut ouvrir le cas \u00ab\u00a0Ajouter une \u00e9valuation\u00a0\u00bb en lui d\u00e9finissant le point d\u2019extension \u00ab\u00a0Ajouter une ressource\u00a0\u00bb. Par la suite, on pourra d\u00e9finir un cas d\u2019utilisation pour chaque type de ressource que l\u2019on trouvera pertinent de joindre \u00e0 une \u00e9valuation. L\u2019ajout de nouveau type de ressource ne modifiera pas le cas de base d\u2019\u00ab\u00a0Ajouter une \u00e9valuation\u00a0\u00bb.</li> </ol>"},{"location":"dss-banque/","title":"Banque de d\u00e9pannage","text":"<p>J\u2019ai plusieurs entit\u00e9 actrices humaines sur mon diagramme, est-ce correct ?</p> <p>Peut-\u00eatre que oui, peut-\u00eatre que non. Le DSS sert \u00e0 indiquer des interactions entre le syst\u00e8me et des entit\u00e9 actrices. Le risque \u00e0 avoir plusieurs entit\u00e9s actrices humaines sur un m\u00eame diagramme est de repr\u00e9senter les interactions entre les entit\u00e9s actrices. Deux \u00e9l\u00e9ments \u00e0 observer pour r\u00e9pondre \u00e0 cette question sont :</p> <ol> <li>Chaque entit\u00e9 actrice doit minimalement interagir directement une fois avec le syst\u00e8me ind\u00e9pendamment des autres entit\u00e9s.</li> <li>Il ne doit pas y avoir de message allant d\u2019une entit\u00e9 humaine vers une autre entit\u00e9 humaine. Il faut aussi noter qu\u2019il est normal d\u2019avoir plusieurs entit\u00e9 actrices sous-syst\u00e8me dans un m\u00eame DSS.</li> </ol> <p>Est-ce que je dois repr\u00e9senter toutes les \u00e9tapes du sc\u00e9nario principal, tous les sc\u00e9narios d\u2019extension et tous les sc\u00e9narios d\u2019exception sur mon DSS ?</p> <p>Non, repr\u00e9senter toutes les \u00e9tapes m\u00e8ne dans la plupart des cas \u00e0 un diagramme surcharg\u00e9 et difficile \u00e0 comprendre, ce qui est contraire \u00e0 la raison m\u00eame de faire un diagramme.</p> <p>Normalement, toutes les \u00e9tapes du sc\u00e9nario principal sont repr\u00e9sent\u00e9es, la majorit\u00e9 des extensions devraient l\u2019\u00eatre \u00e9galement. Les extensions complexes (plus de 5 \u00e9tapes) pourraient faire l\u2019objet d\u2019un autre diagramme ou m\u00eame d\u2019un autre CU.</p> <p>Pour les extensions ou les exceptions, on \u00e9vite de repr\u00e9senter sur le DSS celles qui :</p> <ul> <li>Peuvent se produire \u00e0 tout moment, car on ne peut pas les inclure \u00e0 un endroit pr\u00e9cis dans le diagramme.</li> <li>Provoque la fin du CU parce qu\u2019il s\u2019agit d\u2019une erreur irr\u00e9cup\u00e9rable, car elles n\u2019apportent pas d\u2019information sur l\u2019ex\u00e9cution du CU.</li> <li>Li\u00e9 \u00e0 une erreur d\u2019entr\u00e9e de donn\u00e9e (comme un mauvais format de date), car elles ne changent pas le d\u00e9roulement du CU.</li> </ul>"},{"location":"dss-norme/","title":"Diagrammes de s\u00e9quence syst\u00e8me","text":"<p>\u00c9tape du d\u00e9veloppement</p> <p> Analyse</p> <p>Standard de notation</p> <p>UML 2.5</p> <p>Nom anglais</p> <p>System sequence diagram, Sequence diagram <sup>1</sup></p> <p>Dans la description d\u00e9taill\u00e9e des cas d\u2019utilisation, on retrouve une description textuelle des messages entre les acteurs, le syst\u00e8me et les sous-syst\u00e8mes. Il peut \u00eatre utile de mod\u00e9liser graphiquement le s\u00e9quen\u00e7age de ces op\u00e9rations afin d\u2019obtenir une meilleure vue d\u2019ensemble sur la circulation des informations entre les acteurs et le syst\u00e8me. C\u2019est ce que l\u2019on appelle les diagrammes de s\u00e9quence syst\u00e8me (DSS).</p> <p>Important !</p> <p>Il faut se rappeler que le but d\u2019un DSS n\u2019est pas de remplacer la description textuelle d\u2019un CU, mais bien de faciliter la compr\u00e9hension du CU en fournissant une vue d\u2019ensemble des op\u00e9rations cl\u00e9s.</p> <p>Dans cette mod\u00e9lisation, on consid\u00e8re que le syst\u00e8me agit selon un principe appel\u00e9 la bo\u00eete noire. On repr\u00e9sente donc uniquement les commandes pass\u00e9es aux syst\u00e8mes, les donn\u00e9es entrantes et les messages retourn\u00e9s par le syst\u00e8me. Cette mod\u00e9lisation est souvent tr\u00e8s proche de la description textuelle du cas, mais permet d\u2019obtenir une vue d\u2019ensemble des messages du syst\u00e8me.</p> <p>La distinction entre diagramme de s\u00e9quence et diagramme de s\u00e9quence syst\u00e8me</p> <p>Il existe deux situations o\u00f9 les diagrammes de s\u00e9quence peuvent \u00eatre utilis\u00e9s, et dans les deux cas, la notation est sensiblement la m\u00eame. Afin de diff\u00e9rencier les deux types de diagrammes, l\u2019appellation diagramme de s\u00e9quence fait r\u00e9f\u00e9rence au diagramme qui pr\u00e9sente le s\u00e9quen\u00e7age des appels entre des objets du syst\u00e8me.</p> <p>Le diagramme de s\u00e9quence syst\u00e8me pr\u00e9sente le s\u00e9quen\u00e7age des appels entre les acteurs et le syst\u00e8me. C\u2019est ce deuxi\u00e8me type qui est pr\u00e9sent\u00e9 dans cette section.</p>"},{"location":"dss-norme/#entites-actrices-systeme-et-sous-systeme","title":"Entit\u00e9s actrices, syst\u00e8me et sous-syst\u00e8me","text":"<p>Les entit\u00e9s qui participent \u00e0 la r\u00e9alisation des cas d\u2019utilisation sont repr\u00e9sent\u00e9es sous forme d\u2019un trait pointill\u00e9 auquel les messages qu\u2019ils \u00e9mettent ou re\u00e7oivent viennent s\u2019accrocher. Les syst\u00e8mes et sous-syst\u00e8mes sont identifi\u00e9s par une bo\u00eete, alors que les entit\u00e9s actrices sont identifi\u00e9s par des bonshommes allumettes. Sous chaque \u00e9l\u00e9ment est trac\u00e9 une ligne appel\u00e9e \u00ab\u00a0ligne d\u2019instance\u00a0\u00bb (on utilise souvent le terme \u00ab\u00a0ligne de vie\u00a0\u00bb, m\u00eame si ce dernier est incorrect) en pointill\u00e9 de laquelle provient ou s\u2019y termine les messages qui impliquent l\u2019\u00e9l\u00e9ment. Le nom de l\u2019entit\u00e9 est pr\u00e9c\u00e9d\u00e9 du symbole deux points \u00ab\u00a0:\u00a0\u00bb.</p> <p>On pr\u00e9sente les \u00e9l\u00e9ments dans l\u2019ordre suivant sur un DSS :</p> <ol> <li>\u00c0 gauche compl\u00e8tement on retrouve l\u2019entit\u00e9 actrice principale du sc\u00e9nario repr\u00e9sent\u00e9 ;</li> <li>Imm\u00e9diatement \u00e0 la droite de l\u2019entit\u00e9 actrice principale on retourne le syst\u00e8me ;</li> <li>On retrouve ensuite, en ordre d\u2019appel, de la gauche vers la droite, les sous-syst\u00e8mes et les entit\u00e9s actrices secondaires.</li> </ol> \u00c9l\u00e9ment et lignes d\u2019instances des DSS"},{"location":"dss-norme/#messages","title":"Messages","text":"<p>Diff\u00e9rents messages peuvent circuler entre les acteurs et les syst\u00e8mes. Les messages des acteurs vers le syst\u00e8me prennent la forme d\u2019une fl\u00e8che pleine sur laquelle le nom du message est \u00e9crit. Les r\u00e9ponses du syst\u00e8me vers les acteurs prennent la forme d\u2019une fl\u00e8che pointill\u00e9e avec la ou les valeurs retour inscrites sur la fl\u00e8che. Les messages sont nomm\u00e9s avec une terminologie informelle (qui n\u2019est pas li\u00e9e \u00e0 un langage de programmation).</p> <p>Si le message comporte des param\u00e8tres, ceux-ci sont indiqu\u00e9s entre parenth\u00e8ses, toujours en utilisant une terminologie informelle. S\u2019il y a plusieurs param\u00e8tres, ils sont s\u00e9par\u00e9s par une virgule. Si un message ne donne pas lieu \u00e0 une r\u00e9ponse, la fl\u00e8che de r\u00e9ponse est omise.</p> Messages entre une entit\u00e9 actrice et le syst\u00e8me <p>Mod\u00e9lisation du cas d'utilisation \u00ab\u00a0Remettre une \u00e9valuation\u00a0\u00bb</p> <p>Reprenons la situation d\u00e9finie \u00e0 l\u2019exemple ... o\u00f9 l\u2019on mod\u00e9lise un syst\u00e8me de gestion d\u2019une \u00e9cole semblable au syst\u00e8me Omnivox. Le cas mod\u00e9lis\u00e9 est celui o\u00f9 une personne \u00e9tudiante remet une \u00e9valuation.</p> <p>Nom du CU : Remettre une \u00e9valuation</p> <p>Entit\u00e9 actrice principale : personne \u00e9tudiante</p> <p>Pr\u00e9conditions :</p> <ul> <li>La personne \u00e9tudiante est connect\u00e9e au syst\u00e8me.</li> <li>La personne \u00e9tudiante a \u00e9t\u00e9 assign\u00e9e \u00e0 au moins un travail.</li> <li>La personne \u00e9tudiante poss\u00e8de un document qu\u2019elle veut remettre.</li> </ul> <p>Postconditions :</p> <ul> <li>Un fichier a bien \u00e9t\u00e9 t\u00e9l\u00e9vers\u00e9 dans le syst\u00e8me.</li> <li>Un courriel de confirmation a \u00e9t\u00e9 envoy\u00e9 \u00e0 la personne \u00e9tudiante.</li> </ul> <p>Sc\u00e9nario principal</p> <ol> <li>La personne \u00e9tudiante s\u00e9lectionne le travail qu\u2019elle souhaite remettre parmi les travaux qui lui sont assign\u00e9s.</li> <li>Le syst\u00e8me affiche un formulaire de remise de travail.</li> <li>La personne \u00e9tudiante s\u00e9lectionne le fichier \u00e0 remettre.</li> <li>Le syst\u00e8me confirme le t\u00e9l\u00e9versement complet du fichier.</li> <li>La personne confirme la remise du travail.</li> <li>Le syst\u00e8me informe le sous-syst\u00e8me de messagerie d\u2019envoyer une confirmation de remise \u00e0 la personne \u00e9tudiante.</li> <li>Le syst\u00e8me confirme l\u2019enregistrement de la remise.</li> </ol> <p>Voici le Diagramme de s\u00e9quence (DSS) relatif \u00e0 ce cas d\u2019utilisation.</p> <p> Mod\u00e9lisation du cas d\u2019utilisation \u00ab\u00a0Remettre une \u00e9valuation\u00a0\u00bb par DSS </p>"},{"location":"dss-norme/#blocs","title":"Blocs","text":"<p>On peut tenir compte des sc\u00e9narios d\u2019extension et des op\u00e9rations conditionnelles ou r\u00e9p\u00e9t\u00e9es \u00e0 l\u2019aide des blocs. Il existe 3 types de blocs : optionnel, traitement r\u00e9p\u00e9titif et alternatif. Chaque bloc prend la forme d\u2019un encadr\u00e9 avec une vignette d\u2019information en haut \u00e0 gauche qui renseigne sur son type. Chaque bloc peut \u00eatre accompagn\u00e9 d\u2019une paire de crochets pour indiquer des informations sp\u00e9cifiques \u00e0 la situation.</p> <p>Les messages qui sont envoy\u00e9s de fa\u00e7on conditionnelle ou r\u00e9p\u00e9t\u00e9e sont dans le bloc. Si le bloc contient plusieurs zones, celles-ci sont s\u00e9par\u00e9es par une ligne pointill\u00e9e.</p> Blocs dans les DSS <ol> <li>Le bloc optionnel permet de g\u00e9rer la pr\u00e9sence de conditions de garde dans le code. Le bloc est compos\u00e9 d\u2019une seule zone avec une condition de garde. Le code dans le bloc est ex\u00e9cut\u00e9 si la condition de garde est vraie.</li> <li>Le bloc de r\u00e9p\u00e9tition permet de g\u00e9rer des op\u00e9rations r\u00e9p\u00e9t\u00e9es tant qu\u2019une condition est vraie. Le bloc contient une seule zone d\u2019instructions \u00e0 r\u00e9p\u00e9ter.</li> <li>Le bloc alternatif permet de g\u00e9rer plusieurs conditions quelconques et exclusives. Seul le code dans le bloc o\u00f9 la condition est v\u00e9rifi\u00e9e sera ex\u00e9cut\u00e9.</li> </ol> Bloc de traitement optionnel Bloc de traitement r\u00e9p\u00e9titifs Bloc de traitement alternatif <p>Mod\u00e9lisation du CU \u00ab\u00a0Remettre une \u00e9valuation\u00a0\u00bb avec les blocs de traitement</p> <p>Reprenons l\u2019exemple ... et bonifions la description du cas d\u2019utilisation. Le cas mod\u00e9lis\u00e9 est celui o\u00f9 une personne \u00e9tudiante remet une \u00e9valuation. Les \u00e9tapes ajout\u00e9es sont inscrites en rouge.</p> <p>Nom du CU : Remettre une \u00e9valuation</p> <p>Entit\u00e9 actrice principale : personne \u00e9tudiante</p> <p>Pr\u00e9conditions :</p> <ul> <li>La personne \u00e9tudiante est connect\u00e9e au syst\u00e8me.</li> <li>La personne \u00e9tudiante a \u00e9t\u00e9 assign\u00e9e \u00e0 au moins un travail.</li> <li>La personne \u00e9tudiante poss\u00e8de un document qu\u2019elle veut remettre.</li> </ul> <p>Postconditions :</p> <ul> <li>Un fichier a bien \u00e9t\u00e9 t\u00e9l\u00e9vers\u00e9 dans le syst\u00e8me.</li> <li>Un courriel de confirmation a \u00e9t\u00e9 envoy\u00e9 \u00e0 la personne \u00e9tudiante.</li> </ul> <p>Sc\u00e9nario principal</p> <ol> <li>La personne \u00e9tudiante s\u00e9lectionne le travail qu\u2019elle souhaite remettre parmi les travaux qui lui sont assign\u00e9s.</li> <li>Le syst\u00e8me affiche un formulaire de remise de travail.</li> <li>La personne \u00e9tudiante s\u00e9lectionne le fichier \u00e0 remettre.</li> <li>Le syst\u00e8me confirme le t\u00e9l\u00e9versement complet du fichier.</li> <li>La personne \u00e9tudiante r\u00e9p\u00e8te l\u2019\u00e9tape 3 pour chaque fichier suppl\u00e9mentaire \u00e0 remettre.</li> <li>La personne \u00e9tudiante coche la case qui atteste qu\u2019elle a produit elle-m\u00eame le travail et qu\u2019elle a cit\u00e9 les sources utilis\u00e9es ad\u00e9quatement.</li> <li>La personne confirme la remise du travail.</li> <li>Le syst\u00e8me informe le sous-syst\u00e8me de messagerie d\u2019envoyer une confirmation de remise \u00e0 la personne \u00e9tudiante.</li> <li>Le syst\u00e8me confirme l\u2019enregistrement de la remise.</li> </ol> <p>Sc\u00e9nario d\u2019extension :</p> <p>6a La personne \u00e9tudiante souhaite lire la politique de plagiat.</p> <ol> <li>La personne \u00e9tudiante clique sur le lien pour lire la politique de plagiat.</li> <li>Le syst\u00e8me affiche la politique de plagiat.</li> </ol> <p>Voici le DSS relatif \u00e0 ce cas d\u2019utilisation.</p> <p> Mod\u00e9lisation du cas d\u2019utilisation \u00ab\u00a0Remettre une \u00e9valuation\u00a0\u00bb par DSS </p>"},{"location":"dss-norme/#preconditions-et-postconditions","title":"Pr\u00e9conditions et postconditions","text":"<p>On peut repr\u00e9senter les pr\u00e9conditions et les postconditions sur un DSS avec une bo\u00eete aux coins arrondis situ\u00e9e sur la ligne d\u2019instance de l\u2019entit\u00e9 \u00e0 laquelle la condition s\u2019applique. La pr\u00e9sence des pr\u00e9conditions et des postconditions est toutefois optionnelle. Il faut \u00e9viter de surcharger le diagramme, donc elles sont souvent omises lorsqu\u2019elles sont nombreuses.</p> Repr\u00e9sentation des pr\u00e9conditions et des postconditions sur un DSS"},{"location":"dss-norme/#commentaires","title":"Commentaires","text":"<p>Pour apporter des pr\u00e9cisions suppl\u00e9mentaires sur le diagramme, on peut utiliser des commentaires. Ceux-ci prennent la forme de rectangle avec un coin repli\u00e9. Une ligne pointill\u00e9e pointe sur l\u2019\u00e9l\u00e9ment du diagramme auquel le commentaire s\u2019applique. Si le commentaire ne vise pas un \u00e9l\u00e9ment particulier, la ligne est omise. Il est important de limiter les commentaires afin de ne pas saturer le diagramme.</p> Repr\u00e9sentation des commentaires sur un DSS <ol> <li> <p>Il existe aussi un type de diagramme appel\u00e9 diagramme de s\u00e9quence qui est semblable, mais pas identique au diagramme de s\u00e9quence syst\u00e8me. Certaines sources ne font pas la distinction entre les deux types de diagramme.\u00a0\u21a9</p> </li> </ol>"},{"location":"modelisation-objet/","title":"Mod\u00e9lisation objet","text":""},{"location":"systemes/","title":"Mod\u00e9lisation des syst\u00e8mes","text":"<p>Ce dernier chapitre couvrira la mod\u00e9lisation des comportements d\u2019un syst\u00e8me. La mod\u00e9lisation d\u2019un syst\u00e8me se fait dans les premi\u00e8res \u00e9tapes de l\u2019analyse et a pour but d\u2019expliquer les objectifs du syst\u00e8me, ses interactions et ses \u00e9tats. La mod\u00e9lisation du syst\u00e8me r\u00e9pond aux questions \u00ab\u00a0quoi\u00a0\u00bb et \u00ab\u00a0qui\u00a0\u00bb, laissant le \u00ab\u00a0comment\u00a0\u00bb \u00e0 d\u2019autres \u00e9tapes. Elle demande de couvrir plusieurs aspects dont :</p> <ol> <li>La relation des entit\u00e9s actrices avec les cas d\u2019utilisation ;</li> <li>La relation des entit\u00e9s actrices avec le syst\u00e8me dans l\u2019ex\u00e9cution d\u2019un cas d\u2019utilisation particulier ;</li> <li>Les relations entre les objets du domaine ;</li> <li>Les \u00e9tats des objets du syst\u00e8me dans l\u2019ex\u00e9cution du syst\u00e8me ;</li> <li>Les \u00e9tats d\u2019un objet dans l\u2019ex\u00e9cution d\u2019un cas d\u2019utilisation.</li> </ol> <p>La section 3.1 Diagramme des cas d\u2019utilisation d\u00e9crit le premier aspect, soit la relation des entit\u00e9s actrices avec les cas d\u2019utilisation, en utilisant les diagrammes des cas d\u2019utilisation . La seconde section, 3.2 Diagramme de s\u00e9quence syst\u00e8me, pr\u00e9sente le second aspect soit les interactions entre une entit\u00e9 actrice et le syst\u00e8me dans un sc\u00e9nario donn\u00e9.</p> <p>Les trois autres aspects de la mod\u00e9lisation ne sont pas explicitement trait\u00e9s dans ce guide, mais correspondent \u00e0 des cas particuliers de diagrammes pr\u00e9c\u00e9demment couverts. La repr\u00e9sentation des objets du domaine peut se faire avec un diagramme de classe (voir1.1 Diagramme de classes) et la mod\u00e9lisation des \u00e9tats d\u2019un objet dans un syst\u00e8me ou dans l\u2019ex\u00e9cution d\u2019un cas d\u2019utilisation peut se faire avec un diagramme d\u2019\u00e9tats-transitions adapt\u00e9 (voir 2.2 Diagramme d\u2019\u00e9tats-transitions).</p> <p>Il faut se rappeler que l\u2019art\u00e9fact le plus important de la mod\u00e9lisation d\u2019un syst\u00e8me est le texte du document d\u2019analyse. Les diagrammes offrent des repr\u00e9sentations int\u00e9ressantes du syst\u00e8me qui facilitent la compr\u00e9hension de certains aspects, mais qui ne permettent pas d\u2019aller aussi en profondeur que ne le fait la description d\u00e9taill\u00e9e du syst\u00e8me.</p>"},{"location":"base-donnees/bases-donnees/","title":"Bases de donn\u00e9es","text":"<p>Les syst\u00e8mes de bases de donn\u00e9es relationnelles sont de larges syst\u00e8mes permettant de structurer l\u2019information \u00e0 stocker et de la manipuler. Afin d\u2019assurer une gestion optimale de l\u2019information, cette derni\u00e8re est divis\u00e9e en entit\u00e9s, puis entrepos\u00e9e dans des structures pr\u00e9cises et soumises \u00e0 des contraintes d\u2019int\u00e9grit\u00e9. Dans la conception de bases de donn\u00e9es, la composition de chaque structure de donn\u00e9es est pr\u00e9cis\u00e9e. Afin de mod\u00e9liser les bases de donn\u00e9es, deux types de diagrammes sont utilis\u00e9s :</p> <p>Diagramme de classes (DC) : mod\u00e9lise les classes conceptuelles trouv\u00e9es lors de l\u2019analyse. Permet de visualiser les relations entre les diff\u00e9rents types de donn\u00e9es g\u00e9r\u00e9s par le syst\u00e8me sans avoir \u00e0 tenir compte des contraintes d'impl\u00e9mentation. </p> <p>Diagramme entit\u00e9s-relations (DER) : repr\u00e9sente l\u2019impl\u00e9mentation de la base de donn\u00e9es dans un langage propre aux bases de donn\u00e9es. Sur ce diagramme, le travail de normallisation, de typage et la gestion des contraintes de la base de donn\u00e9es est r\u00e9alis\u00e9. Le diagramme s'\u00e9carte du monde r\u00e9el et des donn\u00e9es m\u00e9tiers en int\u00e9grant les contraintes de base de donn\u00e9es.</p>"},{"location":"base-donnees/bases-donnees/#bases-de-donnees-non-relationnelles","title":"Bases de donn\u00e9es non relationnelles","text":"<p>Pour les bases de donn\u00e9es structur\u00e9s sur d'autres paradigmes que les relationnelles (comme les bases de donn\u00e9es NoSQL), les diagrammes de classes peuvent \u00eatre utilis\u00e9s pour repr\u00e9senter les types de donn\u00e9es, mais la notation de DER n'est pas adapt\u00e9 pour leur impl\u00e9mentation.</p>"},{"location":"base-donnees/dc-banque/","title":"Banque de d\u00e9pannage - DC","text":"<p>Est-ce que que ma donn\u00e9e est un attribut d\u2019une classe ou une classe \u00e0 part enti\u00e8re ?</p> <p>Il arrive parfois qu\u2019on se demande si une valeur est un attribut ou une classe \u00e0 part enti\u00e8re. Trois questions sont \u00e0 se poser pour prendre la bonne d\u00e9cision :</p> <ol> <li>Si j\u2019utilise une classe pour g\u00e9rer cette donn\u00e9e, est-ce qu\u2019elle contiendrait qu\u2019un seul attribut ? Si c\u2019est le cas, alors la donn\u00e9e est fort probablement un attribut. Il peut arriver que dans le passage dans les formes normales on r\u00e9alise une table qui contienne seulement une colonne et sa cl\u00e9 primaire, mais il faut \u00e9viter d\u2019essayer de prendre de l\u2019avance dans le raisonnement.</li> <li>Si j\u2019utilise un attribut pour g\u00e9rer cette donn\u00e9e, est-ce qu\u2019il contiendrait plusieurs valeurs ? Prenons l\u2019exemple d\u2019une adresse : \u00ab 123 rue Notre-Dame \u00bb. Valider que l\u2019adresse est bonne demande beaucoup de travail, car le champ contient 3 donn\u00e9es : le num\u00e9ro civique (123), le type d\u2019infrastructure routi\u00e8re (rue) et le nom de la rue (Notre-Dame). C\u2019est un cas o\u00f9 l\u2019on souhaiterait s\u00e9parer en trois champs une m\u00eame donn\u00e9e.</li> <li>Est-ce que la donn\u00e9e est en relation avec d\u2019autres ? Par exemple, un blog qui offre plusieurs articles et chaque article est accompagn\u00e9 d\u2019une \u00e9tiquette. La classe \u00ab \u00c9tiquette \u00bb poss\u00e8de un seul attribut : le nom de l\u2019\u00e9tiquette. Cependant, tous les articles pointent vers la m\u00eame \u00e9tiquette. Dans ce cas, faire une classe pour g\u00e9rer une donn\u00e9e est appropri\u00e9.</li> </ol> <p>Est-ce que je dois trouver toutes les superclasses (h\u00e9ritages) possibles ?</p> <p>D\u00e9finitivement pas ! Il existe un danger qui s\u2019appelle la surconception o\u00f9 trop de d\u00e9tails sont g\u00e9r\u00e9s \u00e0 l\u2019\u00e9tape de l\u2019analyse ou la conception. Cela cr\u00e9e des difficult\u00e9s plus tard dans l\u2019impl\u00e9mentation et allourdit grandement le processus d'analyse sans gain r\u00e9el. Les relations importantes doivent \u00eatre identifi\u00e9es, mais la s\u00e9mantique { title=\"terme qui appara\u00eet sur une fl\u00e8che\" } de la relation est plus importante que la nature de la fl\u00e8che elle-m\u00eame.</p>"},{"location":"base-donnees/dc-exemple/","title":"Exemple complet d'application du DC","text":""},{"location":"base-donnees/dc-exemple/#le-pret-dembarcations","title":"Le pr\u00eat d\u2019embarcations","text":"<p>Mise en situation </p> <p>Une entreprise de vill\u00e9giature pr\u00eate des embarcations \u00e0 des vacanciers. Chaque embarcation poss\u00e8de un nom, un num\u00e9ro s\u00e9quentiel, une occupation minimale et une occupation maximale. Avec les embarcations, des vestes de flottaison individuelles (qui poss\u00e8dent une taille et une date d\u2019expiration) et des pagaies (du type concordant avec l\u2019embarcation) sont lou\u00e9es. Chaque produit lou\u00e9 poss\u00e8de un co\u00fbt de location horaire. </p> <p>Les vacanciers doivent s\u2019enregistrer en laissant leur nom, leur adresse et un num\u00e9ro de t\u00e9l\u00e9phone. Le syst\u00e8me enregistre la date de prise de possession, de retour pr\u00e9vu et de retour r\u00e9el d\u2019une embarcation. Il n\u2019est pas possible de louer des pagaies ou des vestes de flottaison sans louer une embarcation.</p> <p>L\u2019analyse de cette situation est repr\u00e9sent\u00e9e sur le DC ci-dessous.</p> Mod\u00e9lisation de la base de donn\u00e9es du syst\u00e8me de locations d'embarcations <p>On remarque les \u00e9l\u00e9ments suivants sur le diagramme :</p> <ol> <li>Il y a r\u00e9p\u00e9tition de l\u2019attribut coutHoraire dans les classes VesteFlotaison, Embarcation et Pagaie. C\u2019est correct de ne pas extraire ces donn\u00e9es imm\u00e9diatement, lors du passage des formes normales les donn\u00e9es communes seront isol\u00e9es.</li> <li>La location est centrale et aucune donn\u00e9e qui lui est li\u00e9e n\u2019 est repr\u00e9sent\u00e9e par des attributs. C\u2019est correct de repr\u00e9senter la situation ainsi, car lors de l\u2019analyse des multiplicit\u00e9s, le choix des cl\u00e9s \u00e9trang\u00e8res sera fait et les attributs ou les tables d\u2019association seront cr\u00e9\u00e9s \u00e0 ce moment.</li> <li>La contrainte unique du num\u00e9ro s\u00e9quentielle permet de distinguer les embarcations. La distinction n\u2019est pas demand\u00e9e pour les vestes de flottaison et les pagaies.</li> <li>La contrainte qu\u2019une location doit absolument contenir une embarcation est repr\u00e9sent\u00e9e dans la multiplicit\u00e9 de 1..n entre Location et Embarcation.</li> <li>Le fait qu\u2019une embarcation requiert un type particulier de pagaie est not\u00e9 par la relation \u00ab\u00a0requis par\u00a0\u00bb.</li> <li>\u00c0 cette \u00e9tape, aucun champ n\u2019a \u00e9t\u00e9 marqu\u00e9 comme {id}, car toutes les tables n\u2019ont pas encore \u00e9t\u00e9 identifi\u00e9es. Marquer les cl\u00e9s primaires arrive \u00e0 l'\u00e9tape suivante,  la conception.</li> </ol> <p>Bonnes pratiques</p> <p>Il aurait \u00e9t\u00e9 possible et valide de pr\u00e9senter un plus haut niveau de d\u00e9tails dans la premi\u00e8re analyse. Avec l\u2019exp\u00e9rience, il devient possible d\u2019anticiper quelques \u00e9tapes et d\u00e9cisions futures. Par contre, en commen\u00e7ant il est pr\u00e9f\u00e9rable d\u2019\u00eatre moins efficace, mais plus pr\u00e9cis en dupliquant l\u2019information \u00e0 l\u2019occasion (comme avec l\u2019attribut coutHoraire) plut\u00f4t que de chercher \u00e0 gagner du temps et prendre de mauvaises d\u00e9cisions.</p>"},{"location":"base-donnees/dc-norme/","title":"Normes du diagramme de classes","text":"<p>\u00c9tape de la conception</p> <p> Analyse</p> <p>Standard de notation</p> <p>UML 2.5</p> <p>Nom anglais</p> <p>Class diagram<sup>1</sup></p> <p>On utilise un mod\u00e8le objet pour repr\u00e9senter les entit\u00e9s qui constitueront la base de donn\u00e9es. Ce mod\u00e8le, souvent employ\u00e9 lors de la phase d\u2019analyse, permet de synth\u00e9tiser l\u2019information d\u2019un \u00e9nonc\u00e9 de besoins en un diagramme sans se pr\u00e9occuper des sp\u00e9cificit\u00e9s li\u00e9es \u00e0 l\u2019impl\u00e9mentation d\u2019une base de donn\u00e9es. Ces sp\u00e9cificit\u00e9s sont trait\u00e9es dans la phase subs\u00e9quente de conception o\u00f9 le mod\u00e8le objet est transform\u00e9 en diagramme d\u2019entit\u00e9s-relations. </p>"},{"location":"base-donnees/dc-norme/#definition-des-types-de-donnees","title":"D\u00e9finition des types de donn\u00e9es","text":"<p>Les types de donn\u00e9es dans un diagramme de classes sont repr\u00e9sent\u00e9s par une bo\u00eete s\u00e9par\u00e9e en deux sections. La section du haut contient le nom de la classe en gras, puis la section du bas les attributs de la classe. Un attribut est simplement d\u00e9clar\u00e9 avec son nom suivi du symbole deux points ( : ) puis de son type. Si l\u2019attribut poss\u00e8de une valeur par d\u00e9faut, celle-ci est indiqu\u00e9e apr\u00e8s la pr\u00e9sence du symbole d\u2019\u00e9galit\u00e9 ( = ).</p> <p>Les classes \u00e0 cette \u00e9tape repr\u00e9sentent les types donn\u00e9es exprim\u00e9es dans le langage courant. De plus, les types de donn\u00e9es peuvent \u00eatre larges (entier au lieu de <code>SMALLINT</code> par exmeple). L\u2019application des formes normales et la normalisation des relations (en particulier les relations N \u00e0 M) entra\u00eeneront l\u2019apparition de nouvelles tables et la r\u00e9\u00e9criture de certains attributs. Ce passage se fera sur le DER.</p> Repr\u00e9sentation d\u2019une classe dans un diagramme de classe"},{"location":"base-donnees/dc-norme/#gestion-des-relations","title":"Gestion des relations","text":"<p>On retrouve principalement deux types de relations dans un diagramme de classes, les relations d\u2019h\u00e9ritage et les relations d\u2019utilisation:</p> <ul> <li>La relation d\u2019h\u00e9ritage entre deux types est repr\u00e9sent\u00e9e par une fl\u00e8che dont la t\u00eate est vide et qui pointe du sp\u00e9cialis\u00e9 vers le type g\u00e9n\u00e9ral (type enfant vers le type parent).</li> <li>La relation d\u2019utilisation est repr\u00e9sent\u00e9e par un trait plein sur lequel appara\u00eet le nom de la relation. Il s\u2019agit habituellement d\u2019un verbe conjugu\u00e9. Si le sens de l\u2019application de la relation n\u2019est pas clair, un triangle (ou un chevron) peut \u00eatre plac\u00e9 \u00e0 c\u00f4t\u00e9 du nom de la relation pour indiquer dans quel sens elle doit \u00eatre lue. Des cardinalit\u00e9s peuvent \u00eatre inscrites sur certaines relations. On utilise la technique pr\u00e9sent\u00e9 pour les diagrammes de classe de conception.</li> </ul> Relation entre deux classes Relation d'h\u00e9ritage entre deux classes Relation avec l'indication d'une cardinalit\u00e9 entre deux classes <p>Types de fl\u00e8ches</p> <p>On peut utiliser tous les types de fl\u00e8ches pr\u00e9sent\u00e9s dans la section sur le diagramme de classe de conception. Par contre, comme le diagramme sera r\u00e9\u00e9crit en diagramme d\u2019entit\u00e9s-relations dans l\u2019\u00e9tape de conception de la base de donn\u00e9es. On utilise g\u00e9n\u00e9ralement que les deux types de fl\u00e8ches pr\u00e9sent\u00e9s ci-dessus afin de se concentrer sur le lien entre les donn\u00e9es que sur l\u2019utilisation de la bonne cat\u00e9gorie de relation.</p>"},{"location":"base-donnees/dc-norme/#gestion-des-contraintes","title":"Gestion des contraintes","text":"<p>Un \u00e9l\u00e9ment important \u00e0 tenir compte dans la mod\u00e9lisation d\u2019une base de donn\u00e9es est la pr\u00e9sence de contraintes sur les \u00e9l\u00e9ments, en particulier les attributs. Pour repr\u00e9senter de telles contraintes, on les inscrit \u00e0 c\u00f4t\u00e9 de l\u2019attribut entre accolades ( { } ). Les contraintes peuvent prendre la forme d\u2019une indication compl\u00e9mentaire ou d\u2019une valeur bool\u00e9enne qui doit \u00eatre respect\u00e9e. Le tableau ci-dessous d\u00e9taille les principaux types de contraintes.\u00b8</p> Contrainte Nom de la contrainte Description id identifiant unique la valeur sera non nulle et diff\u00e9rente pour chaque instance. unique valeur unique la valeur sera diff\u00e9rente pour chaque instance. La valeur nulle peut \u00eatre r\u00e9p\u00e9t\u00e9e. not null valeur non nulle la valeur doit non nulle pour chaque instance. x [&gt; | &gt;= | &lt;= | &lt; | &lt;&gt;] y valeur restreinte l\u2019attribut x doit respect\u00e9e une contrainte selon y. Repr\u00e9sentation de contraintes sur des attributs <p>En analyse de syst\u00e8me objet</p> <p>On peut aussi utiliser le mod\u00e8le objet pour la mod\u00e9lisation de la couche m\u00e9tier du syst\u00e8me. Ce mod\u00e8le permet une premi\u00e8re repr\u00e9sentation des objets utilis\u00e9s dans le syst\u00e8me, sans se pr\u00e9occuper de l\u2019impl\u00e9mentation. Un diagramme objet utilis\u00e9 dans ces circonstances est appel\u00e9 mod\u00e8le du domaine.</p> <p>Pour en savoir plus :  | Mod\u00e8le de domaine</p> <ol> <li> <p>Le terme anglais Class diagram fait parfois r\u00e9f\u00e9rence au diagramme de classes de conception. Le mod\u00e8le objet se diff\u00e9rencie du diagramme de classe de conception par l\u2019absence d\u2019op\u00e9ration et l\u2019absence de blocs dans la structure de classe.\u00a0\u21a9</p> </li> </ol>"},{"location":"base-donnees/der-banque/","title":"Banque de d\u00e9pannage","text":"<p>Combien de contraintes dois-je mettre pour que mon diagramme soit bon ?</p> <p>Il n\u2019y a clairement pas de r\u00e9ponse num\u00e9rique \u00e0 cette question, tout d\u00e9pend de la situation. De r\u00e8gle g\u00e9n\u00e9rale, l\u2019on peut consid\u00e9rer que le travail complet des contraintes est fait si :</p> <ul> <li>Chaque table poss\u00e8de une contrainte de cl\u00e9 primaire ;</li> <li>Toutes les colonnes qui contiennent des valeurs d\u2019une autre table poss\u00e8dent une contrainte de cl\u00e9 \u00e9trang\u00e8re ;</li> <li>Les colonnes dont la duplication de valeurs entra\u00eene des erreurs d\u2019int\u00e9grit\u00e9 de donn\u00e9es poss\u00e8dent la contrainte de cl\u00e9 unique ;</li> <li>Les colonnes dont la nullit\u00e9 de valeurs entra\u00eene des erreurs d\u2019int\u00e9grit\u00e9 poss\u00e8dent la contrainte de non-nullit\u00e9 ;</li> <li>Les colonnes dont la pr\u00e9sence de certaines valeurs entra\u00eene des erreurs majeures d\u2019int\u00e9grit\u00e9 poss\u00e8dent des contraintes de v\u00e9rification (check) ;</li> <li>Toute autre contrainte qui pr\u00e9vient des erreurs majeures d\u2019int\u00e9grit\u00e9 dans la base de donn\u00e9es.</li> </ul> <p>Le but (\u00e0 moins que vous ne d\u00e9veloppiez un syst\u00e8me de bases de donn\u00e9es autonome) n\u2019est pas de g\u00e9rer toutes les entr\u00e9es utilisateurs possibles, mais plut\u00f4t d\u2019emp\u00eacher que la base de donn\u00e9es soit corrompue dans un ajout manuel ou de masse. Par exemple, une interface dans un syst\u00e8me permet d\u2019ajouter des articles un \u00e0 la fois, mais, \u00e0 l\u2019occasion, on t\u00e9l\u00e9verse directement dans la base de donn\u00e9es un fichier Excel. Cette op\u00e9ration \u00e9vite toutes les v\u00e9rifications du logiciel. La base de donn\u00e9es devrait contenir l\u2019information pour bloquer des ajouts qui causent des erreurs dans l\u2019utilisation subs\u00e9quente du syst\u00e8me.</p> <p>Comment indiquer une contrainte qui est g\u00e9r\u00e9e par un d\u00e9clencheur ?</p> <p>Dans le dictionnaire des contraintes, il faut ajouter dans la description de la contrainte qu\u2019elle est impl\u00e9ment\u00e9e dans un d\u00e9clencheur.</p>"},{"location":"base-donnees/der-exemple/","title":"Exemples complets","text":""},{"location":"base-donnees/der-exemple/#lapplication-sportive","title":"L\u2019application sportive","text":"<p>On mod\u00e9lise la base de donn\u00e9es pour une application qui fait le suivi de la pratique d\u2019activit\u00e9 physique de la part de ces utilisateurs. Chaque personne utilisatrice peut s\u2019identifier avec un courriel et un mot de passe. On garde en m\u00e9moire \u00e9galement son nom et sa date de naissance. La personne utilisatrice peut entrer une ou plusieursactivit\u00e9s physiques qu\u2019elle pratique ainsi que ses s\u00e9ances d\u2019entra\u00eenement.</p> Exemple complet de diagramme entit\u00e9s-relations - application sportive <p>Dictionnaire des contraintes pour le pr\u00eat d\u2019embarcations</p> Code Table Description de la contrainte c01 PersonneUtilisatrice Le courriel est unique. c02 ActiviteSportive L\u2019intensit\u00e9 est \u00ab faible \u00bb, \u00ab mod\u00e9r\u00e9e \u00bb ou \u00ab \u00e9lev\u00e9e \u00bb."},{"location":"base-donnees/der-exemple/#le-pret-dembarcations","title":"Le pr\u00eat d\u2019embarcations","text":"<p>Voici le DER complet pour la situation pr\u00e9sent\u00e9e \u00e0 l\u2019exemple Le pr\u00eat d\u2019embarcations. Les \u00e9l\u00e9ments suivants (indiqu\u00e9s en rouge sur le diagramme) peuvent \u00eatre remarqu\u00e9s.</p> <ol> <li>L\u2019application des formes normales sur la table Client entra\u00eene l\u2019ajout de champ \u00e0 partir du nom et de l\u2019adresse.</li> <li>M\u00eame si la relation indique que le Client effectue la Location, la cl\u00e9 primaire de client sera une colonne dans la table Location. La s\u00e9mantique (le sens) de la relation ne d\u00e9termine pas quelle table contient la r\u00e9f\u00e9rence vers l\u2019autre. Seule la multiplicit\u00e9 d\u00e9termine cet \u00e9l\u00e9ment et comme chaque location est li\u00e9e \u00e0 un unique client, la table Location poss\u00e8de la cl\u00e9 \u00e9trang\u00e8re vers la table Client.</li> <li>Comme une location peut contenir plusieurs vestes de flottaison et qu\u2019une m\u00eame veste de flottaison peut \u00eatre contenue dans plusieurs locations, on ajoute une table d\u2019association entre veste de flottaison et location. Le m\u00eame raisonnement justifie l\u2019ajout des tables LocationEmbarcation et LocationPagaie.</li> <li>La classe Embarcation comporte des valeurs communes \u00e0 plusieurs enregistrements, donc on s\u00e9pare la classe en deux morceaux : l\u2019entit\u00e9 Embarcation qui comprend les donn\u00e9es pour chaque embarcation qu\u2019il est possible de louer et l\u2019entit\u00e9 TypeEmbarcation qui comprend les donn\u00e9es pour chaque cat\u00e9gorie. Par exemple, s\u2019il y a 3 kayaks \u00e0 une place, il y aura 3 enregistrements dans la table Embarcation et un seul dans la table TypeEmbarcation.</li> </ol> Exemple complet de diagramme entit\u00e9s-relations - pr\u00eat d\u2019embarcations <p>Dictionnaire des contraintes pour le pr\u00eat d\u2019embarcations</p> Code Table Description de la contrainte c1 TypeEmbarcation L\u2019occupation maximale doit \u00eatre \u00e9gale ou sup\u00e9rieure \u00e0 l\u2019occupation minimale. c2 Embarcation Le type d\u2019embarcation et le num\u00e9ro s\u00e9quentiel forment une paire unique."},{"location":"base-donnees/der-norme/","title":"Diagramme entit\u00e9s-relations","text":"<p>\u00c9tape de la conception</p> <p> Conception</p> <p>Standard de notation</p> <p>Non norm\u00e9 <sup>1</sup></p> <p>Nom anglais</p> <p>Entity-relationship diagram</p> <p>Le diagramme d\u2019entit\u00e9s-relations sert \u00e0 repr\u00e9senter graphiquement les \u00e9l\u00e9ments \u00e0 impl\u00e9menter dans la cr\u00e9ation de bases de donn\u00e9es. Au coeur de ce type de diagramme, on retrouve les entit\u00e9s (elles seront des tables lors d\u2019impl\u00e9mentation) et les relations (qui seront souvent des contraintes d\u2019int\u00e9grit\u00e9 relationnelle de type cl\u00e9 \u00e9trang\u00e8re).</p> <p>Le diagramme d\u2019entit\u00e9s-relations est compos\u00e9 de :</p> <ul> <li>entit\u00e9s qui repr\u00e9sentent les tables;</li> <li>colonnes et de leur type;</li> <li>relations de d\u00e9pendance entre les colonnes (qu\u2019elles soient soumises \u00e0 une contrainte d\u2019int\u00e9grit\u00e9 ou non); et</li> <li>contraintes d\u2019int\u00e9grit\u00e9 relationnelles, uniques et contraintes de colonnes non nullifiables;</li> <li>identification d\u2019index.</li> </ul> <p>Les contraintes de validation d\u2019int\u00e9grit\u00e9 des valeurs propres au domaine comme les check et contraintes plus complexes mises en place par des d\u00e9clencheurs (trigger) ne sont pas repr\u00e9sent\u00e9es sur un diagramme entit\u00e9s-relations.</p>"},{"location":"base-donnees/der-norme/#definition-des-types-de-donnees","title":"D\u00e9finition des types de donn\u00e9es","text":"<p>La d\u00e9finition des entit\u00e9s se fait \u00e0 l\u2019aide d\u2019une bo\u00eete divis\u00e9e en deux. La partie sup\u00e9rieure de la bo\u00eete contient le nom de la table, la partie inf\u00e9rieure contient les colonnes.</p> <p>Chaque colonne est identifi\u00e9e par un nom, qui doit \u00eatre unique pour la table et d\u2019un type de donn\u00e9es. Les principaux disponibles (liste non exhaustive) sont :</p> <ol> <li>Valeurs enti\u00e8res : TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT</li> <li>Valeurs r\u00e9elles : FLOAT, DOUBLE, NUMERIC, DECIMAL</li> <li>Cha\u00eenes de caract\u00e8res : CHAR(n), VARCHAR(n), TEXT</li> <li>Date et heure : TIME, DATE, DATETIME, TIMESTAMP</li> <li>Donn\u00e9es brutes : TINYBLOB, SMALLBLOB, MEDIUMBLOB, BLOB</li> </ol> <p>La disponibilit\u00e9 de type peut varier selon le syst\u00e8me de gestion de bases de donn\u00e9es utilis\u00e9.</p> Notation d\u2019une table dans un DER <p>Bonnes pratiques !</p> <p>Comme les mots-cl\u00e9s du langage SQL sont \u00e9crits en majuscules, il est fr\u00e9quent de les retrouver en majuscule dans les diagrammes entit\u00e9s-relations.</p> <p>La plupart des logiciels de mod\u00e9lisation n\u2019offrent pas d\u2019option pour aligner plusieurs colonnes de texte dans un diagramme. L\u2019utilisation d\u2019une police \u00e0 espacement constant (monospaced font) facilite l\u2019alignement des contenus.</p>"},{"location":"base-donnees/der-norme/#gestion-des-relations","title":"Gestion des relations","text":"<p>Les relations entre les donn\u00e9es en bases de donn\u00e9es prennent toujours la forme d\u2019une table dont une colonne reprend les valeurs d\u2019une colonne d\u2019une autre table. Une relation entre deux tables est repr\u00e9sent\u00e9e par une fl\u00e8che qui part de la table qui utilise les donn\u00e9es (table d\u00e9pendante) vers la table qui les d\u00e9finit (table ind\u00e9pendante).</p> <p>La fl\u00e8che peut d\u00e9buter n\u2019importe o\u00f9 sur l\u2019entit\u00e9 d\u00e9pendante et terminer n\u2019importe o\u00f9 sur l\u2019entit\u00e9 ind\u00e9pendante, mais pour am\u00e9liorer la lisibilit\u00e9 du diagramme, il est fortement sugg\u00e9r\u00e9 de relier les colonnes impliqu\u00e9es dans la relation.</p> Notation des relations dans un DER"},{"location":"base-donnees/der-norme/#contraintes-de-donnees","title":"Contraintes de donn\u00e9es","text":"<p>Les valeurs d\u2019une table peuvent \u00eatre soumises \u00e0 des conditions, appel\u00e9es contraintes, afin de garantir qu\u2019elles sont valides. Plusieurs types de contraintes existent et elles ont des notations diff\u00e9rentes, selon le type.</p>"},{"location":"base-donnees/der-norme/#cle-primaire","title":"Cl\u00e9 primaire","text":"<p>La contrainte de cl\u00e9 primaire indique qu\u2019une valeur agit comme identifiant principal de la table. Cette contrainte regroupe la contrainte unique, non nulle et d\u00e9finit un index sur la colonne. Ces contraintes sont incompatibles avec la contrainte de cl\u00e9 primaire, car elles seraient redondantes. La cl\u00e9 primaire est not\u00e9e par l\u2019ajout de l\u2019indicateur &lt;pk&gt; apr\u00e8s l\u2019\u00e9criture du type de la colonne et du soulignement de la ligne enti\u00e8re. Si la cl\u00e9 est compos\u00e9e, la contrainte est indiqu\u00e9e pour chaque colonne qui compose la cl\u00e9 primaire.</p> Repr\u00e9sentation d'une cl\u00e9 primaire d'une colonne sur un DER"},{"location":"base-donnees/der-norme/#non-nulle","title":"Non nulle","text":"<p>La contrainte non nulle indique que la colonne doit toujours poss\u00e9der une valeur diff\u00e9rente de nulle. Cette contrainte est indiqu\u00e9e en ajoutant l\u2019expression not null apr\u00e8s le type de la colonne.</p> Notation de la contrainte de non-nullit\u00e9 dans un DER"},{"location":"base-donnees/der-norme/#valeur-par-defaut","title":"Valeur par d\u00e9faut","text":"<p>La contrainte de valeur par d\u00e9faut permet de pr\u00e9ciser que si aucune valeur n\u2019est indiqu\u00e9e lors de l\u2019insertion d\u2019un enregistrement, alors cette valeur est utilis\u00e9e. Elle est not\u00e9e en ajoutant le symbole d\u2019\u00e9galit\u00e9 suivi de la valeur par d\u00e9faut (= valeur) apr\u00e8s le type de la colonne.</p> Notation de la valeur par d\u00e9faut dans un DER"},{"location":"base-donnees/der-norme/#cle-etrangere","title":"Cl\u00e9 \u00e9trang\u00e8re","text":"<p>La contrainte de cl\u00e9 \u00e9trang\u00e8re indique que les valeurs d\u2019une colonne doivent exister dans une colonne d\u2019une autre table. La cl\u00e9 \u00e9trang\u00e8re implique l\u2019existence d\u2019une relation entre deux tables. La colonne qui poss\u00e8de la cl\u00e9 \u00e9trang\u00e8re (table d\u00e9pendante) est indiqu\u00e9e en ajoutant l\u2019indicateur &lt;fk&gt; sur le diagramme apr\u00e8s le type de la colonne. La fl\u00e8che de la relation doit obligatoirement d\u00e9buter \u00e0 la colonne de la table d\u00e9pendante et se terminer \u00e0 la colonne de la table ind\u00e9pendante.</p> <p>Bien que ce soit presque toujours le cas, il n\u2019est pas obligatoire que la colonne de la table ind\u00e9pendante soit une cl\u00e9 primaire de cette table. De m\u00eame, bien que presque toutes les relations entre tables soient accompagn\u00e9es d\u2019une cl\u00e9 \u00e9trang\u00e8re, il n\u2019est pas obligatoire de d\u00e9finir une cl\u00e9 \u00e9trang\u00e8re pour chaque relation.</p> Notation de la cl\u00e9 \u00e9trang\u00e8re dans un DER"},{"location":"base-donnees/der-norme/#unicite-index-et-autres-contraintes","title":"Unicit\u00e9, index et autres contraintes","text":"<p>Les autres types de contraintes demandent souvent des informations suppl\u00e9mentaires \u00e0 leur d\u00e9finition. Par cons\u00e9quent, elles sont indiqu\u00e9es par un code sur le diagramme et d\u00e9finies dans un fichier \u00e0 part : le dictionnaire de contrainte. Le code est indiqu\u00e9 entre chevrons simples apr\u00e8s le type de la colonne &lt;code&gt;.</p> Notation de contraintes g\u00e9n\u00e9rales dans un DER <p>Exemple de dictionnaire de contraintes</p> Code Table Description de la contrainte c01 Table A Description de la contrainte portant sur colonne2A et colonne3A. c02 Table B Description de la contrainte portant sur colonne3B. <ol> <li> <p>La premi\u00e8re version de diagrammes d\u2019entit\u00e9s-relations a \u00e9t\u00e9 propos\u00e9e \u00e0 l\u2019apparition des bases de donn\u00e9es relationnelles dans Chen 1976. Aujourd\u2019hui, ils s\u2019inspirent et se rapprochent des standards UML. Cependant, comme UML sert d\u2019abord \u00e0 mod\u00e9liser des syst\u00e8mes objet et non des bases de donn\u00e9es, les diagrammes entit\u00e9s-relations continuent de se distinguer des notations UML pures. Contrairement \u00e0 plusieurs diagrammes pr\u00e9sent\u00e9s dans ce guide, les DER ne s\u2019appuient pas sur un document de r\u00e9f\u00e9rence, mais plut\u00f4t sur un ensemble de pratiques admises.\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/situation/","title":"Situations d'utilisation des diagrammes","text":"<p>Trois situations peuvent requ\u00e9rir des mod\u00e9lisations graphiques dans la conception de syst\u00e8me au coll\u00e9gial : l'analyse des besoins, la conception du syst\u00e8me, la conception de la base de donn\u00e9es. Pour chacune de ces trois situations, la mod\u00e9lisation peut intervenir \u00e0 deux niveaux : un niveau global (le syst\u00e8me) et un niveau fonctionnel (les cas d'utilisation ou les algorithmes).</p> <p>La figure ci-dessous pr\u00e9sente, pour chacune des situations les diagrammes \u00e0 consulter pour chaque niveau de mod\u00e9lisation. Les onglets de navigation du site correspondent \u00e0 chacune des situations.</p>"},{"location":"objet/dcc-norme/","title":"Normes du diagramme de classes de conception","text":"<p>\u00c9tape de la conception</p> <p> Conception</p> <p>Standard de notation</p> <p>UML 2.5</p> <p>Nom anglais</p> <p>Class diagram, Diagram of Implementation Classes</p> <p>L\u2019un des diagrammes centraux et le plus utilis\u00e9 pour la mod\u00e9lisation des syst\u00e8mes objets est le diagramme de classes de conception (DCC). Ce diagramme joue le r\u00f4le d\u2019une carte du syst\u00e8me. On y repr\u00e9sente tous les types d\u00e9finis dans le syst\u00e8me (classe, interface, \u00e9num\u00e9ration, structure ...) ainsi que les composantes de ces types et les relations entre les types. Dans un cycle de conception logicielle, la production du DCC vient souvent en dernier dans l\u2019\u00e9tape de la conception tout juste avant de passer \u00e0 l\u2019impl\u00e9mentation.</p> <p>Cette section pr\u00e9sente la notation UML pour le DCC ainsi que des exemples de mise en oeuvre des diagrammes dans le langage de programmation C#.</p>"},{"location":"objet/dcc-norme/#definition-des-types-et-des-methodes","title":"D\u00e9finition des types et des m\u00e9thodes","text":"<p>La d\u00e9finition d\u2019un type se fait avec une bo\u00eete s\u00e9par\u00e9e verticalement en trois sections. La section du haut contient la sp\u00e9cification du type ainsi que son nom en caract\u00e8res gras. Sp\u00e9cialement pour la classe il n\u2019y a pas de sp\u00e9cification de type particuli\u00e8re \u00e0 faire. La section du milieu contient les attributs de la classe et est identifi\u00e9e par le titre attribut. La section du bas contient les m\u00e9thodes de la classe et est identifi\u00e9e par le titre operation.</p> Repr\u00e9sentation d\u2019une classe dans un DCC <p>Pour d\u00e9clarer un attribut, il faut indiquer le nom de l\u2019attribut suivi du symbole deux-points ( : ) et du type de la donn\u00e9e. Les types natifs suivants peuvent \u00eatre utilis\u00e9s :</p> <ul> <li>byte : s\u00e9quence num\u00e9rique de bit entre \\(\u22122^7\\) et \\(2^7 \u2212 1\\);</li> <li>char : repr\u00e9sentation d\u2019un caract\u00e8re sur la table ASCII. Les valeurs permises sont entre \\(\u22122^7\\) et \\(2^7 \u2212 1\\);</li> <li>short : entier court dont la valeur est entre \\(\u22122^{15}\\) et \\(2^{15} \u2212 1\\);</li> <li>int : entier dont la valeur est entre \\(\u22122^{31}\\) et \\(2^{31} \u2212 1\\);</li> <li>long : entier long dont la valeur est entre \\(\u22122^{63}\\) et \\(2^{63} \u2212 1\\);</li> <li>float : repr\u00e9sentation d\u2019un nombre d\u00e9cimal \u00e0 simple pr\u00e9cision (encod\u00e9 sur 32 bits);</li> <li>double : repr\u00e9sentation d\u2019un nombre d\u00e9cimal avec une double pr\u00e9cision (encod\u00e9 sur 64 bits);</li> <li>boolean : variable bool\u00e9enne; et</li> <li>string : cha\u00eene de caract\u00e8res \u00e0 longueur variable.</li> </ul> <p>En plus des types natifs, il est possible de faire r\u00e9f\u00e9rence \u00e0 un type complexe (classe, interface, \u00e9num\u00e9ration ...).</p> <p>On inscrit le nom du type auquel l\u2019on fait r\u00e9f\u00e9rence apr\u00e8s le symbole du deux-points ( :). Pour la d\u00e9claration d\u2019attributs \u00e0 valeur constante, on ajoute le symbole d\u2019\u00e9galit\u00e9 (=) apr\u00e8s le type de l\u2019attribut qui devrait \u00eatre constant et la valeur de la constante.</p> <p>Pour d\u00e9clarer une m\u00e9thode, il faut simplement indiquer le nom de la m\u00e9thode suivi de parenth\u00e8ses qui contiennent les param\u00e8tres de la m\u00e9thode. Les arguments sont not\u00e9s comme les attributs, c\u2019est-\u00e0-dire en indiquant d\u2019abord le nom du param\u00e8tre puis le symbole des deux-points (:) et le type du param\u00e8tre. Finalement, il faut inscrire le symbole des deux points (:) apr\u00e8s la parenth\u00e8se fermante des param\u00e8tres et le type de retour de la m\u00e9thode.</p> <p>Les m\u00e9thodes qui ne retournent rien doivent avoir le type de retour <code>void</code>. Les m\u00e9thodes de type constructeurs ont une notation sp\u00e9ciale qui sera vue plus loin. Pour l\u2019instant, comme un constructeur ne retourne rien (m\u00eame pas <code>void</code>) ; on omet le deux-points (:) et le type de retour.</p> Repr\u00e9sentation des attributs et des m\u00e9thodes sur un DCC <p>La d\u00e9finition de la classe Rectangle</p> <p>Dans un syst\u00e8me, nous souhaitons d\u00e9velopper une classe pour repr\u00e9senter un rectangle. Un rectangle poss\u00e8de une longueur et une hauteur. Il doit d\u00e9finir un constructeur acceptant une longueur et une hauteur, une m\u00e9thode pour calculer l'aire et une m\u00e9thode pour v\u00e9rifier si l'aire du rectangle est plus grande que l'aire d'un autre rectangle. Les valeurs du rectangle seront enregistr\u00e9es sur le type `float}.</p> Le diagrammeL'impl\u00e9mentation <p> Repr\u00e9sentation de la classe Rectangle sur un DCC </p> La classe Rectangle<pre><code>class Rectangle {\n    float longueur;\n    float hauteur;\n\n    Rectangle (float longueur, float hauteur) {\n        this.longueur = longueur;\n        this.hauteur = hauteur;\n    }\n\n    float CalculerAire() {\n        return longueur * hauteur;\n    }\n\n    bool AirePlusGrandeQue(Rectangle autre) {\n        return CalculerAire &gt; autre.CalculerAire();\n    }\n}\n</code></pre> <p>Attributs d\u00e9riv\u00e9s</p> <p>Un attribut d\u00e9riv\u00e9 est un attribut dont la valeur est calcul\u00e9e \u00e0 partir de la valeur d'autres attributs. Il est possible de noter ces attributs sur le DCC en ajoutant une barre oblique \u00ab\u00a0/\u00a0\u00bb devant l'attribut afin de noter le fait qu'il est d\u00e9riv\u00e9 \u00e0 partir d'autres attributs.</p>"},{"location":"objet/dcc-norme/#definition-de-la-visibilite","title":"D\u00e9finition de la visibilit\u00e9","text":"<p>Pour chaque membre d'une classe, on peut en pr\u00e9ciser la visibilit\u00e9. Dans le standard UML, il existe quatre types de visibilit\u00e9. Ces types de visibilit\u00e9 peuvent \u00eatre partiellement disponibles dans le langage de programmation utilis\u00e9 (par exemple, le langage C++ d\u00e9finit seulement trois des quatre types de visibilit\u00e9s) ou \u00eatre interpr\u00e9t\u00e9s diff\u00e9remment (par exemple, la port\u00e9e de la visibilit\u00e9 interne en java et en C# diff\u00e8re).</p> <p>Les quatre visibilit\u00e9s disponibles sont :</p> <ul> <li>priv\u00e9 : le membre est accessible uniquement dans le type o\u00f9 le membre est d\u00e9fini. Les membres priv\u00e9s sont pr\u00e9c\u00e9d\u00e9s du symbole du trait d'union (-).</li> <li>prot\u00e9g\u00e9 : le membre est accessible uniquement dans les classes \\glspl{enfant} du type o\u00f9 le membre est d\u00e9fini. Les membres prot\u00e9g\u00e9s sont pr\u00e9c\u00e9d\u00e9s du symbole du di\u00e8se (#).</li> <li>interne : le membre est accessible uniquement depuis une portion du syst\u00e8me. La portion du syst\u00e8me accessible varie selon le langage de programmation. Les membres internes sont pr\u00e9c\u00e9d\u00e9s du symbole du tilde (~).</li> <li>publique : accessible \u00e0 tous les autres types du syst\u00e8me. Les membres publics sont pr\u00e9c\u00e9d\u00e9s du symbole plus (+).</li> </ul> Repr\u00e9sentation des types de visibilite sur un DCC <p>La visibilit\u00e9 des membres de la classe rectangle</p> <p>Reprenons la classe rectangle de l'exemple pr\u00e9c\u00e9dent. Nous ajoutons l'information sur le diagramme que les attributs de la classe sont priv\u00e9s et que ses m\u00e9thodes sont publiques. Lors d'un exemple complet, nous pr\u00e9senterons la visibilit\u00e9 prot\u00e9g\u00e9e et son impact.</p> Le diagrammeL'impl\u00e9mentation <p> Repr\u00e9sentation de la classe Rectangle sur un DCC </p> La classe Rectangle<pre><code>    class Rectangle {\n\n        private float longueur;\n        private float hauteur;\n\n        public Rectangle (float longueur, float hauteur) {\n            this.longueur = longueur;\n            this.hauteur = hauteur;\n        }\n\n        public float CalculerAire() {\n            return longueur * hauteur;\n        }\n\n        public bool AirePlusGrandeQue(Rectangle autre) {\n            return CalculerAire &gt; autre.CalculerAire();\n        }\n    }\n</code></pre> <p>Visibilit\u00e9 des types</p> <p>Qu'en est-il de la visibilit\u00e9 des types ? Par exemple, on \u00e9crit souvent <code>public class ...</code> dans le code. Comment repr\u00e9senter la visibilit\u00e9 des classes sur un diagramme UML ?</p> <p>On utilise d'autres types de diagrammes que le DCC pour ce type de mod\u00e9lisation, dont le diagramme de packages ou le diagramme de composites. Si l'information de la visibilit\u00e9 d'un type doit \u00e0 tout prix se retrouver sur un DCC, il est possible d'utiliser les commentaires.</p>"},{"location":"objet/dcc-norme/#interfaces-enumerations-et-structures","title":"Interfaces, \u00e9num\u00e9rations et structures","text":"<p>Pour d\u00e9finir des types de donn\u00e9es autres que les classes, il faut pr\u00e9ciser \u00e0 l'aide d'un mot-cl\u00e9 au-dessus du nom du type s'il s'agit d'une interface, une \u00e9num\u00e9ration ou une structure. Les mot-cl\u00e9s sont pr\u00e9sent\u00e9s entre une paire de chevrons (\u00ab\u00a0\u00bb)<sup>1</sup>. </p> <ul> <li>dataType : ce type indique une structure (classe dont les donn\u00e9es sont pass\u00e9es par valeur et non par r\u00e9f\u00e9rence).</li> <li>\u00e9num\u00e9ration : ce type d\u00e9finit un ensemble fini de valeurs possibles pour le type. Selon les langages, il peut y \u00eatre permis d'y d\u00e9finir des m\u00e9thodes ou non.</li> <li>interface : ce type sp\u00e9cifie des op\u00e9rations qui doivent \u00eatre d\u00e9finies par les types impl\u00e9mentant l'interface. Selon les langages, il peut y \u00eatre permis d'y d\u00e9finir des attributs.</li> </ul> Repr\u00e9sentation des diff\u00e9rents types de donn\u00e9es sur un DCC <p>Faisons la distinction entre mot-cl\u00e9s et st\u00e9r\u00e9otypes</p> <p>Dans la notation UML, deux \u00e9l\u00e9ments se note fa\u00e7on semblable : les mots-cl\u00e9s qui indique un type tel interface ou \u00e9num\u00e9ration, et les st\u00e9r\u00e9otypes de type. Dans plusieurs sources, les termes utilis\u00e9s en mot-cl\u00e9 sont pr\u00e9sent\u00e9s comme des st\u00e9r\u00e9otypes alors que ce n'est pas le cas.</p> <p>Les termes identifiant la nature de la structure de donn\u00e9es sont des mots d\u00e9finis dans les sp\u00e9cifications de UML, alors que les st\u00e9r\u00e9otypes peuvent \u00eatre ajust\u00e9s selon les besoins.</p>"},{"location":"objet/dcc-norme/#relations-entre-types","title":"Relations entre types","text":"<p>Au-del\u00e0 de la structure interne des types, UML permet d'indiquer les relations entre les types. Chaque relation est repr\u00e9sent\u00e9e par un type de fl\u00e8che diff\u00e9rent afin de pouvoir identifier sa nature sur le DCC. Les sortes de relations couvertes dans le guide sont :</p> <ul> <li>Agr\u00e9gation et composition</li> <li>H\u00e9ritage</li> <li>Impl\u00e9mentation (parfois appel\u00e9 R\u00e9alisation)</li> <li>D\u00e9pendance</li> </ul>"},{"location":"objet/dcc-norme/#lagregation","title":"L'agr\u00e9gation","text":"<p>La relation d'agr\u00e9gation indique qu'un type poss\u00e8de un attribut du type agr\u00e9g\u00e9. C'est une relation appel\u00e9e \u00ab\u00a0est partie de ...\u00a0\u00bb. La relation est illustr\u00e9e par une ligne entre les deux types avec un losange ouvert du c\u00f4t\u00e9 du type conteneur (qui poss\u00e8de l'attribut). La relation d'agr\u00e9gation pr\u00e9cise aussi une cardinalit\u00e9 indiquant combien d'\u00e9l\u00e9ments sont pr\u00e9sents de chaque c\u00f4t\u00e9 de la relation.</p> Relation d'agr\u00e9gation <p>Les cardinalit\u00e9s peuvent \u00eatre les suivantes :</p> <ul> <li>\\(p\\) : indique qu'il y a exactement \\(n\\) \u00e9l\u00e9ments d'impliqu\u00e9s (avec \\(p \\geq 1\\))</li> <li>* : indique qu'il y a 0 ou plusieurs \u00e9l\u00e9ments d'impliqu\u00e9s</li> <li>\\(p\\)..\\(q\\) : indique qu'il y a au moins \\(p\\) \u00e9l\u00e9ments d'impliqu\u00e9s et au plus \\(q\\) \u00e9l\u00e9ments d'impliqu\u00e9s (avec \\(p \\geq 0\\) et \\(q \\geq 1\\)). Si une lettre appara\u00eet dans la cardinalit\u00e9, alors cela signifie qu'il peut y avoir un nombre quelconque d'\u00e9l\u00e9ments impliqu\u00e9s.</li> </ul> <p>Cardinalit\u00e9 des agr\u00e9gations</p> <p>Voici divers exemples d'agr\u00e9gations avec la cardinalit\u00e9 utilis\u00e9e expliqu\u00e9e :</p> <ol> <li>Une maison poss\u00e8de une adresse. Chaque maison poss\u00e8de une unique adresse donc 1 est indiqu\u00e9 du c\u00f4t\u00e9 d\u2019adresse, car une seule adresse est impliqu\u00e9e dans la relation. Chaque adresse est unique par maison alors 1 est inscrit du c\u00f4t\u00e9 de maison, car une seule maison est impliqu\u00e9e dans la relation.</li> </ol> <p> Relation d'agr\u00e9gation entre une maison et son adresse </p> <ol> <li>Une automobile comporte entre 0 et 4 roues. Chaque automobile peut avoir entre 0 et 4 roues, donc 0..4 est indiqu\u00e9 du c\u00f4t\u00e9 de roues. Chaque roue appartient \u00e0 une seule automobile, alors 1 est indiqu\u00e9 du c\u00f4t\u00e9 d'automobile.</li> </ol> <p> Relation d'agr\u00e9gation entre une automobile et ses roues </p> <ol> <li>Un panier d'\u00e9picerie peut comporter z\u00e9ro, un ou plusieurs l\u00e9gumes. Comme on peut ne pas mettre de l\u00e9gumes ou en mettre un grand nombre inconnu, * est indiqu\u00e9 du c\u00f4t\u00e9 de l\u00e9gume. Chaque l\u00e9gume peut \u00eatre dans un seul panier ou \u00eatre sur l'\u00e9talage (donc dans aucun panier), 0..1 est indiqu\u00e9 \u00e0 c\u00f4t\u00e9 de panier d'\u00e9picerie.</li> </ol> <p> Relation d'agr\u00e9gation entre un panier d'\u00e9picerie et les l\u00e9gumes </p> <ol> <li>Un groupe doit contenir au moins 6 \u00e9l\u00e8ves pour que le cours puisse se donner et ne doit pas en comporter plus de 36. Les valeurs 6..36 est donc indiqu\u00e9e du c\u00f4t\u00e9 d\u2019\u00e9l\u00e8ve. Chaque \u00e9l\u00e8ve doit avoir \u00e9t\u00e9 inscrit \u00e0 au moins un groupe (autrement ce n'est pas un \u00e9l\u00e8ve) et peut \u00eatre inscrit \u00e0 un nombre de groupe non limit\u00e9.  La cardinalit\u00e9 1..n indique que chaque \u00e9l\u00e8ve se retrouve dans au minimum 1 groupe et peut s'inscrire \u00e0 plus de groupes.  </li> </ol> <p> Relation d'agr\u00e9gation entre un groupe et ses \u00e9l\u00e8ves </p> <ol> <li>Chaque entreprise poss\u00e8de au moins un employ\u00e9 et peut en poss\u00e9der autant qu'elle le souhaite, d'o\u00f9 la notation 1..n utilis\u00e9e. Une personne employ\u00e9e travaille pour au moins une entreprise (car sinon elle ne serait pas employ\u00e9e) et peut combiner plusieurs emplois en m\u00eame temps, c'est pouquoi 1..m est indiqu\u00e9 \u00e0 c\u00f4t\u00e9 d'entreprise.  L'utilisation des variables m et n permet de diff\u00e9rencier le nombre maximal de personnes employ\u00e9es par entreprise et le nombre maximal d'emplois qu'une personne employ\u00e9e poss\u00e8de.</li> </ol> <p> Relation d'agr\u00e9gation entre des entreprises et des personnes employ\u00e9es </p>"},{"location":"objet/dcc-norme/#la-composition","title":"La composition","text":"<p>La composition est un type particulier d'agr\u00e9gation o\u00f9 le conteneur est d\u00e9pendant de son contenu pour exister. La suppression des \u00e9l\u00e9ments contenus entra\u00eene la suppression du conteneur. Dans l'exemple pr\u00e9c\u00e9dent la relation illustr\u00e9e \u00e0 l'item 4 est une relation de composition. On repr\u00e9sente une relation de composition par l'utilisation de la m\u00eame fl\u00e8che que pour l'agr\u00e9gation, mais le losange est plein (au lieu du losange vide).</p> <p>Par exemple, retirer les \u00e9l\u00e8ves du groupe entra\u00eene \u00e9ventuellement la fermeture du groupe. Donc il ne s'agit pas simplement de supprimer un \u00e9l\u00e9ment contenu pour entra\u00eener la destruction du conteneur, mais bien d'en supprimer toutes les parties. Cette relation contraste avec celle du panier d'\u00e9picerie et des l\u00e9gumes (item 2 de l'exemple pr\u00e9c\u00e9dent) o\u00f9 m\u00eame si tous les l\u00e9gumes sont retir\u00e9s du panier, le panier continue d'exister.</p> Relation de composition entre des groupes et des \u00e9l\u00e8ves"},{"location":"objet/dcc-norme/#heritage","title":"H\u00e9ritage","text":"<p>La relation d'h\u00e9ritage permet \u00e0 un type enfant de reprendre int\u00e9gralement le contenu d'un autre type appel\u00e9 parent. On repr\u00e9sente la relation d'h\u00e9ritage \u00e0 l'aide d'une fl\u00e8che pleine avec une t\u00eate triangulaire vide. La t\u00eate de la fl\u00e8che est toujours du c\u00f4t\u00e9 du type parent (la fl\u00e8che pointe vers le parent). Lorsqu'un type est h\u00e9rit\u00e9 par plusieurs autres, il est possible d'utiliser les multi fl\u00e8ches.</p> <p>On consid\u00e8re que la classe enfant poss\u00e8de tous les attributs et toutes les m\u00e9thodes de ses parents. Habituellement, ils ne sont pas inscrits de nouveau dans la classe enfant.</p> <ul> <li> <p>Repr\u00e9sentation de la relation d'h\u00e9ritage (fl\u00e8che simple)</p> <p> </p> </li> <li> <p>Repr\u00e9sentation de la relation d'h\u00e9ritage (multifl\u00e8che)</p> <p> </p> </li> </ul> <p>Membres h\u00e9rit\u00e9s</p> <p>Il est possible de noter sur un diagramme les membres h\u00e9rit\u00e9es d'un parent. Cela peut \u00eatre utile dans certaines circonstances comme lors d'une red\u00e9finition d'un type g\u00e9n\u00e9rique. Lorsqu'on inscrit un membre h\u00e9rit\u00e9, on l'\u00e9crit dans une couleur gris plus p\u00e2le afin de le diff\u00e9rencier des membres d\u00e9finis dans la classe enfant.</p>"},{"location":"objet/dcc-norme/#implementation","title":"Impl\u00e9mentation","text":"<p>La relation d'impl\u00e9mentation permet \u00e0 une classe de r\u00e9aliser une interface et indique que le type devra impl\u00e9menter les m\u00e9thodes sp\u00e9cifi\u00e9es dans l'interface. La fl\u00e8che est similaire \u00e0 celle de l'h\u00e9ritage, \u00e0 la diff\u00e9rence que le trait est pointill\u00e9 plut\u00f4t que continu. Si plusieurs types impl\u00e9mentent une interface, il est aussi possible d'utiliser une multi fl\u00e8che.</p> Relation d'impl\u00e9mentation entre une interface et un type"},{"location":"objet/dcc-norme/#dependance","title":"D\u00e9pendance","text":"<p>La d\u00e9pendance entre classes est la relation UML la moins contraignante. On l'utilise pour indiquer que la modification d'une classe (classe ind\u00e9pendante) peut amener la modification d'une autre classe (classe d\u00e9pendante). \u00c0 la diff\u00e9rence de la relation d'agr\u00e9gation, la relation de d\u00e9pendance ne n\u00e9cessite pas que la classe d\u00e9pendante poss\u00e8de un attribut sur l'autre classe. Il faut simplement qu'elle re\u00e7oive en param\u00e8tre ou qu'elle r\u00e9cup\u00e8re par un appel de m\u00e9thode une r\u00e9f\u00e9rence de l'autre classe.</p> <p>La d\u00e9pendance dirig\u00e9e est repr\u00e9sent\u00e9e \u00e0 l'aide d'une fl\u00e8che d'un trait plein (certains auteurs pr\u00e9senteront aussi un trait pointill\u00e9 pour la d\u00e9pendance). La fl\u00e8che part du type d\u00e9pendant vers le type ind\u00e9pendant. Il peut arriver que la d\u00e9pendance soit bidirectionnelle (donc chacun des types d\u00e9pend de l'autre), alors une fl\u00e8che avec deux t\u00eates est utilis\u00e9e.</p> <p>Si une relation d'agr\u00e9gation ou de composition existe d\u00e9j\u00e0 entre deux types, la d\u00e9pendance n'est pas indiqu\u00e9e sur le DCC, car la relation d'agr\u00e9gation ou de composition est plus forte que la relation de d\u00e9pendance.</p> <p>Bonnes pratiques</p> <ul> <li>Indiquer toutes les d\u00e9pendances sur un DCC cr\u00e9e rapidement une surcharge d'information et un diagramme de type spaghetti. On veut donc se concentrer sur les d\u00e9pendances les plus importantes afin d'\u00e9viter de surcharger le diagramme.</li> <li>Les d\u00e9pendances bidirectionnelles sont \u00e0 \u00e9viter autant que possible, car elles ajoutent un grand niveau de complexit\u00e9 dans le d\u00e9veloppement du syst\u00e8me.</li> </ul> <p>Syst\u00e8me de g\u00e9n\u00e9ration de formes g\u00e9om\u00e9triques</p> <p>Dans le diagramme de classes ci-dessous, on remarque que :</p> <ul> <li>Les classes <code>Cercle</code> et <code>Rectangle</code> h\u00e9ritent de la classe <code>Forme</code>.</li> <li>La classe <code>Forme</code> impl\u00e9mente l'interface <code>Dessinable</code>, de sorte qu'elle poss\u00e8de une m\u00e9thode <code>Dessiner</code>.</li> <li>La classe <code>Forme</code> poss\u00e8de un <code>Syst\u00e8me de mesure</code> pour garder dans quelles unit\u00e9s est d\u00e9finie la forme. Chaque <code>Forme</code> poss\u00e8de un <code>Syst\u00e8me de mesure</code> et chaque <code>Syst\u00e8me de mesure</code> peut \u00eatre associ\u00e9 \u00e0 aucune ou plusieurs <code>Forme</code>.</li> <li>L'interface <code>IDessinable</code> est utilis\u00e9e par la classe <code>Image</code>, car <code>Image</code> d\u00e9finit une m\u00e9thode dont l'un des param\u00e8tres est de type <code>Dessinable</code>.</li> <li>La structure <code>Resolution</code> est utilis\u00e9e par l'interface <code>IDessinable</code>. </li> <li>La classe <code>Image</code> agr\u00e8ge des objets de la structure <code>Resolution</code>. Notons ici que seule l'agr\u00e9gation est repr\u00e9sent\u00e9e, m\u00eame si une m\u00e9thode de la classe <code>Image</code> poss\u00e8de un param\u00e8tre de type <code>Resolution</code>.</li> </ul> <p> DCC du syst\u00e8me de g\u00e9om\u00e9trie </p>"},{"location":"objet/dcc-norme/#membres-statiques","title":"Membres statiques","text":"<p>Les membres d'un type peuvent \u00eatre d\u00e9finis sur le type plut\u00f4t que sur ses instances. C'est ce qui est appel\u00e9 la d\u00e9finition statique des membres. Dans la notation UML, les membres statiques sont d\u00e9finis en les soulignant. </p>"},{"location":"objet/dcc-norme/#abstraction","title":"Abstraction","text":"<p>Les membres abstraits, de m\u00eame que les types abstraits, sont d\u00e9finis en utilisant {\\itshape l'italique} dans leur d\u00e9finition. Les types abstraits d\u00e9finissent uniquement une signature sur le type dans lequel ils sont d\u00e9clar\u00e9s et sont impl\u00e9ment\u00e9s dans l'un des types enfants. Pour un type, \u00eatre abstrait signifie qu'il ne peut \u00eatre impl\u00e9ment\u00e9.</p> <p>Membres statiques et abstraction</p> <p>Dans l'exemple ci-dessous, on peut observer les trois particularit\u00e9s suivantes :</p> <ol> <li>La constante <code>pi</code> (\\(\\pi\\)) est d\u00e9finie dans la classe <code>Cercle</code>. La constante est d\u00e9finie de fa\u00e7on statique de fa\u00e7on \u00e0 emp\u00eacher sa d\u00e9claration pour chaque instance.</li> <li>L'attribut <code>perimetre</code> et la m\u00e9thode <code>CalculerAire</code> sont d\u00e9finies de fa\u00e7on abstraite dans la classe <code>Forme</code>. Chaque forme doit donc d\u00e9finir la fa\u00e7on de calculer son p\u00e9rim\u00e8tre et son aire.</li> <li>La m\u00e9thode <code>Dessiner</code> n'est pas marqu\u00e9e comme abstraite dans l'interface <code>IDessinable</code>. Comme il s'agit d'une interface, il est attendu que les membres ne d\u00e9finissent pas d'impl\u00e9mentation. Alors ils ne sont pas abstrait strictement parlant et par cons\u00e9quent ne sont pas marqu\u00e9s en tant que tel.</li> </ol> <p> Membres statiques et abstraction dans le syst\u00e8me g\u00e9om\u00e9trie </p>"},{"location":"objet/dcc-norme/#stereotypes","title":"St\u00e9r\u00e9otypes","text":"<p>Les st\u00e9r\u00e9otypes servent \u00e0 indiquer des informations compl\u00e9mentaires sur un type ou un membre. Dans le cadre de ce guide, uniquement les st\u00e9r\u00e9otypes sur les membres seront pr\u00e9sent\u00e9s. Tous les st\u00e9r\u00e9otypes apparaissent entre la visibilit\u00e9 et le nom du membre et ils sont indiqu\u00e9s entre une paire de guillemets fran\u00e7ais (\u00ab~\u00bb)<sup>1</sup>. Dans le cadre du guide, deux utilisations des st\u00e9r\u00e9otypes sont pr\u00e9sent\u00e9es la sp\u00e9cification des constructeurs et la sp\u00e9cification de types statiques.</p>"},{"location":"objet/dcc-norme/#constructeurs","title":"Constructeurs","text":"<p>Pour les m\u00e9thodes, il est aussi possible de renseigner leur utilit\u00e9 \u00e0 la classe \u00e0 l'aide d'un st\u00e9r\u00e9otype. Dans le cadre de ce guide, nous identifierons un seul st\u00e9r\u00e9otype : <code>create</code>.</p> <p>Le st\u00e9r\u00e9otype <code>create</code> sert \u00e0 indiquer qu'une m\u00e9thode cr\u00e9e une nouvelle instance d'un objet. Le st\u00e9r\u00e9otype accompagnera alors tous les constructeurs afin de bien les mettre en \u00e9vidence. </p> Repr\u00e9sentation des st\u00e9r\u00e9otypes sur un DCC <p>Les propri\u00e9t\u00e9s de la classe Rectangle</p> <p>En reprenant l'exemple de la classe <code>Rectangle</code>, on transforme les attributs largeur et hauteur en propri\u00e9t\u00e9s. On ajoute \u00e9galement deux propri\u00e9t\u00e9s: <code>SystemeMesure</code> et <code>Perimetre</code>. On conserve le syst\u00e8me de mesure dans lequel le rectangle est d\u00e9clar\u00e9 et on ajoute une propri\u00e9t\u00e9 appel\u00e9e P\u00e9rim\u00e8tre qui calcule le p\u00e9rim\u00e8tre du rectangle.</p> <p>On ajoute aussi le st\u00e9r\u00e9otype \\term{create} devant le constructeur afin d'indiquer que cette m\u00e9thode cr\u00e9e une nouvelle instance du type Rectangle. De cette fa\u00e7on, on sait que l'absence de type de retour (m\u00eame pas \\term{void}) n'est pas une erreur, mais bien le bon comportement.</p> Le diagrammeL'impl\u00e9mentation <p> Repr\u00e9sentation des propri\u00e9t\u00e9s de la classe Rectangle </p> <p>```c# \"La classe Rectangle\" linenums=\"1\" class Rectangle {     public float Longueur {get; set;}</p> <pre><code>public float Hauteur {get; set;}\n\npublic SystemeMesure {get; private set;}\n\npublic float Perimetre { \n    get { return Longueur * Hauteur * 2; }\n}\n\npublic Rectangle (float longueur, float hauteur, SystemeMesure systeme) {\n    Longueur = longueur;\n    Hauteur = hauteur;\n    SystemeMesure = systeme;\n}\n\npublic float CalculerAire() {\n    return Longueur * Hauteur;\n}\n\npublic bool AirePlusGrandeQue(Rectangle autre) {\n    return CalculerAire &gt; autre.CalculerAire();\n}\n</code></pre> <p>} ```</p>"},{"location":"objet/dcc-norme/#contraintes","title":"Contraintes","text":"<p>Des contraintes peuvent \u00eatre appliqu\u00e9es aux membres des classes afin de pr\u00e9ciser une particularit\u00e9 ou de pr\u00e9ciser une op\u00e9ration interdite. Certaines contraintes utilisent un mot-cl\u00e9, mais la plupart utilisent la notation de contrainte qui demande d'indiquer entre accolades ({ }) le nom de la contrainte utilis\u00e9e apr\u00e8s la signature du type (et la valeur par d\u00e9faut s'il y a lieu).</p>"},{"location":"objet/dcc-norme/#virtualisation","title":"Virtualisation","text":"<p>La contrainte de virtualisation permet d'indiquer qu'un membre (g\u00e9n\u00e9ralement une op\u00e9ration) est virtuel. Un membre virtuel pourra \u00eatre red\u00e9fini, plut\u00f4t que masqu\u00e9, par ses types enfants. Le nom de la contrainte est <code>virtual</code>.</p>"},{"location":"objet/dcc-norme/#redefinition","title":"Red\u00e9finition","text":"<p>La contrainte de red\u00e9finition indique qu'un type est red\u00e9fini par rapport \u00e0 son parent. Un membre qui a la m\u00eame signature que le parent et qui ne poss\u00e8de pas la contrainte de red\u00e9finition est consid\u00e9r\u00e9 comme masquant son parent. </p> <p>Pour indiquer une red\u00e9finition, on indique la contrainte <code>redefines</code> suivie du nom du membre du parent qui est red\u00e9fini.</p>"},{"location":"objet/dcc-norme/#ferme-a-la-redefinition","title":"Ferm\u00e9 \u00e0 la red\u00e9finition","text":"<p>Pour indiquer qu'un membre est ferm\u00e9 \u00e0 la red\u00e9finition, il faut utiliser la contrainte <code>leaf</code>.</p> <p>Cette contrainte \u00eatre utilis\u00e9 sur un type pour indiquer qu'il n'est pas possible d'en h\u00e9riter. Dans ce cas, la contrainte est indiqu\u00e9e sous le nom du type.</p>"},{"location":"objet/dcc-norme/#lecture-seule","title":"Lecture seule","text":"<p>La contrainte de lecture seule indique que la valeur du membre (g\u00e9n\u00e9ralement un attribut) peut \u00eatre d\u00e9finie une fois (dans le constructeur pour la plupart des langages) et sera ensuite immuable durant l'ex\u00e9cution. \u00c0 la diff\u00e9rence des constantes, les valeurs en lecture seule ne sont pas assign\u00e9es \u00e0 la compilation, mais bien \u00e0 l'ex\u00e9cution. Le nom de la contrainte de pour la lecture seule est <code>readonly</code>.</p>"},{"location":"objet/dcc-norme/#autres-contraintes","title":"Autres contraintes","text":"<p>Les contraintes pr\u00e9sent\u00e9es ici sont quelques-unes des contraintes \u00ab\u00a0standards\u00a0\u00bb. Bien qu'il n'en existe pas de liste exhaustive, ces contraintes sont suffisamment utilis\u00e9es, y compris dans la documentation UML, pour les personnes qui utilisent UML comprennent ce \u00e0 quoi les contraintes font r\u00e9f\u00e9rence.</p>"},{"location":"objet/dcc-norme/#membres-generiques","title":"Membres g\u00e9n\u00e9riques","text":"<p>Les param\u00e8tres g\u00e9n\u00e9riques permettent de repr\u00e9senter plusieurs situations directement dans les diagrammes de classe. Les param\u00e8tres g\u00e9n\u00e9riques peuvent \u00eatre des types, mais peuvent aussi \u00eatre des valeurs ou des constantes d\u00e9pendantes de la situation.</p> <p>Pour identifier un param\u00e8tre g\u00e9n\u00e9rique sur une classe, on l'indique dans une bo\u00eete pointill\u00e9e situ\u00e9e en haut \u00e0 droite de la classe. Le param\u00e8tre g\u00e9n\u00e9rique est identifi\u00e9 d'abord identifi\u00e9. Ensuite, si l'on souhaite pr\u00e9ciser une contrainte sur le type du param\u00e8tre g\u00e9n\u00e9rique, on ajoute un deux-points ( : ) puis le type dans lequel le param\u00e8tre g\u00e9n\u00e9rique doit \u00eatre. Finalement, si le param\u00e8tre prend une valeur par d\u00e9faut, on ajoute un symbole d'\u00e9galit\u00e9 (=) puis la valeur.</p> Repr\u00e9sentation de param\u00e8tres g\u00e9n\u00e9riques dans un DCC <p>Lorsqu'un type utilise un type qui d\u00e9finit un param\u00e8tre g\u00e9n\u00e9rique (agr\u00e9gation, impl\u00e9mentation ou h\u00e9ritage), il peut d\u00e9finir une relation de liaison et pr\u00e9ciser ou red\u00e9finir la valeur des param\u00e8tres g\u00e9n\u00e9riques. La relation est d\u00e9finie par la mention <code>\u00abbind\u00bb</code> suivie du nom du param\u00e8tre, d'une fl\u00e8che ( -&gt; ) et de la nouvelle valeur.</p> Repr\u00e9sentation de param\u00e8tres g\u00e9n\u00e9riques et de leur sp\u00e9cialisation dans un DCC <p>Utilisation des g\u00e9n\u00e9riques</p> <p>On fait la gestion d'un syst\u00e8me de file d'attente \u00e0 la caisse d'une \u00e9picerie. On utilise une structure de donn\u00e9e de type file pour mod\u00e9liser la situation. En plus des m\u00e9thodes d'une file standard, on veut pouvoir trouver le client avec le panier le plus plein dans la file afin de possiblement le faire passer \u00e0 une nouvelle caisse.</p> <p>Le concept de param\u00e8tre g\u00e9n\u00e9rique \u00e9tant avanc\u00e9, l'exemple demande des connaissances du cours de Programmation 3 pour \u00eatre compris.</p> <p>On remarque sur le diagramme les \u00e9l\u00e9ments suivants :</p> <ol> <li>Les classes <code>File</code> et <code>Noeud</code> d\u00e9finissent chacune un param\u00e8tre g\u00e9n\u00e9rique. Le param\u00e8tre g\u00e9n\u00e9rique est de type <code>Objet</code> (donc il doit h\u00e9riter d\u2019objet). On aurait pu utiliser la m\u00eame lettre pour d\u00e9signer le param\u00e8tre g\u00e9n\u00e9rique dans les deux classes. Toutefois, dans l'exemple, cela met en \u00e9vidence que les param\u00e8tres g\u00e9n\u00e9riques sont propres \u00e0 la visibilit\u00e9 de la classe.</li> <li>La classe <code>FileClient</code> d\u00e9finit le param\u00e8tre g\u00e9n\u00e9rique de <code>T</code> de <code>File</code> comme un client, donc elle utilisera toutes les m\u00e9thodes de <code>File</code> avec <code>T</code> qui sera toujours un <code>Client</code>.</li> <li>Le param\u00e8tre <code>U</code> de la classe <code>Noeud</code> est toujours d\u00e9fini avec la m\u00eame valeur que le param\u00e8tre <code>T</code> de la classe <code>File</code> lorsque le Noeud est utilis\u00e9 dans la <code>File</code>. Autrement dit, une <code>File</code> de clients comporte n\u00e9cessairement des noeuds du type <code>Client</code>. Si la classe <code>Noeud</code> \u00e9tait utilis\u00e9e dans une autre classe, elle pourrait d\u00e9finir son param\u00e8tre <code>U</code> autrement.</li> </ol> <p> Syst\u00e8me de gestion de file d'attente d'\u00e9picerie </p>"},{"location":"objet/dcc-norme/#imbrication","title":"Imbrication","text":"<p>La relation d'imbrication consiste \u00e0 d\u00e9finir une classe \u00e0 l'int\u00e9rieur d'une autre classe. La classe d\u00e9finie \u00e0 l'interne peut s'utiliser comme n'importe quelle autre classe du syst\u00e8me \u00e0 partir de la classe dans laquelle elle est d\u00e9finie. Pour le reste du syst\u00e8me, la classe interne est vue comme \u00e9tant dans l'espace de nom de la classe dans laquelle elle est d\u00e9clar\u00e9e (comme une variable est dans l'espace de nom de la classe dans laquelle elle est d\u00e9clar\u00e9e) avec les limites que cela entra\u00eene.</p> <p>La documentation officielle d'UML ne pr\u00e9cise pas de notation formelle pour la relation d'imbrication de classes. La notation utilis\u00e9e dans les standards pr\u00e9c\u00e9dents est encore sugg\u00e9r\u00e9e dans certains contextes. Il s'agit d'une ligne dont la fin est un cercle avec une croix \u00e0 l'int\u00e9rieur (appel\u00e9 ancre). L'ancre est du c\u00f4t\u00e9 du type englobant.</p> Repr\u00e9sentation de la relation d'imbrication dans un DCC"},{"location":"objet/dcc-norme/#commentaires","title":"Commentaires","text":"<p>Il est possible de compl\u00e9ter l'information sur un DCC \u00e0 l'aide de commentaires. Les commentaires prennent la forme de rectangle avec un coin repli\u00e9. Un trait pointill\u00e9 peut indiquer l'\u00e9l\u00e9ment auquel s'applique le commentaire si le contexte n'\u00e9nonce pas de fa\u00e7on univoque \u00e0 quel le commentaire fait r\u00e9f\u00e9rence.</p> Commentaire dans DCC <ol> <li> <p>Il est possible d'indiquer une paire de chevrons (\\(&lt;&lt;\\ &gt;&gt;\\)) si le clavier utilis\u00e9 ne permet pas d'\u00e9crire de guillemets fran\u00e7ais}.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"objet/det-banque/","title":"Banque de d\u00e9pannage","text":"<p>Mon objet peut \u00eatre dans deux \u00e9tats en m\u00eame temps, comment puis-je repr\u00e9senter cette situation ?</p> <ul> <li> Tranformer en un super\u00e9tat l'un des deux \u00e9tats.</li> <li>Ajouter un nouvel \u00e9tat qui correspond \u00e0 la situation o\u00f9 l'objet se retrouve dans les \u00e9tats en m\u00eame temps .</li> </ul>"},{"location":"objet/det-exemple/","title":"Exemples complets","text":""},{"location":"objet/det-exemple/#etude-de-cas-la-machine-distributrice","title":"\u00c9tude de cas - La machine distributrice","text":"<p>Une machine distributrice offre diff\u00e9rentes boissons aux utilisateurs. Elle doit percevoir le paiement et apr\u00e8s remettre la boisson si le montant per\u00e7u est le bon. S'il y a trop d'argent ins\u00e9r\u00e9, elle doit rendre la monnaie.</p> \u00c9tude de cas - DET d'une machine distributrice <p>\u00c0 noter sur le diagramme : </p> <ol> <li>Il y a la pr\u00e9sence d'un \u00e9tat entr\u00e9e et d'un \u00e9tat sortie;</li> <li>Chaque transition est nomm\u00e9e selon l'op\u00e9ration qui lui permet d'\u00eatre activ\u00e9e;</li> <li>Chaque \u00e9tat poss\u00e8de une sortie (le syst\u00e8me ne peut pas rester pris quelque part);</li> <li>Chaque chemin est exclusif (on ne pourrait pas se retrouver dans une situation o\u00f9 une action nous am\u00e8ne \u00e0 choisir entre deux chemin);</li> <li>Aucun \u00e9tat interne de l'objet n'est indiqu\u00e9 (on ne retient pas le produit s\u00e9lectionn\u00e9 ou le montant d'argent requis. Ces \u00e9l\u00e9ments ne vont pas sur un DET).</li> </ol>"},{"location":"objet/det-exemple/#etude-de-cas-la-remise-dun-travail","title":"\u00c9tude de cas - La remise d'un travail","text":"<p>Les \u00e9l\u00e8ves re\u00e7oivent un travail de leur enseignant et doivent compl\u00e9t\u00e9 celui-ci. Une fois remis, l'enseignant corrige et peut demander une r\u00e9vision du fran\u00e7ais aux \u00e9l\u00e8ves si celui-ci est jug\u00e9 innad\u00e9quat. Une fois le travail corrig\u00e9 il est archiv\u00e9 jusqu'\u00e0 la fin du d\u00e9lai de r\u00e9vision de note puis d\u00e9truit.</p> \u00c9tude de cas - DET d'une remise d'un travail"},{"location":"objet/det-norme/","title":"Normes du diagramme d'\u00e9tats-transitions","text":"<p>\u00c9tape de la conception</p> <p>  Analyse et conception</p> <p>Standard de notation</p> <p>UML 2.5</p> <p>Nom anglais</p> <p>State diagram</p> <p>Les mod\u00e8les pr\u00e9sent\u00e9s aux pr\u00e9c\u00e9dentes sections d\u00e9crivent la structure des classes, mais n'apportent pas de pr\u00e9cisions sur les comportements de ces derni\u00e8res. En UML, il est possible de mod\u00e9liser les comportements de quatre fa\u00e7ons :</p> <ul> <li>Diagramme d'\u00e9tats d'objets;</li> <li>Diagrammes d'\u00e9tats-transitions de cas d'utilisation;</li> <li>Diagrammes de s\u00e9quence syst\u00e8me;</li> <li>Diagrammes d'activit\u00e9 (diagramme de s\u00e9quence ou de collaboration).</li> </ul> <p>Dans ce guide, seuls les diagrammes d'\u00e9tats-transitions d'objet, qui seront simplement appel\u00e9s diagramme d'\u00e9tats-transitions (DET), sont pr\u00e9sent\u00e9s. Les DET permettent de pr\u00e9senter les diff\u00e9rents \u00e9tats dans lesquels un objet peut se retrouver ainsi que les changements qui peuvent \u00eatre apport\u00e9s sur cet objet afin qu'il passe d'un \u00e9tat \u00e0 un autre. </p>"},{"location":"objet/det-norme/#les-etats-de-comportement","title":"Les \u00e9tats de comportement","text":"<p>Les <code>\u00e9tats</code> simples sont not\u00e9s par une bo\u00eete arrondie. Le nom de l'\u00e9tat appara\u00eet en gras dans la bo\u00eete. Le nom de l'\u00e9tat est un descriptif (id\u00e9alement d'un seul mot) qui indique l'\u00e9tat de l'objet. De r\u00e8gle g\u00e9n\u00e9rale, les \u00e9tats seront nomm\u00e9s selon des adjectifs ou des expressions descriptives tels \u00ab\u00a0actif\u00a0\u00bb, \u00ab\u00a0innactif\u00a0\u00bb, \u00ab\u00a0en attente\u00a0\u00bb, \u00ab\u00a0valid\u00e9\u00a0\u00bb.</p> Repr\u00e9sentation d'un \u00e9tat simple dans un DET <p>On peut aussi ajouter une bo\u00eete d'action en dessous du nom de l'\u00e9tat pour indiquer des actions \u00e0 prendre dans le syst\u00e8me lorsque l'objet entre, qu'il demeure ou qu'il sort de l'\u00e9tat. On indique les conditions d'ex\u00e9cution de l'action suivies d'une barre oblique et de la description de l'action. Les trois mots-cl\u00e9s suivants sont employ\u00e9s pour d\u00e9signer les conditions d'ex\u00e9cution :</p> <ul> <li>entry : action ex\u00e9cut\u00e9e lorsque l'objet entre dans l'\u00e9tat;</li> <li>do : action ex\u00e9cut\u00e9e tant que l'objet demeure dans l'\u00e9tat;</li> <li>exit action ex\u00e9cut\u00e9e lorsque l'objet sort de l'\u00e9tat.</li> </ul> <p>Si un \u00e9tat n'a pas d'action, alors il s'agit d'un \u00e9tat simple. Il est possible de r\u00e9p\u00e9ter une condition d'ex\u00e9cution s'il y a plusieurs actions \u00e0 faire dans une m\u00eame condition d'ex\u00e9cution (par exemple, s'il y a deux traitements \u00e0 faire \u00e0 l'entr\u00e9e, on indique deux lignes entry).</p> Repr\u00e9sentation d'un \u00e9tat avec des actions dans un DET"},{"location":"objet/det-norme/#les-superetats","title":"Les super\u00e9tats","text":"<p>Il arrive que certains \u00e9tats puissent partager des caract\u00e9ristiques ou d\u00e9composer un traitement en plusieurs sous-traitements. Prenons l'exemple d'une validation \u00e0 plusieurs \u00e9tapes. Il est int\u00e9ressant alors de regrouper plusieurs \u00e9tats dans un m\u00eame \u00e9tat appel\u00e9 <code>super\u00e9tat</code>.</p> <p>Un <code>super\u00e9tat</code> est repr\u00e9sent\u00e9 par une bo\u00eete semblable \u00e0 celle d'un \u00e9tat avec des actions, mais contient d'autres \u00e9tats et des transitions au lieu de contenir des actions. Le nom de l'\u00e9tat sera affich\u00e9 dans une \u00e9tiquette rectangulaire situ\u00e9e en haut \u00e0 gauche de la bo\u00eete. Pour entrer ou sortir d'un <code>super\u00e9tat</code>, il faut utiliser les \u00e9tats sp\u00e9ciaux des super\u00e9tats.</p> Repr\u00e9sentation d'un super\u00e9tat dans un DET <p>Notation alternative</p> <p>Il est possible de noter les \u00e9tats  de comportement avec la notation d'une bo\u00eete surmont\u00e9e d'une \u00e9tiquette (comme pour les super\u00e9tats). De m\u00eame, il est possible de noter les super\u00e9tats avec une simple bo\u00eete et un s\u00e9parateur comme pour les \u00e9tats.</p>"},{"location":"objet/det-norme/#les-transitions","title":"Les transitions","text":"<p>Les <code>transitions</code> repr\u00e9sentent la possibilit\u00e9 de passer d'un \u00e9tat \u00e0 un autre. Ils sont repr\u00e9sent\u00e9s par une fl\u00e8che d\u00e9butant \u00e0 un \u00e9tat et se terminant \u00e0 un autre \u00e9tat. Un texte appara\u00eet toujours sur la fl\u00e8che indiquant l'\u00e9l\u00e9ment qui d\u00e9clenche la transition. </p> Repr\u00e9sentation d'une transition dans un DET"},{"location":"objet/det-norme/#conditions-de-garde-et-actions-de-transition","title":"Conditions de garde et actions de transition","text":"<p>Il est aussi possible d'ajouter une <code>condition de garde</code> pour pr\u00e9ciser une condition n\u00e9cessaire \u00e0 la r\u00e9alisation de la transition. Une condition de garde est indiqu\u00e9e entre crochets. Une action peut aussi \u00eatre effectu\u00e9e pendant la transition. Si c'est le cas, elle est not\u00e9e apr\u00e8s une barre oblique \u00ab\u00a0/\u00a0\u00bb. L'ordre d'apparition des th\u00e8mes est toujours le suivant :</p> <p>     d\u00e9clencheur [condition de garde]\u00a0/\u00a0action de transition </p> <ul> <li> <p>Repr\u00e9sentation des conditions de garde dans un DET</p> <p> </p> </li> <li> <p>Repr\u00e9sentation des actions de transition dans un DET</p> <p> </p> </li> </ul> <p>Important</p> <p>\u00c0 la sortie d'un \u00e9tat, les conditions doivent \u00eatre exclusives. C'est-\u00e0-dire que pour chaque sc\u00e9nario d'ex\u00e9cution, un seul chemin est disponible. Par exemple les conditions \\([x &gt; 10]\\) et \\([x &gt; 15]\\) ne sont pas exclusives, car 20 les satisfait toutes les deux. Par contre, \\([10 &lt; x \\leq 15]\\) et \\([x &gt; 15]\\) sont des conditions exclusives.</p> <p>\u00c9galement,il doit toujours y avoir une transition valide pour quitter un \u00e9tat. Les \u00e9tats sp\u00e9ciaux <code>d\u00e9truire</code> ou <code>final</code> font exceptions \u00e0 cette r\u00e8gle.</p>"},{"location":"objet/det-norme/#les-etats-speciaux","title":"Les \u00e9tats sp\u00e9ciaux","text":"<p>Les \u00e9tats sp\u00e9ciaux permettent de repr\u00e9senter graphiquement certains \u00e9tats communs \u00e0 un grand nombre de diagrammes d'\u00e9tats-transitions. Il existe plus d'\u00e9tats sp\u00e9ciaux que pr\u00e9sent\u00e9s ici.</p>"},{"location":"objet/det-norme/#etats-dans-la-vie-de-lobjet","title":"\u00c9tats dans la vie de l'objet","text":"<p>Trois \u00e9tats sp\u00e9ciaux servent \u00e0 d\u00e9crire la vie d'un objet :</p> <ul> <li>L'\u00e9tat <code>initial</code> est le premier \u00e9tat visit\u00e9 dans un DET. Il indique o\u00f9 commencer \u00e0 lire le diagramme et repr\u00e9sente g\u00e9n\u00e9ralement l'activation ou la cr\u00e9ation de l'objet. Il est repr\u00e9sent\u00e9 par un cercle vide. </li> <li>L'\u00e9tat <code>d\u00e9truire</code> est le dernier \u00e9tat visit\u00e9 dans un DET. Il indique la destruction de l'objet, et donc, la fin de son comportement. Il est repr\u00e9sent\u00e9 par une croix. </li> <li>L'\u00e9tat <code>final</code> est le dernier \u00e9tat visit\u00e9 dans un DET. Il indique la fin du processus mod\u00e9lis\u00e9. \u00c0 la diff\u00e9rence de l'\u00e9tat <code>d\u00e9truire</code>, il n'indique pas la destruction de la ressource (ni m\u00eame sa d\u00e9sactivation), mais simplement la fin du processus. Il est repr\u00e9sent\u00e9 par un cercle plein inscrit dans un plus grand cercle vide.</li> </ul> <ul> <li> <p>Repr\u00e9sentation de l'\u00e9tat sp\u00e9cial <code>initial</code> dans un DET</p> <p> </p> </li> <li> <p>Repr\u00e9sentation de l'\u00e9tat sp\u00e9cial <code>d\u00e9truire</code> dans un DET</p> <p> </p> </li> <li> <p>Repr\u00e9sentation de l'\u00e9tat sp\u00e9cial <code>final</code> dans un DET</p> <p> </p> </li> </ul>"},{"location":"objet/det-norme/#etats-de-liaisons-entre-des-superetats","title":"\u00c9tats de liaisons entre des super\u00e9tats","text":"<p>Sauf exception, il n'existe qu'un point d'entr\u00e9e dans un super\u00e9tat. Cela n'exclut pas que plusieurs transitions puissent mener \u00e0 ce point d'entr\u00e9e, mais le super\u00e9tat encapsule ses \u00e9tats internes, donc contr\u00f4le le chemin d'acc\u00e8s. Il en va de m\u00eame pour la sortie du super \u00e9tat. On utilise donc deux \u00e9tats sp\u00e9ciaux pour repr\u00e9senter l'entr\u00e9e et la sortie d'un super\u00e9tat.</p> <p>Chacun de ces \u00e9tats est repr\u00e9sent\u00e9 par un symbole plac\u00e9 \u00e0 la limite du super\u00e9tat. Une ou plusieurs transitions peuvent provenir ou terminer \u00e0 ces \u00e9tats sp\u00e9ciaux. Tous les transitions entrantes ou sortantes du super devraient passer par des \u00e9tats sp\u00e9ciaux. Le <code>point d'entr\u00e9e</code> dans un super\u00e9tat est repr\u00e9sent\u00e9 par un cercle vide, tandis que le <code>point de sortie</code> d'un super\u00e9tat est repr\u00e9sent\u00e9e par une croix dans un cercle.</p> <ul> <li> <p>Repr\u00e9sentation de l'\u00e9tat sp\u00e9cial <code>point d'entr\u00e9e</code> dans un super\u00e9tat de DET</p> <p> </p> </li> <li> <p>Repr\u00e9sentation de l'\u00e9tat sp\u00e9cial <code>point de sortie</code> dans un super\u00e9tat de DET</p> <p> </p> </li> </ul> DET avec un super\u00e9tat"}]}